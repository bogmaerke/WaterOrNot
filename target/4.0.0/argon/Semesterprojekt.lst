
c:/particle_workspace/Semesterprojekt/target/4.0.0/argon/Semesterprojekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005420  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9440  000b9440  00009440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       0000000c  2003f400  000b9464  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  2003e44c  000b9470  0001e44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001b8  2003e638  2003e638  0002e638  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b965c  000b965c  0002965c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b9684  000b9684  00029684  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001277fd  00000000  00000000  00029688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000132f3  00000000  00000000  00150e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003d346  00000000  00000000  00164178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ed8  00000000  00000000  001a14be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b290  00000000  00000000  001a4396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003aa23  00000000  00000000  001af626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000409ed  00000000  00000000  001ea049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013a04c  00000000  00000000  0022aa36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008c08  00000000  00000000  00364a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 fefe 	bl	b6e32 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 ff06 	bl	b6e4e <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e44c 	.word	0x2003e44c
   b404c:	000b9470 	.word	0x000b9470
   b4050:	2003e638 	.word	0x2003e638
   b4054:	2003e638 	.word	0x2003e638
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 fb3f 	bl	b56e4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b941c 	.word	0x000b941c
   b4080:	000b9440 	.word	0x000b9440

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b948 	b.w	b4318 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f8d1 	bl	b4230 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 badf 	b.w	b5654 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 b88f 	b.w	b51b8 <malloc>

000b409a <_Znaj>:
   b409a:	f001 b88d 	b.w	b51b8 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 b893 	b.w	b51c8 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40b2:	4770      	bx	lr

000b40b4 <_Z9myHandlerPKcS0_>:
    }
}

void myHandler(const char *event, const char *data)
{
    // Get weather data
   b40b4:	b510      	push	{r4, lr}
   b40b6:	b09a      	sub	sp, #104	; 0x68
   b40b8:	460c      	mov	r4, r1
    // https://api.met.no/weatherapi/locationforecast/2.0/compact?lat=x&lon=y
    char d[100];
    strcpy(d, data);
    lastPercipitation = atof(data);
   b40ba:	a801      	add	r0, sp, #4
   b40bc:	f002 fefe 	bl	b6ebc <strcpy>
    gotWeatherData = true;
   b40c0:	4620      	mov	r0, r4
   b40c2:	f002 feb3 	bl	b6e2c <atof>
   b40c6:	ec51 0b10 	vmov	r0, r1, d0
   b40ca:	f002 fe3b 	bl	b6d44 <__aeabi_d2f>
   b40ce:	4b03      	ldr	r3, [pc, #12]	; (b40dc <_Z9myHandlerPKcS0_+0x28>)
   b40d0:	6018      	str	r0, [r3, #0]
}
   b40d2:	4b03      	ldr	r3, [pc, #12]	; (b40e0 <_Z9myHandlerPKcS0_+0x2c>)
   b40d4:	2201      	movs	r2, #1
   b40d6:	701a      	strb	r2, [r3, #0]

   b40d8:	b01a      	add	sp, #104	; 0x68
   b40da:	bd10      	pop	{r4, pc}
   b40dc:	2003f400 	.word	0x2003f400
   b40e0:	2003e660 	.word	0x2003e660

000b40e4 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b40e4:	6943      	ldr	r3, [r0, #20]
   b40e6:	b113      	cbz	r3, b40ee <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b40e8:	6983      	ldr	r3, [r0, #24]
   b40ea:	300c      	adds	r0, #12
   b40ec:	4718      	bx	r3
            callback();
        }
    }
   b40ee:	4770      	bx	lr

000b40f0 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b40f0:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b40f2:	2100      	movs	r1, #0
   b40f4:	4604      	mov	r4, r0
   b40f6:	4608      	mov	r0, r1
   b40f8:	f000 fe4e 	bl	b4d98 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b40fc:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b40fe:	4620      	mov	r0, r4
   b4100:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4102:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4104:	f000 fe60 	bl	b4dc8 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4108:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b410a:	b10c      	cbz	r4, b4110 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b410c:	2301      	movs	r3, #1
   b410e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4110:	2100      	movs	r1, #0
   b4112:	2001      	movs	r0, #1
   b4114:	f000 fe40 	bl	b4d98 <os_thread_scheduling>
            }
        }
        if (t) {
   b4118:	b12c      	cbz	r4, b4126 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b411a:	6823      	ldr	r3, [r4, #0]
   b411c:	4620      	mov	r0, r4
   b411e:	689b      	ldr	r3, [r3, #8]
   b4120:	4798      	blx	r3
            t->running = false;
   b4122:	2300      	movs	r3, #0
   b4124:	7123      	strb	r3, [r4, #4]
        }
    }
   b4126:	b002      	add	sp, #8
   b4128:	bd10      	pop	{r4, pc}

000b412a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b412a:	2a01      	cmp	r2, #1
   b412c:	d102      	bne.n	b4134 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b412e:	6001      	str	r1, [r0, #0]
      }
   b4130:	2000      	movs	r0, #0
   b4132:	4770      	bx	lr
	  switch (__op)
   b4134:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4136:	bf04      	itt	eq
   b4138:	680b      	ldreq	r3, [r1, #0]
   b413a:	6003      	streq	r3, [r0, #0]
	      break;
   b413c:	e7f8      	b.n	b4130 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b413e <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b413e:	6803      	ldr	r3, [r0, #0]
   b4140:	4718      	bx	r3
	...

000b4144 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4144:	b510      	push	{r4, lr}
   b4146:	4b05      	ldr	r3, [pc, #20]	; (b415c <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b4148:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b414a:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b414c:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b414e:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b4152:	f000 ff41 	bl	b4fd8 <led_set_status_active>
}
   b4156:	4620      	mov	r0, r4
   b4158:	bd10      	pop	{r4, pc}
   b415a:	bf00      	nop
   b415c:	000b8df0 	.word	0x000b8df0

000b4160 <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4160:	b510      	push	{r4, lr}
   b4162:	4604      	mov	r4, r0
}
   b4164:	f7ff ffee 	bl	b4144 <_ZN8particle9LEDStatusD1Ev>
   b4168:	4620      	mov	r0, r4
   b416a:	2120      	movs	r1, #32
   b416c:	f7ff ff97 	bl	b409e <_ZdlPvj>
   b4170:	4620      	mov	r0, r4
   b4172:	bd10      	pop	{r4, pc}

000b4174 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4174:	b510      	push	{r4, lr}
      if (_M_manager)
   b4176:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4178:	4604      	mov	r4, r0
      if (_M_manager)
   b417a:	b113      	cbz	r3, b4182 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b417c:	2203      	movs	r2, #3
   b417e:	4601      	mov	r1, r0
   b4180:	4798      	blx	r3
    }
   b4182:	4620      	mov	r0, r4
   b4184:	bd10      	pop	{r4, pc}
	...

000b4188 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4188:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b418a:	4b13      	ldr	r3, [pc, #76]	; (b41d8 <_ZN5TimerD1Ev+0x50>)
   b418c:	6003      	str	r3, [r0, #0]
   b418e:	4604      	mov	r4, r0
        if (handle) {
   b4190:	6880      	ldr	r0, [r0, #8]
   b4192:	b1c8      	cbz	r0, b41c8 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4194:	2500      	movs	r5, #0
   b4196:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b419a:	e9cd 3500 	strd	r3, r5, [sp]
   b419e:	2102      	movs	r1, #2
   b41a0:	462b      	mov	r3, r5
   b41a2:	462a      	mov	r2, r5
   b41a4:	f000 fe18 	bl	b4dd8 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b41a8:	68a0      	ldr	r0, [r4, #8]
   b41aa:	4629      	mov	r1, r5
   b41ac:	f000 fe24 	bl	b4df8 <os_timer_set_id>
            while (running) {
   b41b0:	7923      	ldrb	r3, [r4, #4]
   b41b2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b41b6:	b113      	cbz	r3, b41be <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b41b8:	f000 fde6 	bl	b4d88 <os_thread_yield>
            while (running) {
   b41bc:	e7f8      	b.n	b41b0 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b41be:	68a0      	ldr	r0, [r4, #8]
   b41c0:	4629      	mov	r1, r5
   b41c2:	f000 fdf9 	bl	b4db8 <os_timer_destroy>
            handle = nullptr;
   b41c6:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b41c8:	f104 000c 	add.w	r0, r4, #12
   b41cc:	f7ff ffd2 	bl	b4174 <_ZNSt14_Function_baseD1Ev>
    }
   b41d0:	4620      	mov	r0, r4
   b41d2:	b003      	add	sp, #12
   b41d4:	bd30      	pop	{r4, r5, pc}
   b41d6:	bf00      	nop
   b41d8:	000b8ddc 	.word	0x000b8ddc

000b41dc <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b41dc:	b510      	push	{r4, lr}
   b41de:	4604      	mov	r4, r0
    }
   b41e0:	f7ff ffd2 	bl	b4188 <_ZN5TimerD1Ev>
   b41e4:	4620      	mov	r0, r4
   b41e6:	211c      	movs	r1, #28
   b41e8:	f7ff ff59 	bl	b409e <_ZdlPvj>
   b41ec:	4620      	mov	r0, r4
   b41ee:	bd10      	pop	{r4, pc}

000b41f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b41f0:	b510      	push	{r4, lr}
   b41f2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b41f4:	6800      	ldr	r0, [r0, #0]
   b41f6:	b118      	cbz	r0, b4200 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b41f8:	f000 ffe6 	bl	b51c8 <free>
            wakeupSource_ = nullptr;
   b41fc:	2300      	movs	r3, #0
   b41fe:	6023      	str	r3, [r4, #0]
        }
    }
   b4200:	bd10      	pop	{r4, pc}

000b4202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4202:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4204:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4206:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4208:	b17c      	cbz	r4, b422a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b420a:	6863      	ldr	r3, [r4, #4]
   b420c:	3b01      	subs	r3, #1
   b420e:	6063      	str	r3, [r4, #4]
   b4210:	b95b      	cbnz	r3, b422a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4212:	6823      	ldr	r3, [r4, #0]
   b4214:	4620      	mov	r0, r4
   b4216:	689b      	ldr	r3, [r3, #8]
   b4218:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b421a:	68a3      	ldr	r3, [r4, #8]
   b421c:	3b01      	subs	r3, #1
   b421e:	60a3      	str	r3, [r4, #8]
   b4220:	b91b      	cbnz	r3, b422a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4222:	6823      	ldr	r3, [r4, #0]
   b4224:	4620      	mov	r0, r4
   b4226:	68db      	ldr	r3, [r3, #12]
   b4228:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b422a:	4628      	mov	r0, r5
   b422c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4230 <loop>:
    if (gotWeatherData)
   b4230:	b530      	push	{r4, r5, lr}
    {
   b4232:	4b18      	ldr	r3, [pc, #96]	; (b4294 <loop+0x64>)
   b4234:	781b      	ldrb	r3, [r3, #0]
    if (gotWeatherData)
   b4236:	b09b      	sub	sp, #108	; 0x6c
    {
   b4238:	b34b      	cbz	r3, b428e <loop+0x5e>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b423a:	f000 fd9d 	bl	b4d78 <HAL_Timer_Get_Milli_Seconds>
        Particle.publish("DATA", str, PRIVATE);
   b423e:	4d16      	ldr	r5, [pc, #88]	; (b4298 <loop+0x68>)
   b4240:	4604      	mov	r4, r0
   b4242:	6828      	ldr	r0, [r5, #0]
   b4244:	f002 fa6c 	bl	b6720 <__aeabi_f2d>
   b4248:	460b      	mov	r3, r1
        char str[80];
   b424a:	4914      	ldr	r1, [pc, #80]	; (b429c <loop+0x6c>)
        Particle.publish("DATA", str, PRIVATE);
   b424c:	4602      	mov	r2, r0
        char str[80];
   b424e:	6808      	ldr	r0, [r1, #0]
        Particle.publish("DATA", str, PRIVATE);
   b4250:	6869      	ldr	r1, [r5, #4]
   b4252:	9100      	str	r1, [sp, #0]
        char str[80];
   b4254:	1a24      	subs	r4, r4, r0
        Particle.publish("DATA", str, PRIVATE);
   b4256:	4912      	ldr	r1, [pc, #72]	; (b42a0 <loop+0x70>)
   b4258:	9401      	str	r4, [sp, #4]
   b425a:	a806      	add	r0, sp, #24
   b425c:	f000 ffc4 	bl	b51e8 <sprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4260:	4b10      	ldr	r3, [pc, #64]	; (b42a4 <loop+0x74>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4262:	4911      	ldr	r1, [pc, #68]	; (b42a8 <loop+0x78>)
   b4264:	781b      	ldrb	r3, [r3, #0]
   b4266:	f88d 3000 	strb.w	r3, [sp]
   b426a:	aa06      	add	r2, sp, #24
   b426c:	233c      	movs	r3, #60	; 0x3c
   b426e:	a803      	add	r0, sp, #12
   b4270:	f001 fbb0 	bl	b59d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4274:	a804      	add	r0, sp, #16
   b4276:	f7ff ffc4 	bl	b4202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        // Particle.disconnect();
   b427a:	20c8      	movs	r0, #200	; 0xc8
   b427c:	f001 f9be 	bl	b55fc <delay>
    }
   b4280:	a803      	add	r0, sp, #12
   b4282:	490a      	ldr	r1, [pc, #40]	; (b42ac <loop+0x7c>)
   b4284:	f001 f86e 	bl	b5364 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        freeWakeupSourceMemory();
   b4288:	a803      	add	r0, sp, #12
   b428a:	f7ff ffb1 	bl	b41f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>

   b428e:	b01b      	add	sp, #108	; 0x6c
   b4290:	bd30      	pop	{r4, r5, pc}
   b4292:	bf00      	nop
   b4294:	2003e660 	.word	0x2003e660
   b4298:	2003f400 	.word	0x2003f400
   b429c:	2003e698 	.word	0x2003e698
   b42a0:	000b8d6c 	.word	0x000b8d6c
   b42a4:	2003e644 	.word	0x2003e644
   b42a8:	000b8dcd 	.word	0x000b8dcd
   b42ac:	2003e648 	.word	0x2003e648

000b42b0 <_Z10forceSleepv>:
void forceSleep()
{
    Particle.publish("FORCE_SLEEP", "\r", PRIVATE);
   b42b0:	b510      	push	{r4, lr}
   b42b2:	4b14      	ldr	r3, [pc, #80]	; (b4304 <_Z10forceSleepv+0x54>)
   b42b4:	4a14      	ldr	r2, [pc, #80]	; (b4308 <_Z10forceSleepv+0x58>)
   b42b6:	781b      	ldrb	r3, [r3, #0]
   b42b8:	4914      	ldr	r1, [pc, #80]	; (b430c <_Z10forceSleepv+0x5c>)
   b42ba:	b086      	sub	sp, #24
   b42bc:	a803      	add	r0, sp, #12
   b42be:	f88d 3000 	strb.w	r3, [sp]
   b42c2:	233c      	movs	r3, #60	; 0x3c
   b42c4:	f001 fb86 	bl	b59d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b42c8:	a804      	add	r0, sp, #16
   b42ca:	f7ff ff9a 	bl	b4202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(200);
    Particle.disconnect();
   b42ce:	20c8      	movs	r0, #200	; 0xc8
   b42d0:	f001 f994 	bl	b55fc <delay>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b42d4:	2400      	movs	r4, #0
    WiFi.off();
   b42d6:	a803      	add	r0, sp, #12
   b42d8:	e9cd 4403 	strd	r4, r4, [sp, #12]
        bool clearSession) :
   b42dc:	f8ad 4014 	strh.w	r4, [sp, #20]
   b42e0:	f001 fa77 	bl	b57d2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b42e4:	480a      	ldr	r0, [pc, #40]	; (b4310 <_Z10forceSleepv+0x60>)
   b42e6:	4623      	mov	r3, r4
   b42e8:	4622      	mov	r2, r4
   b42ea:	4621      	mov	r1, r4
   b42ec:	6840      	ldr	r0, [r0, #4]
   b42ee:	f000 fef3 	bl	b50d8 <network_off>
    System.sleep(config);
   b42f2:	4908      	ldr	r1, [pc, #32]	; (b4314 <_Z10forceSleepv+0x64>)
   b42f4:	a803      	add	r0, sp, #12
   b42f6:	f001 f835 	bl	b5364 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
   b42fa:	a803      	add	r0, sp, #12
   b42fc:	f7ff ff78 	bl	b41f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
   b4300:	b006      	add	sp, #24
   b4302:	bd10      	pop	{r4, pc}
   b4304:	2003e644 	.word	0x2003e644
   b4308:	000b8d7e 	.word	0x000b8d7e
   b430c:	000b8d80 	.word	0x000b8d80
   b4310:	2003e70c 	.word	0x2003e70c
   b4314:	2003e648 	.word	0x2003e648

000b4318 <setup>:
{
   b4318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFi.setCredentials(WiFiSSID, WiFiPW);
   b431c:	4ba5      	ldr	r3, [pc, #660]	; (b45b4 <setup+0x29c>)
   b431e:	f8d3 8000 	ldr.w	r8, [r3]
   b4322:	4ba5      	ldr	r3, [pc, #660]	; (b45b8 <setup+0x2a0>)
{
   b4324:	b098      	sub	sp, #96	; 0x60
    WiFi.setCredentials(WiFiSSID, WiFiPW);
   b4326:	681e      	ldr	r6, [r3, #0]
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4328:	f1b8 0f00 	cmp.w	r8, #0
   b432c:	f000 80bf 	beq.w	b44ae <setup+0x196>
   b4330:	4640      	mov	r0, r8
   b4332:	f002 fde8 	bl	b6f06 <strlen>
   b4336:	4607      	mov	r7, r0
   b4338:	2e00      	cmp	r6, #0
   b433a:	f000 80ba 	beq.w	b44b2 <setup+0x19a>
   b433e:	4630      	mov	r0, r6
   b4340:	f002 fde1 	bl	b6f06 <strlen>
   b4344:	4604      	mov	r4, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b4346:	2238      	movs	r2, #56	; 0x38
   b4348:	2100      	movs	r1, #0
   b434a:	a80a      	add	r0, sp, #40	; 0x28
   b434c:	f002 fd7f 	bl	b6e4e <memset>
        creds.size = sizeof(creds);
   b4350:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b4352:	e9cd 3805 	strd	r3, r8, [sp, #20]
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4356:	4899      	ldr	r0, [pc, #612]	; (b45bc <setup+0x2a4>)
        creds.password_len = passwordLen;
   b4358:	9409      	str	r4, [sp, #36]	; 0x24
        creds.security = WLanSecurityType(security);
   b435a:	2303      	movs	r3, #3
   b435c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        memset(&creds, 0, sizeof(creds));
   b4360:	ad05      	add	r5, sp, #20
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4362:	2300      	movs	r3, #0
   b4364:	4619      	mov	r1, r3
   b4366:	462a      	mov	r2, r5
   b4368:	6840      	ldr	r0, [r0, #4]
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b436a:	4c95      	ldr	r4, [pc, #596]	; (b45c0 <setup+0x2a8>)
        creds.password = password;
   b436c:	e9cd 7607 	strd	r7, r6, [sp, #28]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4370:	f000 feca 	bl	b5108 <network_set_credentials>
   b4374:	f000 fd00 	bl	b4d78 <HAL_Timer_Get_Milli_Seconds>
    timeStart = millis();
   b4378:	4b92      	ldr	r3, [pc, #584]	; (b45c4 <setup+0x2ac>)
   b437a:	6018      	str	r0, [r3, #0]
   b437c:	68a0      	ldr	r0, [r4, #8]
   b437e:	b130      	cbz	r0, b438e <setup+0x76>
   b4380:	2300      	movs	r3, #0
   b4382:	e9cd 3300 	strd	r3, r3, [sp]
   b4386:	461a      	mov	r2, r3
   b4388:	2102      	movs	r1, #2
   b438a:	f000 fd25 	bl	b4dd8 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b438e:	68a0      	ldr	r0, [r4, #8]
   b4390:	b140      	cbz	r0, b43a4 <setup+0x8c>
   b4392:	2300      	movs	r3, #0
   b4394:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b4398:	e9cd 2300 	strd	r2, r3, [sp]
   b439c:	4619      	mov	r1, r3
   b439e:	461a      	mov	r2, r3
   b43a0:	f000 fd1a 	bl	b4dd8 <os_timer_change>
    gotWeatherData = false;
   b43a4:	4b88      	ldr	r3, [pc, #544]	; (b45c8 <setup+0x2b0>)
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b43a6:	4e89      	ldr	r6, [pc, #548]	; (b45cc <setup+0x2b4>)
   b43a8:	2400      	movs	r4, #0
   b43aa:	701c      	strb	r4, [r3, #0]
   b43ac:	7c33      	ldrb	r3, [r6, #16]
   b43ae:	f003 0303 	and.w	r3, r3, #3
   b43b2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    led_set_status_active(&d_, active, nullptr);
   b43b6:	1d30      	adds	r0, r6, #4
   b43b8:	4622      	mov	r2, r4
   b43ba:	2101      	movs	r1, #1
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b43bc:	7433      	strb	r3, [r6, #16]
    led_set_status_active(&d_, active, nullptr);
   b43be:	f000 fe0b 	bl	b4fd8 <led_set_status_active>
    d_.flags |= LED_STATUS_FLAG_OFF;
   b43c2:	7cb3      	ldrb	r3, [r6, #18]
   b43c4:	f043 0302 	orr.w	r3, r3, #2
   b43c8:	74b3      	strb	r3, [r6, #18]
    for (unsigned int i = 0; i < sizeof(PINS) / sizeof(PINS[0]); i++)
   b43ca:	4e81      	ldr	r6, [pc, #516]	; (b45d0 <setup+0x2b8>)
        pinMode(PINS[i], OUTPUT);
   b43cc:	8830      	ldrh	r0, [r6, #0]
   b43ce:	2101      	movs	r1, #1
   b43d0:	f001 ff76 	bl	b62c0 <pinMode>
    for (unsigned int i = 0; i < sizeof(PINS) / sizeof(PINS[0]); i++)
   b43d4:	3401      	adds	r4, #1
        digitalWrite(PINS[i], LOW);
   b43d6:	f836 0b02 	ldrh.w	r0, [r6], #2
   b43da:	2100      	movs	r1, #0
   b43dc:	f001 ff81 	bl	b62e2 <digitalWrite>
    for (unsigned int i = 0; i < sizeof(PINS) / sizeof(PINS[0]); i++)
   b43e0:	2c03      	cmp	r4, #3
   b43e2:	d1f3      	bne.n	b43cc <setup+0xb4>
    pinMode(INT_INPUT, INPUT);
   b43e4:	2100      	movs	r1, #0
   b43e6:	2005      	movs	r0, #5
   b43e8:	f001 ff6a 	bl	b62c0 <pinMode>
    pinMode(VBAT_CTRL, OUTPUT);
   b43ec:	2101      	movs	r1, #1
   b43ee:	2002      	movs	r0, #2
   b43f0:	f001 ff66 	bl	b62c0 <pinMode>
    pinMode(SENSOR, INPUT);
   b43f4:	2100      	movs	r1, #0
   b43f6:	2010      	movs	r0, #16
   b43f8:	f001 ff62 	bl	b62c0 <pinMode>
    pinMode(VBAT_ADC, INPUT);
   b43fc:	2100      	movs	r1, #0
   b43fe:	2011      	movs	r0, #17
   b4400:	f001 ff5e 	bl	b62c0 <pinMode>
    while (!rtc.begin())
   b4404:	4c73      	ldr	r4, [pc, #460]	; (b45d4 <setup+0x2bc>)
   b4406:	f001 fff3 	bl	b63f0 <_Z19__fetch_global_Wirev>
   b440a:	4601      	mov	r1, r0
   b440c:	4620      	mov	r0, r4
   b440e:	f000 fa8e 	bl	b492e <_ZN10RTC_DS32315beginEP7TwoWire>
   b4412:	2800      	cmp	r0, #0
   b4414:	d0f7      	beq.n	b4406 <setup+0xee>
    if (rtc.lostPower())
   b4416:	486f      	ldr	r0, [pc, #444]	; (b45d4 <setup+0x2bc>)
   b4418:	f000 fa9a 	bl	b4950 <_ZN10RTC_DS32319lostPowerEv>
   b441c:	2800      	cmp	r0, #0
   b441e:	d038      	beq.n	b4492 <setup+0x17a>
        rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
   b4420:	4a6d      	ldr	r2, [pc, #436]	; (b45d8 <setup+0x2c0>)
   b4422:	496e      	ldr	r1, [pc, #440]	; (b45dc <setup+0x2c4>)
        // DS3231_A1_Hour to turn on once a day.
   b4424:	4c6b      	ldr	r4, [pc, #428]	; (b45d4 <setup+0x2bc>)
        rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
   b4426:	4628      	mov	r0, r5
   b4428:	f000 f9ce 	bl	b47c8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
   b442c:	4629      	mov	r1, r5
   b442e:	4869      	ldr	r0, [pc, #420]	; (b45d4 <setup+0x2bc>)
   b4430:	f000 fa97 	bl	b4962 <_ZN10RTC_DS32316adjustERK8DateTime>
        rtc.disable32K();
   b4434:	4867      	ldr	r0, [pc, #412]	; (b45d4 <setup+0x2bc>)
   b4436:	f000 fc4e 	bl	b4cd6 <_ZN10RTC_DS323110disable32KEv>
        rtc.clearAlarm(1);
   b443a:	4866      	ldr	r0, [pc, #408]	; (b45d4 <setup+0x2bc>)
   b443c:	2101      	movs	r1, #1
   b443e:	f000 fc28 	bl	b4c92 <_ZN10RTC_DS323110clearAlarmEh>
        rtc.clearAlarm(2);
   b4442:	4864      	ldr	r0, [pc, #400]	; (b45d4 <setup+0x2bc>)
   b4444:	2102      	movs	r1, #2
   b4446:	f000 fc24 	bl	b4c92 <_ZN10RTC_DS323110clearAlarmEh>
        rtc.writeSqwPinMode(DS3231_OFF);
   b444a:	4862      	ldr	r0, [pc, #392]	; (b45d4 <setup+0x2bc>)
   b444c:	211c      	movs	r1, #28
   b444e:	f000 fb02 	bl	b4a56 <_ZN10RTC_DS323115writeSqwPinModeE16Ds3231SqwPinMode>
        rtc.disableAlarm(2);
   b4452:	4860      	ldr	r0, [pc, #384]	; (b45d4 <setup+0x2bc>)
   b4454:	2102      	movs	r1, #2
   b4456:	f000 fc06 	bl	b4c66 <_ZN10RTC_DS323112disableAlarmEh>
        DateTime dt = DateTime((F(__DATE__), "16:00:00"));
   b445a:	4961      	ldr	r1, [pc, #388]	; (b45e0 <setup+0x2c8>)
   b445c:	a803      	add	r0, sp, #12
   b445e:	f000 fa13 	bl	b4888 <_ZN8DateTimeC1EPKc>
        // DS3231_A1_Hour to turn on once a day.
   b4462:	220e      	movs	r2, #14
   b4464:	a903      	add	r1, sp, #12
   b4466:	4620      	mov	r0, r4
   b4468:	f000 fb08 	bl	b4a7c <_ZN10RTC_DS32319setAlarm1ERK8DateTime16Ds3231Alarm1Mode>
   b446c:	2800      	cmp	r0, #0
   b446e:	d0f8      	beq.n	b4462 <setup+0x14a>
        while (!rtc.setAlarm2(
   b4470:	495c      	ldr	r1, [pc, #368]	; (b45e4 <setup+0x2cc>)
            dt,
   b4472:	4c58      	ldr	r4, [pc, #352]	; (b45d4 <setup+0x2bc>)
        while (!rtc.setAlarm2(
   b4474:	4628      	mov	r0, r5
   b4476:	f000 fa07 	bl	b4888 <_ZN8DateTimeC1EPKc>
   b447a:	e895 0003 	ldmia.w	r5, {r0, r1}
   b447e:	9003      	str	r0, [sp, #12]
   b4480:	f8ad 1010 	strh.w	r1, [sp, #16]
            dt,
   b4484:	2204      	movs	r2, #4
   b4486:	a903      	add	r1, sp, #12
   b4488:	4620      	mov	r0, r4
   b448a:	f000 fb7a 	bl	b4b82 <_ZN10RTC_DS32319setAlarm2ERK8DateTime16Ds3231Alarm2Mode>
   b448e:	2800      	cmp	r0, #0
   b4490:	d0f8      	beq.n	b4484 <setup+0x16c>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b4492:	4e55      	ldr	r6, [pc, #340]	; (b45e8 <setup+0x2d0>)
   b4494:	7d33      	ldrb	r3, [r6, #20]
   b4496:	b1cb      	cbz	r3, b44cc <setup+0x1b4>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4498:	2303      	movs	r3, #3
   b449a:	7233      	strb	r3, [r6, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b449c:	6833      	ldr	r3, [r6, #0]
   b449e:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b44a0:	2b00      	cmp	r3, #0
   b44a2:	d052      	beq.n	b454a <setup+0x232>
            if (start->type == type) {
   b44a4:	889a      	ldrh	r2, [r3, #4]
   b44a6:	2a01      	cmp	r2, #1
   b44a8:	d00b      	beq.n	b44c2 <setup+0x1aa>
            start = start->next;
   b44aa:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b44ac:	e7f8      	b.n	b44a0 <setup+0x188>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b44ae:	4647      	mov	r7, r8
   b44b0:	e742      	b.n	b4338 <setup+0x20>
   b44b2:	4634      	mov	r4, r6
   b44b4:	e747      	b.n	b4346 <setup+0x2e>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b44b6:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b44b8:	2b00      	cmp	r3, #0
   b44ba:	d046      	beq.n	b454a <setup+0x232>
            if (start->type == type) {
   b44bc:	889a      	ldrh	r2, [r3, #4]
   b44be:	2a01      	cmp	r2, #1
   b44c0:	d1f9      	bne.n	b44b6 <setup+0x19e>
                if (gpioWakeup->pin == pin) {
   b44c2:	899a      	ldrh	r2, [r3, #12]
   b44c4:	2a05      	cmp	r2, #5
   b44c6:	d1f6      	bne.n	b44b6 <setup+0x19e>
                    gpioWakeup->mode = mode;
   b44c8:	2202      	movs	r2, #2
   b44ca:	739a      	strb	r2, [r3, #14]
    {
   b44cc:	4841      	ldr	r0, [pc, #260]	; (b45d4 <setup+0x2bc>)
   b44ce:	2101      	movs	r1, #1
   b44d0:	f000 fbf5 	bl	b4cbe <_ZN10RTC_DS323110alarmFiredEh>
   b44d4:	2800      	cmp	r0, #0
   b44d6:	d04e      	beq.n	b4576 <setup+0x25e>
        rtc.clearAlarm(2);
   b44d8:	483e      	ldr	r0, [pc, #248]	; (b45d4 <setup+0x2bc>)
   b44da:	2101      	movs	r1, #1
   b44dc:	f000 fbd9 	bl	b4c92 <_ZN10RTC_DS323110clearAlarmEh>
    }
   b44e0:	483c      	ldr	r0, [pc, #240]	; (b45d4 <setup+0x2bc>)
   b44e2:	2102      	movs	r1, #2
   b44e4:	f000 fbd5 	bl	b4c92 <_ZN10RTC_DS323110clearAlarmEh>
    soilMoisture = map(soilMoisture, SENSOR_DRY, SENSOR_WET, 0, 100);
   b44e8:	2010      	movs	r0, #16
   b44ea:	f001 ff13 	bl	b6314 <analogRead>
   b44ee:	4c3f      	ldr	r4, [pc, #252]	; (b45ec <setup+0x2d4>)
    // Wait for cloud connection
   b44f0:	2364      	movs	r3, #100	; 0x64
    soilMoisture = map(soilMoisture, SENSOR_DRY, SENSOR_WET, 0, 100);
   b44f2:	6060      	str	r0, [r4, #4]
    // Wait for cloud connection
   b44f4:	f44f 62af 	mov.w	r2, #1400	; 0x578
   b44f8:	9300      	str	r3, [sp, #0]
   b44fa:	f640 5148 	movw	r1, #3400	; 0xd48
   b44fe:	2300      	movs	r3, #0
   b4500:	f001 f870 	bl	b55e4 <_Z3mapiiiii>
   b4504:	6060      	str	r0, [r4, #4]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4506:	f000 fe2f 	bl	b5168 <spark_cloud_flag_connected>
        ;
   b450a:	2800      	cmp	r0, #0
   b450c:	d0fb      	beq.n	b4506 <setup+0x1ee>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b450e:	2400      	movs	r4, #0
   b4510:	4937      	ldr	r1, [pc, #220]	; (b45f0 <setup+0x2d8>)
   b4512:	4838      	ldr	r0, [pc, #224]	; (b45f4 <setup+0x2dc>)
   b4514:	4623      	mov	r3, r4
   b4516:	4622      	mov	r2, r4
   b4518:	e9cd 4400 	strd	r4, r4, [sp]
   b451c:	f000 fe34 	bl	b5188 <spark_subscribe>
   b4520:	4b35      	ldr	r3, [pc, #212]	; (b45f8 <setup+0x2e0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4522:	4a36      	ldr	r2, [pc, #216]	; (b45fc <setup+0x2e4>)
   b4524:	781b      	ldrb	r3, [r3, #0]
   b4526:	f88d 3000 	strb.w	r3, [sp]
   b452a:	4628      	mov	r0, r5
   b452c:	6812      	ldr	r2, [r2, #0]
   b452e:	4934      	ldr	r1, [pc, #208]	; (b4600 <setup+0x2e8>)
   b4530:	233c      	movs	r3, #60	; 0x3c
   b4532:	f001 fa4f 	bl	b59d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b4536:	4620      	mov	r0, r4
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4538:	9d05      	ldr	r5, [sp, #20]
   b453a:	f000 fd6f 	bl	b501c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b453e:	b308      	cbz	r0, b4584 <setup+0x26c>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b4540:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4542:	b9fb      	cbnz	r3, b4584 <setup+0x26c>
        spark_process();
   b4544:	f000 fe08 	bl	b5158 <spark_process>
    }
   b4548:	e7fa      	b.n	b4540 <setup+0x228>
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b454a:	492e      	ldr	r1, [pc, #184]	; (b4604 <setup+0x2ec>)
   b454c:	2010      	movs	r0, #16
   b454e:	f001 ff73 	bl	b6438 <_ZnwjRKSt9nothrow_t>
   b4552:	4604      	mov	r4, r0
   b4554:	b358      	cbz	r0, b45ae <setup+0x296>
   b4556:	2210      	movs	r2, #16
   b4558:	2100      	movs	r1, #0
   b455a:	f002 fc78 	bl	b6e4e <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b455e:	4b2a      	ldr	r3, [pc, #168]	; (b4608 <setup+0x2f0>)
   b4560:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4562:	2301      	movs	r3, #1
   b4564:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4566:	6933      	ldr	r3, [r6, #16]
   b4568:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   b456a:	2305      	movs	r3, #5
   b456c:	81a3      	strh	r3, [r4, #12]
            wakeupSource->mode = mode;
   b456e:	2302      	movs	r3, #2
   b4570:	73a3      	strb	r3, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4572:	6134      	str	r4, [r6, #16]
   b4574:	e7aa      	b.n	b44cc <setup+0x1b4>
    {
   b4576:	4817      	ldr	r0, [pc, #92]	; (b45d4 <setup+0x2bc>)
   b4578:	2102      	movs	r1, #2
   b457a:	f000 fba0 	bl	b4cbe <_ZN10RTC_DS323110alarmFiredEh>
   b457e:	2800      	cmp	r0, #0
   b4580:	d1aa      	bne.n	b44d8 <setup+0x1c0>
   b4582:	e7b1      	b.n	b44e8 <setup+0x1d0>
   b4584:	786b      	ldrb	r3, [r5, #1]
   b4586:	f3bf 8f5b 	dmb	ish
   b458a:	1c6c      	adds	r4, r5, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b458c:	b14b      	cbz	r3, b45a2 <setup+0x28a>
        return (application_thread_current(nullptr) != 0);
   b458e:	2000      	movs	r0, #0
   b4590:	f000 fd44 	bl	b501c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4594:	b120      	cbz	r0, b45a0 <setup+0x288>
   b4596:	7823      	ldrb	r3, [r4, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4598:	b913      	cbnz	r3, b45a0 <setup+0x288>
        spark_process();
   b459a:	f000 fddd 	bl	b5158 <spark_process>
    }
   b459e:	e7fa      	b.n	b4596 <setup+0x27e>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b45a0:	782b      	ldrb	r3, [r5, #0]
      ~__shared_ptr() = default;
   b45a2:	a806      	add	r0, sp, #24
   b45a4:	f7ff fe2d 	bl	b4202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

   b45a8:	b018      	add	sp, #96	; 0x60
   b45aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                valid_ = false;
   b45ae:	7530      	strb	r0, [r6, #20]
                return *this;
   b45b0:	e78c      	b.n	b44cc <setup+0x1b4>
   b45b2:	bf00      	nop
   b45b4:	2003e458 	.word	0x2003e458
   b45b8:	2003e454 	.word	0x2003e454
   b45bc:	2003e70c 	.word	0x2003e70c
   b45c0:	2003e69c 	.word	0x2003e69c
   b45c4:	2003e698 	.word	0x2003e698
   b45c8:	2003e660 	.word	0x2003e660
   b45cc:	2003e678 	.word	0x2003e678
   b45d0:	2003e44c 	.word	0x2003e44c
   b45d4:	2003e674 	.word	0x2003e674
   b45d8:	000b8d8c 	.word	0x000b8d8c
   b45dc:	000b8d95 	.word	0x000b8d95
   b45e0:	000b8da1 	.word	0x000b8da1
   b45e4:	000b8daa 	.word	0x000b8daa
   b45e8:	2003e648 	.word	0x2003e648
   b45ec:	2003f400 	.word	0x2003f400
   b45f0:	000b40b5 	.word	0x000b40b5
   b45f4:	000b8db3 	.word	0x000b8db3
   b45f8:	2003e644 	.word	0x2003e644
   b45fc:	2003e664 	.word	0x2003e664
   b4600:	000b8dc1 	.word	0x000b8dc1
   b4604:	000b8ff8 	.word	0x000b8ff8
   b4608:	00030010 	.word	0x00030010

000b460c <_GLOBAL__sub_I_WiFiSSID>:
   b460c:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b460e:	4b2d      	ldr	r3, [pc, #180]	; (b46c4 <_GLOBAL__sub_I_WiFiSSID+0xb8>)
   b4610:	2501      	movs	r5, #1
   b4612:	b089      	sub	sp, #36	; 0x24
   b4614:	701d      	strb	r5, [r3, #0]
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b4616:	2200      	movs	r2, #0
   b4618:	2114      	movs	r1, #20
   b461a:	4628      	mov	r0, r5
   b461c:	f000 fd0e 	bl	b503c <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b4620:	2214      	movs	r2, #20
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b4622:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b4624:	9200      	str	r2, [sp, #0]
   b4626:	9501      	str	r5, [sp, #4]
   b4628:	462a      	mov	r2, r5
   b462a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b462e:	4826      	ldr	r0, [pc, #152]	; (b46c8 <_GLOBAL__sub_I_WiFiSSID+0xbc>)
   b4630:	f000 fe46 	bl	b52c0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
        : config_(config) {
   b4634:	4b25      	ldr	r3, [pc, #148]	; (b46cc <_GLOBAL__sub_I_WiFiSSID+0xc0>)
   b4636:	1d1a      	adds	r2, r3, #4
              valid_(true) {
   b4638:	2400      	movs	r4, #0
        : config_(config) {
   b463a:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b463c:	4a24      	ldr	r2, [pc, #144]	; (b46d0 <_GLOBAL__sub_I_WiFiSSID+0xc4>)
   b463e:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4640:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4644:	751d      	strb	r5, [r3, #20]
   b4646:	611c      	str	r4, [r3, #16]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4648:	4b22      	ldr	r3, [pc, #136]	; (b46d4 <_GLOBAL__sub_I_WiFiSSID+0xc8>)
   b464a:	9304      	str	r3, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b464c:	ae04      	add	r6, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b464e:	4b22      	ldr	r3, [pc, #136]	; (b46d8 <_GLOBAL__sub_I_WiFiSSID+0xcc>)
   b4650:	4a22      	ldr	r2, [pc, #136]	; (b46dc <_GLOBAL__sub_I_WiFiSSID+0xd0>)
   b4652:	601a      	str	r2, [r3, #0]
   b4654:	e896 0003 	ldmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4658:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b465c:	af02      	add	r7, sp, #8
   b465e:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4662:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4666:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b466a:	e897 0003 	ldmia.w	r7, {r0, r1}
   b466e:	e882 0003 	stmia.w	r2, {r0, r1}
   b4672:	4a1b      	ldr	r2, [pc, #108]	; (b46e0 <_GLOBAL__sub_I_WiFiSSID+0xd4>)
   b4674:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4676:	699a      	ldr	r2, [r3, #24]
   b4678:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b467a:	4a1a      	ldr	r2, [pc, #104]	; (b46e4 <_GLOBAL__sub_I_WiFiSSID+0xd8>)
   b467c:	711c      	strb	r4, [r3, #4]
   b467e:	609c      	str	r4, [r3, #8]
   b4680:	619a      	str	r2, [r3, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4682:	f247 5130 	movw	r1, #30000	; 0x7530
   b4686:	4a18      	ldr	r2, [pc, #96]	; (b46e8 <_GLOBAL__sub_I_WiFiSSID+0xdc>)
      __a = _GLIBCXX_MOVE(__b);
   b4688:	9406      	str	r4, [sp, #24]
   b468a:	f103 0008 	add.w	r0, r3, #8
   b468e:	e9cd 5400 	strd	r5, r4, [sp]
   b4692:	f000 fb89 	bl	b4da8 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b4696:	4630      	mov	r0, r6
   b4698:	f7ff fd6c 	bl	b4174 <_ZNSt14_Function_baseD1Ev>
              error_(SYSTEM_ERROR_NONE) {
   b469c:	4b13      	ldr	r3, [pc, #76]	; (b46ec <_GLOBAL__sub_I_WiFiSSID+0xe0>)
    SleepResult() {}
   b469e:	4a14      	ldr	r2, [pc, #80]	; (b46f0 <_GLOBAL__sub_I_WiFiSSID+0xe4>)
   b46a0:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b46a2:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b46a6:	4628      	mov	r0, r5
   b46a8:	f000 fca0 	bl	b4fec <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b46ac:	4621      	mov	r1, r4
   b46ae:	4628      	mov	r0, r5
   b46b0:	f000 fcac 	bl	b500c <system_thread_set_state>
String requestString = "\r";
   b46b4:	490f      	ldr	r1, [pc, #60]	; (b46f4 <_GLOBAL__sub_I_WiFiSSID+0xe8>)
   b46b6:	4810      	ldr	r0, [pc, #64]	; (b46f8 <_GLOBAL__sub_I_WiFiSSID+0xec>)
   b46b8:	b009      	add	sp, #36	; 0x24
   b46ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
String requestString = "\r";
   b46be:	f000 bf07 	b.w	b54d0 <_ZN6StringC1EPK19__FlashStringHelper>
   b46c2:	bf00      	nop
   b46c4:	2003e644 	.word	0x2003e644
   b46c8:	2003e678 	.word	0x2003e678
   b46cc:	2003e648 	.word	0x2003e648
   b46d0:	00030010 	.word	0x00030010
   b46d4:	000b42b1 	.word	0x000b42b1
   b46d8:	2003e69c 	.word	0x2003e69c
   b46dc:	000b8ddc 	.word	0x000b8ddc
   b46e0:	000b412b 	.word	0x000b412b
   b46e4:	000b413f 	.word	0x000b413f
   b46e8:	000b40f1 	.word	0x000b40f1
   b46ec:	2003e638 	.word	0x2003e638
   b46f0:	ffff0000 	.word	0xffff0000
   b46f4:	000b8d7e 	.word	0x000b8d7e
   b46f8:	2003e664 	.word	0x2003e664

000b46fc <_ZL9date2daysthh>:
    @param m Month
    @param d Day
    @return Number of days
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
   b46fc:	b530      	push	{r4, r5, lr}
   b46fe:	4c0f      	ldr	r4, [pc, #60]	; (b473c <_ZL9date2daysthh+0x40>)
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
   b4700:	2300      	movs	r3, #0
  for (uint8_t i = 1; i < m; ++i)
   b4702:	3301      	adds	r3, #1
   b4704:	b2dd      	uxtb	r5, r3
   b4706:	428d      	cmp	r5, r1
   b4708:	d204      	bcs.n	b4714 <_ZL9date2daysthh+0x18>
    days += pgm_read_byte(daysInMonth + i - 1);
   b470a:	f814 5b01 	ldrb.w	r5, [r4], #1
   b470e:	442a      	add	r2, r5
   b4710:	b292      	uxth	r2, r2
  for (uint8_t i = 1; i < m; ++i)
   b4712:	e7f6      	b.n	b4702 <_ZL9date2daysthh+0x6>
  if (m > 2 && y % 4 == 0)
   b4714:	2902      	cmp	r1, #2
   b4716:	d903      	bls.n	b4720 <_ZL9date2daysthh+0x24>
   b4718:	0783      	lsls	r3, r0, #30
    ++days;
   b471a:	bf04      	itt	eq
   b471c:	3201      	addeq	r2, #1
   b471e:	b292      	uxtheq	r2, r2
  return days + 365 * y + (y + 3) / 4 - 1;
   b4720:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
   b4724:	1cc3      	adds	r3, r0, #3
   b4726:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   b472a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   b472e:	f3c3 038d 	ubfx	r3, r3, #2, #14
   b4732:	3801      	subs	r0, #1
   b4734:	4418      	add	r0, r3
   b4736:	4410      	add	r0, r2
}
   b4738:	b280      	uxth	r0, r0
   b473a:	bd30      	pop	{r4, r5, pc}
   b473c:	000b8e2e 	.word	0x000b8e2e

000b4740 <_ZL6conv2dPKc>:
    @param p Pointer to a string containing two digits
*/
/**************************************************************************/
static uint8_t conv2d(const char *p) {
  uint8_t v = 0;
  if ('0' <= *p && *p <= '9')
   b4740:	7803      	ldrb	r3, [r0, #0]
    v = *p - '0';
  return 10 * v + *++p - '0';
   b4742:	7840      	ldrb	r0, [r0, #1]
  if ('0' <= *p && *p <= '9')
   b4744:	3b30      	subs	r3, #48	; 0x30
   b4746:	b2db      	uxtb	r3, r3
  uint8_t v = 0;
   b4748:	2b0a      	cmp	r3, #10
   b474a:	bf28      	it	cs
   b474c:	2300      	movcs	r3, #0
  return 10 * v + *++p - '0';
   b474e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4752:	3830      	subs	r0, #48	; 0x30
   b4754:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
   b4758:	b2c0      	uxtb	r0, r0
   b475a:	4770      	bx	lr

000b475c <_ZL17read_i2c_registerhhP7TwoWire>:
                                 TwoWire *wireInstance) {
   b475c:	b570      	push	{r4, r5, r6, lr}
   b475e:	4614      	mov	r4, r2
   b4760:	4605      	mov	r5, r0
   b4762:	460e      	mov	r6, r1
  wireInstance->beginTransmission(addr);
   b4764:	4601      	mov	r1, r0
   b4766:	4610      	mov	r0, r2
   b4768:	f001 fc6e 	bl	b6048 <_ZN7TwoWire17beginTransmissionEh>
  wireInstance->_I2C_WRITE((byte)reg);
   b476c:	6823      	ldr	r3, [r4, #0]
   b476e:	4631      	mov	r1, r6
   b4770:	689b      	ldr	r3, [r3, #8]
   b4772:	4620      	mov	r0, r4
   b4774:	4798      	blx	r3
  wireInstance->endTransmission();
   b4776:	4620      	mov	r0, r4
   b4778:	f001 fc71 	bl	b605e <_ZN7TwoWire15endTransmissionEv>
  wireInstance->requestFrom(addr, (byte)1);
   b477c:	2201      	movs	r2, #1
   b477e:	4629      	mov	r1, r5
   b4780:	4620      	mov	r0, r4
   b4782:	f001 fc5e 	bl	b6042 <_ZN7TwoWire11requestFromEhj>
  return wireInstance->_I2C_READ();
   b4786:	6823      	ldr	r3, [r4, #0]
   b4788:	4620      	mov	r0, r4
   b478a:	695b      	ldr	r3, [r3, #20]
   b478c:	4798      	blx	r3
}
   b478e:	b2c0      	uxtb	r0, r0
   b4790:	bd70      	pop	{r4, r5, r6, pc}

000b4792 <_ZL18write_i2c_registerhhhP7TwoWire>:
                               TwoWire *wireInstance) {
   b4792:	b570      	push	{r4, r5, r6, lr}
   b4794:	461c      	mov	r4, r3
   b4796:	460e      	mov	r6, r1
  wireInstance->beginTransmission(addr);
   b4798:	4601      	mov	r1, r0
   b479a:	4618      	mov	r0, r3
                               TwoWire *wireInstance) {
   b479c:	4615      	mov	r5, r2
  wireInstance->beginTransmission(addr);
   b479e:	f001 fc53 	bl	b6048 <_ZN7TwoWire17beginTransmissionEh>
  wireInstance->_I2C_WRITE((byte)reg);
   b47a2:	6823      	ldr	r3, [r4, #0]
   b47a4:	4631      	mov	r1, r6
   b47a6:	689b      	ldr	r3, [r3, #8]
   b47a8:	4620      	mov	r0, r4
   b47aa:	4798      	blx	r3
  wireInstance->_I2C_WRITE((byte)val);
   b47ac:	6823      	ldr	r3, [r4, #0]
   b47ae:	4629      	mov	r1, r5
   b47b0:	4620      	mov	r0, r4
   b47b2:	689b      	ldr	r3, [r3, #8]
   b47b4:	4798      	blx	r3
  wireInstance->endTransmission();
   b47b6:	4620      	mov	r0, r4
}
   b47b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  wireInstance->endTransmission();
   b47bc:	f001 bc4f 	b.w	b605e <_ZN7TwoWire15endTransmissionEv>

000b47c0 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b47c0:	6803      	ldr	r3, [r0, #0]
   b47c2:	b2c9      	uxtb	r1, r1
   b47c4:	689b      	ldr	r3, [r3, #8]
   b47c6:	4718      	bx	r3

000b47c8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:

    @param date Date PROGMEM string, e.g. F("Apr 16 2020").
    @param time Time PROGMEM string, e.g. F("18:34:56").
*/
/**************************************************************************/
DateTime::DateTime(const __FlashStringHelper *date,
   b47c8:	b530      	push	{r4, r5, lr}
   b47ca:	460d      	mov	r5, r1
   b47cc:	b085      	sub	sp, #20
   b47ce:	4604      	mov	r4, r0
                   const __FlashStringHelper *time) {
  char buff[11];
  memcpy_P(buff, date, 11);
   b47d0:	6808      	ldr	r0, [r1, #0]
   b47d2:	6849      	ldr	r1, [r1, #4]
   b47d4:	ab01      	add	r3, sp, #4
   b47d6:	c303      	stmia	r3!, {r0, r1}
   b47d8:	8928      	ldrh	r0, [r5, #8]
   b47da:	7aa9      	ldrb	r1, [r5, #10]
   b47dc:	8018      	strh	r0, [r3, #0]
   b47de:	7099      	strb	r1, [r3, #2]
  yOff = conv2d(buff + 9);
   b47e0:	f10d 000d 	add.w	r0, sp, #13
   b47e4:	f7ff ffac 	bl	b4740 <_ZL6conv2dPKc>
   b47e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b47ec:	7020      	strb	r0, [r4, #0]
  // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
  switch (buff[0]) {
   b47ee:	3b41      	subs	r3, #65	; 0x41
   b47f0:	2b12      	cmp	r3, #18
   b47f2:	d816      	bhi.n	b4822 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x5a>
   b47f4:	e8df f003 	tbb	[pc, r3]
   b47f8:	46151532 	.word	0x46151532
   b47fc:	15153015 	.word	0x15153015
   b4800:	15150a15 	.word	0x15150a15
   b4804:	15424439 	.word	0x15424439
   b4808:	1515      	.short	0x1515
   b480a:	40          	.byte	0x40
   b480b:	00          	.byte	0x00
  case 'J':
    m = (buff[1] == 'a') ? 1 : ((buff[2] == 'n') ? 6 : 7);
   b480c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b4810:	2b61      	cmp	r3, #97	; 0x61
   b4812:	d01f      	beq.n	b4854 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x8c>
   b4814:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b4818:	2b6e      	cmp	r3, #110	; 0x6e
   b481a:	bf0c      	ite	eq
   b481c:	2306      	moveq	r3, #6
   b481e:	2307      	movne	r3, #7
    break;
  case 'N':
    m = 11;
    break;
  case 'D':
    m = 12;
   b4820:	7063      	strb	r3, [r4, #1]
    break;
  }
  d = conv2d(buff + 4);
   b4822:	a802      	add	r0, sp, #8
   b4824:	f7ff ff8c 	bl	b4740 <_ZL6conv2dPKc>
   b4828:	70a0      	strb	r0, [r4, #2]
  memcpy_P(buff, time, 8);
   b482a:	6810      	ldr	r0, [r2, #0]
   b482c:	6851      	ldr	r1, [r2, #4]
   b482e:	ab01      	add	r3, sp, #4
   b4830:	c303      	stmia	r3!, {r0, r1}
  hh = conv2d(buff);
   b4832:	a801      	add	r0, sp, #4
   b4834:	f7ff ff84 	bl	b4740 <_ZL6conv2dPKc>
   b4838:	70e0      	strb	r0, [r4, #3]
  mm = conv2d(buff + 3);
   b483a:	f10d 0007 	add.w	r0, sp, #7
   b483e:	f7ff ff7f 	bl	b4740 <_ZL6conv2dPKc>
   b4842:	7120      	strb	r0, [r4, #4]
  ss = conv2d(buff + 6);
   b4844:	f10d 000a 	add.w	r0, sp, #10
   b4848:	f7ff ff7a 	bl	b4740 <_ZL6conv2dPKc>
   b484c:	7160      	strb	r0, [r4, #5]
}
   b484e:	4620      	mov	r0, r4
   b4850:	b005      	add	sp, #20
   b4852:	bd30      	pop	{r4, r5, pc}
    m = (buff[1] == 'a') ? 1 : ((buff[2] == 'n') ? 6 : 7);
   b4854:	2301      	movs	r3, #1
   b4856:	e7e3      	b.n	b4820 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = 2;
   b4858:	2302      	movs	r3, #2
   b485a:	e7e1      	b.n	b4820 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = buff[2] == 'r' ? 4 : 8;
   b485c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b4860:	2b72      	cmp	r3, #114	; 0x72
   b4862:	bf0c      	ite	eq
   b4864:	2304      	moveq	r3, #4
   b4866:	2308      	movne	r3, #8
   b4868:	e7da      	b.n	b4820 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = buff[2] == 'r' ? 3 : 5;
   b486a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b486e:	2b72      	cmp	r3, #114	; 0x72
   b4870:	bf0c      	ite	eq
   b4872:	2303      	moveq	r3, #3
   b4874:	2305      	movne	r3, #5
   b4876:	e7d3      	b.n	b4820 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = 9;
   b4878:	2309      	movs	r3, #9
   b487a:	e7d1      	b.n	b4820 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = 10;
   b487c:	230a      	movs	r3, #10
   b487e:	e7cf      	b.n	b4820 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = 11;
   b4880:	230b      	movs	r3, #11
   b4882:	e7cd      	b.n	b4820 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = 12;
   b4884:	230c      	movs	r3, #12
   b4886:	e7cb      	b.n	b4820 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>

000b4888 <_ZN8DateTimeC1EPKc>:
           A dateTime string in iso8601 format,
           e.g. "2020-06-25T15:29:37".

*/
/**************************************************************************/
DateTime::DateTime(const char *iso8601dateTime) {
   b4888:	b5f0      	push	{r4, r5, r6, r7, lr}
  char ref[] = "2000-01-01T00:00:00";
   b488a:	4b20      	ldr	r3, [pc, #128]	; (b490c <_ZN8DateTimeC1EPKc+0x84>)
DateTime::DateTime(const char *iso8601dateTime) {
   b488c:	b087      	sub	sp, #28
  char ref[] = "2000-01-01T00:00:00";
   b488e:	aa01      	add	r2, sp, #4
DateTime::DateTime(const char *iso8601dateTime) {
   b4890:	4604      	mov	r4, r0
   b4892:	460d      	mov	r5, r1
  char ref[] = "2000-01-01T00:00:00";
   b4894:	f103 0c10 	add.w	ip, r3, #16
   b4898:	4617      	mov	r7, r2
   b489a:	6818      	ldr	r0, [r3, #0]
   b489c:	6859      	ldr	r1, [r3, #4]
   b489e:	4616      	mov	r6, r2
   b48a0:	c603      	stmia	r6!, {r0, r1}
   b48a2:	3308      	adds	r3, #8
   b48a4:	4563      	cmp	r3, ip
   b48a6:	4632      	mov	r2, r6
   b48a8:	d1f7      	bne.n	b489a <_ZN8DateTimeC1EPKc+0x12>
   b48aa:	6818      	ldr	r0, [r3, #0]
   b48ac:	6030      	str	r0, [r6, #0]
  memcpy(ref, iso8601dateTime, min(strlen(ref), strlen(iso8601dateTime)));
   b48ae:	4638      	mov	r0, r7
   b48b0:	f002 fb29 	bl	b6f06 <strlen>
   b48b4:	4606      	mov	r6, r0
   b48b6:	4628      	mov	r0, r5
   b48b8:	f002 fb25 	bl	b6f06 <strlen>
   b48bc:	4286      	cmp	r6, r0
   b48be:	4632      	mov	r2, r6
   b48c0:	4629      	mov	r1, r5
   b48c2:	bf28      	it	cs
   b48c4:	4602      	movcs	r2, r0
   b48c6:	4638      	mov	r0, r7
   b48c8:	f002 fab3 	bl	b6e32 <memcpy>
  yOff = conv2d(ref + 2);
   b48cc:	f10d 0006 	add.w	r0, sp, #6
   b48d0:	f7ff ff36 	bl	b4740 <_ZL6conv2dPKc>
   b48d4:	7020      	strb	r0, [r4, #0]
  m = conv2d(ref + 5);
   b48d6:	f10d 0009 	add.w	r0, sp, #9
   b48da:	f7ff ff31 	bl	b4740 <_ZL6conv2dPKc>
   b48de:	7060      	strb	r0, [r4, #1]
  d = conv2d(ref + 8);
   b48e0:	a803      	add	r0, sp, #12
   b48e2:	f7ff ff2d 	bl	b4740 <_ZL6conv2dPKc>
   b48e6:	70a0      	strb	r0, [r4, #2]
  hh = conv2d(ref + 11);
   b48e8:	f10d 000f 	add.w	r0, sp, #15
   b48ec:	f7ff ff28 	bl	b4740 <_ZL6conv2dPKc>
   b48f0:	70e0      	strb	r0, [r4, #3]
  mm = conv2d(ref + 14);
   b48f2:	f10d 0012 	add.w	r0, sp, #18
   b48f6:	f7ff ff23 	bl	b4740 <_ZL6conv2dPKc>
   b48fa:	7120      	strb	r0, [r4, #4]
  ss = conv2d(ref + 17);
   b48fc:	f10d 0015 	add.w	r0, sp, #21
   b4900:	f7ff ff1e 	bl	b4740 <_ZL6conv2dPKc>
   b4904:	7160      	strb	r0, [r4, #5]
}
   b4906:	4620      	mov	r0, r4
   b4908:	b007      	add	sp, #28
   b490a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b490c:	000b8e1a 	.word	0x000b8e1a

000b4910 <_ZNK8DateTime12dayOfTheWeekEv>:
/*!
    @brief  Return the day of the week.
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
   b4910:	b508      	push	{r3, lr}
  uint16_t day = date2days(yOff, m, d);
   b4912:	7882      	ldrb	r2, [r0, #2]
   b4914:	7841      	ldrb	r1, [r0, #1]
   b4916:	7800      	ldrb	r0, [r0, #0]
   b4918:	f7ff fef0 	bl	b46fc <_ZL9date2daysthh>
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
   b491c:	2307      	movs	r3, #7
   b491e:	3006      	adds	r0, #6
   b4920:	fbb0 f3f3 	udiv	r3, r0, r3
   b4924:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   b4928:	1ac0      	subs	r0, r0, r3
}
   b492a:	b2c0      	uxtb	r0, r0
   b492c:	bd08      	pop	{r3, pc}

000b492e <_ZN10RTC_DS32315beginEP7TwoWire>:
    @param  wireInstance pointer to the I2C bus
    @return True if Wire can find DS3231 or false otherwise.
*/
/**************************************************************************/

boolean RTC_DS3231::begin(TwoWire *wireInstance) {
   b492e:	b510      	push	{r4, lr}
   b4930:	4604      	mov	r4, r0
   b4932:	4608      	mov	r0, r1
  RTCWireBus = wireInstance;
   b4934:	6021      	str	r1, [r4, #0]
  RTCWireBus->begin();
   b4936:	f001 fb55 	bl	b5fe4 <_ZN7TwoWire5beginEv>
  RTCWireBus->beginTransmission(DS3231_ADDRESS);
   b493a:	6820      	ldr	r0, [r4, #0]
   b493c:	2168      	movs	r1, #104	; 0x68
   b493e:	f001 fb87 	bl	b6050 <_ZN7TwoWire17beginTransmissionEi>
  if (RTCWireBus->endTransmission() == 0)
   b4942:	6820      	ldr	r0, [r4, #0]
   b4944:	f001 fb8b 	bl	b605e <_ZN7TwoWire15endTransmissionEv>
    return true;
  return false;
}
   b4948:	fab0 f080 	clz	r0, r0
   b494c:	0940      	lsrs	r0, r0, #5
   b494e:	bd10      	pop	{r4, pc}

000b4950 <_ZN10RTC_DS32319lostPowerEv>:
   stopped due to power loss
    @return True if the bit is set (oscillator stopped) or false if it is
   running
*/
/**************************************************************************/
bool RTC_DS3231::lostPower(void) {
   b4950:	b508      	push	{r3, lr}
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, RTCWireBus) >> 7);
   b4952:	210f      	movs	r1, #15
   b4954:	6802      	ldr	r2, [r0, #0]
   b4956:	2068      	movs	r0, #104	; 0x68
   b4958:	f7ff ff00 	bl	b475c <_ZL17read_i2c_registerhhP7TwoWire>
}
   b495c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   b4960:	bd08      	pop	{r3, pc}

000b4962 <_ZN10RTC_DS32316adjustERK8DateTime>:
/*!
    @brief  Set the date and flip the Oscillator Stop Flag
    @param dt DateTime object containing the date/time to set
*/
/**************************************************************************/
void RTC_DS3231::adjust(const DateTime &dt) {
   b4962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4966:	4604      	mov	r4, r0
   b4968:	460e      	mov	r6, r1
  RTCWireBus->beginTransmission(DS3231_ADDRESS);
   b496a:	6800      	ldr	r0, [r0, #0]
   b496c:	2168      	movs	r1, #104	; 0x68
   b496e:	f001 fb6f 	bl	b6050 <_ZN7TwoWire17beginTransmissionEi>
  RTCWireBus->_I2C_WRITE((byte)DS3231_TIME); // start at location 0
   b4972:	6820      	ldr	r0, [r4, #0]
   b4974:	6803      	ldr	r3, [r0, #0]
   b4976:	2100      	movs	r1, #0
   b4978:	689b      	ldr	r3, [r3, #8]
   b497a:	4798      	blx	r3
  uint8_t minute() const { return mm; }
  /*!
      @brief  Return the second.
      @return Second (0--59).
  */
  uint8_t second() const { return ss; }
   b497c:	7971      	ldrb	r1, [r6, #5]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.second()));
   b497e:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4980:	250a      	movs	r5, #10
   b4982:	fbb1 f3f5 	udiv	r3, r1, r5
   b4986:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b498a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.second()));
   b498e:	6803      	ldr	r3, [r0, #0]
   b4990:	b2c9      	uxtb	r1, r1
   b4992:	689b      	ldr	r3, [r3, #8]
   b4994:	4798      	blx	r3
  uint8_t minute() const { return mm; }
   b4996:	7931      	ldrb	r1, [r6, #4]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.minute()));
   b4998:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b499a:	fbb1 f3f5 	udiv	r3, r1, r5
   b499e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b49a2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.minute()));
   b49a6:	6803      	ldr	r3, [r0, #0]
   b49a8:	b2c9      	uxtb	r1, r1
   b49aa:	689b      	ldr	r3, [r3, #8]
   b49ac:	4798      	blx	r3
  uint8_t hour() const { return hh; }
   b49ae:	78f1      	ldrb	r1, [r6, #3]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.hour()));
   b49b0:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b49b2:	fbb1 f3f5 	udiv	r3, r1, r5
   b49b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b49ba:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.hour()));
   b49be:	6803      	ldr	r3, [r0, #0]
   b49c0:	b2c9      	uxtb	r1, r1
   b49c2:	689b      	ldr	r3, [r3, #8]
   b49c4:	4798      	blx	r3
  // The RTC must know the day of the week for the weekly alarms to work.
  RTCWireBus->_I2C_WRITE(bin2bcd(dowToDS3231(dt.dayOfTheWeek())));
   b49c6:	6827      	ldr	r7, [r4, #0]
   b49c8:	683b      	ldr	r3, [r7, #0]
   b49ca:	4630      	mov	r0, r6
   b49cc:	f8d3 8008 	ldr.w	r8, [r3, #8]
   b49d0:	f7ff ff9e 	bl	b4910 <_ZNK8DateTime12dayOfTheWeekEv>
static uint8_t dowToDS3231(uint8_t d) { return d == 0 ? 7 : d; }
   b49d4:	2800      	cmp	r0, #0
   b49d6:	bf08      	it	eq
   b49d8:	2007      	moveq	r0, #7
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b49da:	fbb0 f1f5 	udiv	r1, r0, r5
   b49de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b49e2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dowToDS3231(dt.dayOfTheWeek())));
   b49e6:	b2c9      	uxtb	r1, r1
   b49e8:	4638      	mov	r0, r7
   b49ea:	47c0      	blx	r8
  uint8_t day() const { return d; }
   b49ec:	78b1      	ldrb	r1, [r6, #2]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.day()));
   b49ee:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b49f0:	fbb1 f3f5 	udiv	r3, r1, r5
   b49f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b49f8:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.day()));
   b49fc:	6803      	ldr	r3, [r0, #0]
   b49fe:	b2c9      	uxtb	r1, r1
   b4a00:	689b      	ldr	r3, [r3, #8]
   b4a02:	4798      	blx	r3
  uint8_t month() const { return m; }
   b4a04:	7871      	ldrb	r1, [r6, #1]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.month()));
   b4a06:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4a08:	fbb1 f3f5 	udiv	r3, r1, r5
   b4a0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4a10:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.month()));
   b4a14:	6803      	ldr	r3, [r0, #0]
   b4a16:	b2c9      	uxtb	r1, r1
   b4a18:	689b      	ldr	r3, [r3, #8]
   b4a1a:	4798      	blx	r3
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.year() - 2000U));
   b4a1c:	6820      	ldr	r0, [r4, #0]
  uint16_t year() const { return 2000U + yOff; }
   b4a1e:	7831      	ldrb	r1, [r6, #0]
   b4a20:	6803      	ldr	r3, [r0, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4a22:	fbb1 f5f5 	udiv	r5, r1, r5
   b4a26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b4a2a:	eb01 0145 	add.w	r1, r1, r5, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.year() - 2000U));
   b4a2e:	689b      	ldr	r3, [r3, #8]
   b4a30:	b2c9      	uxtb	r1, r1
   b4a32:	4798      	blx	r3
  RTCWireBus->endTransmission();
   b4a34:	6820      	ldr	r0, [r4, #0]
   b4a36:	f001 fb12 	bl	b605e <_ZN7TwoWire15endTransmissionEv>

  uint8_t statreg =
      read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, RTCWireBus);
   b4a3a:	6822      	ldr	r2, [r4, #0]
   b4a3c:	210f      	movs	r1, #15
   b4a3e:	2068      	movs	r0, #104	; 0x68
   b4a40:	f7ff fe8c 	bl	b475c <_ZL17read_i2c_registerhhP7TwoWire>
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg, RTCWireBus);
   b4a44:	6823      	ldr	r3, [r4, #0]
   b4a46:	f000 027f 	and.w	r2, r0, #127	; 0x7f
}
   b4a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg, RTCWireBus);
   b4a4e:	210f      	movs	r1, #15
   b4a50:	2068      	movs	r0, #104	; 0x68
   b4a52:	f7ff be9e 	b.w	b4792 <_ZL18write_i2c_registerhhhP7TwoWire>

000b4a56 <_ZN10RTC_DS323115writeSqwPinModeE16Ds3231SqwPinMode>:
/*!
    @brief  Set the SQW pin mode
    @param mode Desired mode, see Ds3231SqwPinMode enum
*/
/**************************************************************************/
void RTC_DS3231::writeSqwPinMode(Ds3231SqwPinMode mode) {
   b4a56:	b570      	push	{r4, r5, r6, lr}
   b4a58:	4604      	mov	r4, r0
  uint8_t ctrl;
  ctrl = read_i2c_register(DS3231_ADDRESS, DS3231_CONTROL, RTCWireBus);
   b4a5a:	6802      	ldr	r2, [r0, #0]
void RTC_DS3231::writeSqwPinMode(Ds3231SqwPinMode mode) {
   b4a5c:	460d      	mov	r5, r1
  ctrl = read_i2c_register(DS3231_ADDRESS, DS3231_CONTROL, RTCWireBus);
   b4a5e:	2068      	movs	r0, #104	; 0x68
   b4a60:	210e      	movs	r1, #14
   b4a62:	f7ff fe7b 	bl	b475c <_ZL17read_i2c_registerhhP7TwoWire>

  ctrl &= ~0x04; // turn off INTCON
  ctrl &= ~0x18; // set freq bits to 0
   b4a66:	f000 00e3 	and.w	r0, r0, #227	; 0xe3

  ctrl |= mode;
  write_i2c_register(DS3231_ADDRESS, DS3231_CONTROL, ctrl, RTCWireBus);
   b4a6a:	ea40 0205 	orr.w	r2, r0, r5
   b4a6e:	6823      	ldr	r3, [r4, #0]
   b4a70:	210e      	movs	r1, #14

  // Serial.println( read_i2c_register(DS3231_ADDRESS, DS3231_CONTROL,
  // RTCWireBus), HEX);
}
   b4a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  write_i2c_register(DS3231_ADDRESS, DS3231_CONTROL, ctrl, RTCWireBus);
   b4a76:	2068      	movs	r0, #104	; 0x68
   b4a78:	f7ff be8b 	b.w	b4792 <_ZL18write_i2c_registerhhhP7TwoWire>

000b4a7c <_ZN10RTC_DS32319setAlarm1ERK8DateTime16Ds3231Alarm1Mode>:
        @param 	dt DateTime object
        @param 	alarm_mode Desired mode, see Ds3231Alarm1Mode enum
    @return False if control register is not set, otherwise true
*/
/**************************************************************************/
bool RTC_DS3231::setAlarm1(const DateTime &dt, Ds3231Alarm1Mode alarm_mode) {
   b4a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4a80:	4605      	mov	r5, r0
   b4a82:	468a      	mov	sl, r1
   b4a84:	4691      	mov	r9, r2
  uint8_t ctrl = read_i2c_register(DS3231_ADDRESS, DS3231_CONTROL, RTCWireBus);
   b4a86:	210e      	movs	r1, #14
   b4a88:	6802      	ldr	r2, [r0, #0]
   b4a8a:	2068      	movs	r0, #104	; 0x68
   b4a8c:	f7ff fe66 	bl	b475c <_ZL17read_i2c_registerhhP7TwoWire>
   b4a90:	4606      	mov	r6, r0
  if (!(ctrl & 0x04)) {
   b4a92:	f010 0004 	ands.w	r0, r0, #4
   b4a96:	d065      	beq.n	b4b64 <_ZN10RTC_DS32319setAlarm1ERK8DateTime16Ds3231Alarm1Mode+0xe8>
  uint8_t A1M3 = (alarm_mode & 0x04) << 5; // Hour bit 7.
  uint8_t A1M4 = (alarm_mode & 0x08) << 4; // Day/Date bit 7.
  uint8_t DY_DT = (alarm_mode & 0x10)
                  << 2; // Day/Date bit 6. Date when 0, day of week when 1.

  RTCWireBus->beginTransmission(DS3231_ADDRESS);
   b4a98:	6828      	ldr	r0, [r5, #0]
   b4a9a:	2168      	movs	r1, #104	; 0x68
   b4a9c:	f001 fad8 	bl	b6050 <_ZN7TwoWire17beginTransmissionEi>
  RTCWireBus->_I2C_WRITE(DS3231_ALARM1);
   b4aa0:	6828      	ldr	r0, [r5, #0]
   b4aa2:	2107      	movs	r1, #7
   b4aa4:	f7ff fe8c 	bl	b47c0 <_ZN7TwoWire5writeEi.isra.0>
  uint8_t second() const { return ss; }
   b4aa8:	f89a 1005 	ldrb.w	r1, [sl, #5]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.second()) | A1M1);
   b4aac:	6828      	ldr	r0, [r5, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4aae:	240a      	movs	r4, #10
   b4ab0:	fbb1 f3f4 	udiv	r3, r1, r4
   b4ab4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4ab8:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.second()) | A1M1);
   b4abc:	ea41 11c9 	orr.w	r1, r1, r9, lsl #7
   b4ac0:	b2c9      	uxtb	r1, r1
   b4ac2:	f7ff fe7d 	bl	b47c0 <_ZN7TwoWire5writeEi.isra.0>
  uint8_t minute() const { return mm; }
   b4ac6:	f89a 1004 	ldrb.w	r1, [sl, #4]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4aca:	fbb1 f3f4 	udiv	r3, r1, r4
   b4ace:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4ad2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  uint8_t A1M2 = (alarm_mode & 0x02) << 6; // Minutes bit 7.
   b4ad6:	ea4f 1389 	mov.w	r3, r9, lsl #6
   b4ada:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.minute()) | A1M2);
   b4ade:	4319      	orrs	r1, r3
   b4ae0:	6828      	ldr	r0, [r5, #0]
   b4ae2:	b2c9      	uxtb	r1, r1
   b4ae4:	f7ff fe6c 	bl	b47c0 <_ZN7TwoWire5writeEi.isra.0>
  uint8_t hour() const { return hh; }
   b4ae8:	f89a 1003 	ldrb.w	r1, [sl, #3]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4aec:	fbb1 f3f4 	udiv	r3, r1, r4
  uint8_t A1M4 = (alarm_mode & 0x08) << 4; // Day/Date bit 7.
   b4af0:	ea4f 1709 	mov.w	r7, r9, lsl #4
                  << 2; // Day/Date bit 6. Date when 0, day of week when 1.
   b4af4:	ea4f 0889 	mov.w	r8, r9, lsl #2
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4af8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  uint8_t A1M3 = (alarm_mode & 0x04) << 5; // Hour bit 7.
   b4afc:	ea4f 1949 	mov.w	r9, r9, lsl #5
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4b00:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  uint8_t A1M3 = (alarm_mode & 0x04) << 5; // Hour bit 7.
   b4b04:	f029 097f 	bic.w	r9, r9, #127	; 0x7f
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.hour()) | A1M3);
   b4b08:	ea41 0109 	orr.w	r1, r1, r9
  uint8_t DY_DT = (alarm_mode & 0x10)
   b4b0c:	f008 0840 	and.w	r8, r8, #64	; 0x40
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.hour()) | A1M3);
   b4b10:	6828      	ldr	r0, [r5, #0]
   b4b12:	b2c9      	uxtb	r1, r1
  uint8_t A1M4 = (alarm_mode & 0x08) << 4; // Day/Date bit 7.
   b4b14:	f007 0780 	and.w	r7, r7, #128	; 0x80
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.hour()) | A1M3);
   b4b18:	f7ff fe52 	bl	b47c0 <_ZN7TwoWire5writeEi.isra.0>
  if (DY_DT) {
   b4b1c:	f1b8 0f00 	cmp.w	r8, #0
   b4b20:	d022      	beq.n	b4b68 <_ZN10RTC_DS32319setAlarm1ERK8DateTime16Ds3231Alarm1Mode+0xec>
    RTCWireBus->_I2C_WRITE(bin2bcd(dowToDS3231(dt.dayOfTheWeek())) | A1M4 |
   b4b22:	4650      	mov	r0, sl
   b4b24:	f7ff fef4 	bl	b4910 <_ZNK8DateTime12dayOfTheWeekEv>
static uint8_t dowToDS3231(uint8_t d) { return d == 0 ? 7 : d; }
   b4b28:	1e01      	subs	r1, r0, #0
   b4b2a:	bf08      	it	eq
   b4b2c:	2107      	moveq	r1, #7
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4b2e:	fbb1 f4f4 	udiv	r4, r1, r4
   b4b32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    RTCWireBus->_I2C_WRITE(bin2bcd(dowToDS3231(dt.dayOfTheWeek())) | A1M4 |
   b4b36:	f8d5 9000 	ldr.w	r9, [r5]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4b3a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    RTCWireBus->_I2C_WRITE(bin2bcd(dowToDS3231(dt.dayOfTheWeek())) | A1M4 |
   b4b3e:	ea47 0708 	orr.w	r7, r7, r8
   b4b42:	4339      	orrs	r1, r7
   b4b44:	b2c9      	uxtb	r1, r1
   b4b46:	4648      	mov	r0, r9
                           DY_DT);
  } else {
    RTCWireBus->_I2C_WRITE(bin2bcd(dt.day()) | A1M4 | DY_DT);
   b4b48:	f7ff fe3a 	bl	b47c0 <_ZN7TwoWire5writeEi.isra.0>
  }
  RTCWireBus->endTransmission();
   b4b4c:	6828      	ldr	r0, [r5, #0]
   b4b4e:	f001 fa86 	bl	b605e <_ZN7TwoWire15endTransmissionEv>

  ctrl |= 0x01; // AI1E
   b4b52:	f046 0201 	orr.w	r2, r6, #1
  write_i2c_register(DS3231_ADDRESS, DS3231_CONTROL, ctrl, RTCWireBus);
   b4b56:	2068      	movs	r0, #104	; 0x68
   b4b58:	682b      	ldr	r3, [r5, #0]
   b4b5a:	b2d2      	uxtb	r2, r2
   b4b5c:	210e      	movs	r1, #14
   b4b5e:	f7ff fe18 	bl	b4792 <_ZL18write_i2c_registerhhhP7TwoWire>
  return true;
   b4b62:	2001      	movs	r0, #1
}
   b4b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t day() const { return d; }
   b4b68:	f89a 1002 	ldrb.w	r1, [sl, #2]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4b6c:	fbb1 f4f4 	udiv	r4, r1, r4
   b4b70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   b4b74:	eb01 0444 	add.w	r4, r1, r4, lsl #1
    RTCWireBus->_I2C_WRITE(bin2bcd(dt.day()) | A1M4 | DY_DT);
   b4b78:	ea47 0104 	orr.w	r1, r7, r4
   b4b7c:	6828      	ldr	r0, [r5, #0]
   b4b7e:	b2c9      	uxtb	r1, r1
   b4b80:	e7e2      	b.n	b4b48 <_ZN10RTC_DS32319setAlarm1ERK8DateTime16Ds3231Alarm1Mode+0xcc>

000b4b82 <_ZN10RTC_DS32319setAlarm2ERK8DateTime16Ds3231Alarm2Mode>:
        @param 	dt DateTime object
        @param 	alarm_mode Desired mode, see Ds3231Alarm2Mode enum
    @return False if control register is not set, otherwise true
*/
/**************************************************************************/
bool RTC_DS3231::setAlarm2(const DateTime &dt, Ds3231Alarm2Mode alarm_mode) {
   b4b82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4b86:	4605      	mov	r5, r0
   b4b88:	468a      	mov	sl, r1
   b4b8a:	4691      	mov	r9, r2
  uint8_t ctrl = read_i2c_register(DS3231_ADDRESS, DS3231_CONTROL, RTCWireBus);
   b4b8c:	210e      	movs	r1, #14
   b4b8e:	6802      	ldr	r2, [r0, #0]
   b4b90:	2068      	movs	r0, #104	; 0x68
   b4b92:	f7ff fde3 	bl	b475c <_ZL17read_i2c_registerhhP7TwoWire>
   b4b96:	4606      	mov	r6, r0
  if (!(ctrl & 0x04)) {
   b4b98:	f010 0004 	ands.w	r0, r0, #4
   b4b9c:	d054      	beq.n	b4c48 <_ZN10RTC_DS32319setAlarm2ERK8DateTime16Ds3231Alarm2Mode+0xc6>
  uint8_t A2M3 = (alarm_mode & 0x02) << 6; // Hour bit 7.
  uint8_t A2M4 = (alarm_mode & 0x04) << 5; // Day/Date bit 7.
  uint8_t DY_DT = (alarm_mode & 0x8)
                  << 3; // Day/Date bit 6. Date when 0, day of week when 1.

  RTCWireBus->beginTransmission(DS3231_ADDRESS);
   b4b9e:	6828      	ldr	r0, [r5, #0]
   b4ba0:	2168      	movs	r1, #104	; 0x68
   b4ba2:	f001 fa55 	bl	b6050 <_ZN7TwoWire17beginTransmissionEi>
  RTCWireBus->_I2C_WRITE(DS3231_ALARM2);
   b4ba6:	6828      	ldr	r0, [r5, #0]
   b4ba8:	210b      	movs	r1, #11
   b4baa:	f7ff fe09 	bl	b47c0 <_ZN7TwoWire5writeEi.isra.0>
  uint8_t minute() const { return mm; }
   b4bae:	f89a 1004 	ldrb.w	r1, [sl, #4]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.minute()) | A2M2);
   b4bb2:	6828      	ldr	r0, [r5, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4bb4:	240a      	movs	r4, #10
   b4bb6:	fbb1 f3f4 	udiv	r3, r1, r4
   b4bba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4bbe:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.minute()) | A2M2);
   b4bc2:	ea41 11c9 	orr.w	r1, r1, r9, lsl #7
   b4bc6:	b2c9      	uxtb	r1, r1
   b4bc8:	f7ff fdfa 	bl	b47c0 <_ZN7TwoWire5writeEi.isra.0>
  uint8_t hour() const { return hh; }
   b4bcc:	f89a 1003 	ldrb.w	r1, [sl, #3]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4bd0:	fbb1 f3f4 	udiv	r3, r1, r4
  uint8_t A2M4 = (alarm_mode & 0x04) << 5; // Day/Date bit 7.
   b4bd4:	ea4f 1749 	mov.w	r7, r9, lsl #5
                  << 3; // Day/Date bit 6. Date when 0, day of week when 1.
   b4bd8:	ea4f 08c9 	mov.w	r8, r9, lsl #3
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4bdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  uint8_t A2M3 = (alarm_mode & 0x02) << 6; // Hour bit 7.
   b4be0:	ea4f 1989 	mov.w	r9, r9, lsl #6
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4be4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  uint8_t A2M3 = (alarm_mode & 0x02) << 6; // Hour bit 7.
   b4be8:	f029 097f 	bic.w	r9, r9, #127	; 0x7f
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.hour()) | A2M3);
   b4bec:	ea41 0109 	orr.w	r1, r1, r9
  uint8_t DY_DT = (alarm_mode & 0x8)
   b4bf0:	f008 0840 	and.w	r8, r8, #64	; 0x40
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.hour()) | A2M3);
   b4bf4:	6828      	ldr	r0, [r5, #0]
   b4bf6:	b2c9      	uxtb	r1, r1
  uint8_t A2M4 = (alarm_mode & 0x04) << 5; // Day/Date bit 7.
   b4bf8:	f007 0780 	and.w	r7, r7, #128	; 0x80
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.hour()) | A2M3);
   b4bfc:	f7ff fde0 	bl	b47c0 <_ZN7TwoWire5writeEi.isra.0>
  if (DY_DT) {
   b4c00:	f1b8 0f00 	cmp.w	r8, #0
   b4c04:	d022      	beq.n	b4c4c <_ZN10RTC_DS32319setAlarm2ERK8DateTime16Ds3231Alarm2Mode+0xca>
    RTCWireBus->_I2C_WRITE(bin2bcd(dowToDS3231(dt.dayOfTheWeek())) | A2M4 |
   b4c06:	4650      	mov	r0, sl
   b4c08:	f7ff fe82 	bl	b4910 <_ZNK8DateTime12dayOfTheWeekEv>
static uint8_t dowToDS3231(uint8_t d) { return d == 0 ? 7 : d; }
   b4c0c:	1e01      	subs	r1, r0, #0
   b4c0e:	bf08      	it	eq
   b4c10:	2107      	moveq	r1, #7
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4c12:	fbb1 f4f4 	udiv	r4, r1, r4
   b4c16:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    RTCWireBus->_I2C_WRITE(bin2bcd(dowToDS3231(dt.dayOfTheWeek())) | A2M4 |
   b4c1a:	f8d5 9000 	ldr.w	r9, [r5]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4c1e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    RTCWireBus->_I2C_WRITE(bin2bcd(dowToDS3231(dt.dayOfTheWeek())) | A2M4 |
   b4c22:	ea47 0708 	orr.w	r7, r7, r8
   b4c26:	4339      	orrs	r1, r7
   b4c28:	b2c9      	uxtb	r1, r1
   b4c2a:	4648      	mov	r0, r9
                           DY_DT);
  } else {
    RTCWireBus->_I2C_WRITE(bin2bcd(dt.day()) | A2M4 | DY_DT);
   b4c2c:	f7ff fdc8 	bl	b47c0 <_ZN7TwoWire5writeEi.isra.0>
  }
  RTCWireBus->endTransmission();
   b4c30:	6828      	ldr	r0, [r5, #0]
   b4c32:	f001 fa14 	bl	b605e <_ZN7TwoWire15endTransmissionEv>

  ctrl |= 0x02; // AI2E
   b4c36:	f046 0202 	orr.w	r2, r6, #2
  write_i2c_register(DS3231_ADDRESS, DS3231_CONTROL, ctrl, RTCWireBus);
   b4c3a:	2068      	movs	r0, #104	; 0x68
   b4c3c:	682b      	ldr	r3, [r5, #0]
   b4c3e:	b2d2      	uxtb	r2, r2
   b4c40:	210e      	movs	r1, #14
   b4c42:	f7ff fda6 	bl	b4792 <_ZL18write_i2c_registerhhhP7TwoWire>
  return true;
   b4c46:	2001      	movs	r0, #1
}
   b4c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t day() const { return d; }
   b4c4c:	f89a 1002 	ldrb.w	r1, [sl, #2]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   b4c50:	fbb1 f4f4 	udiv	r4, r1, r4
   b4c54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   b4c58:	eb01 0444 	add.w	r4, r1, r4, lsl #1
    RTCWireBus->_I2C_WRITE(bin2bcd(dt.day()) | A2M4 | DY_DT);
   b4c5c:	ea47 0104 	orr.w	r1, r7, r4
   b4c60:	6828      	ldr	r0, [r5, #0]
   b4c62:	b2c9      	uxtb	r1, r1
   b4c64:	e7e2      	b.n	b4c2c <_ZN10RTC_DS32319setAlarm2ERK8DateTime16Ds3231Alarm2Mode+0xaa>

000b4c66 <_ZN10RTC_DS323112disableAlarmEh>:
/*!
    @brief  Disable alarm
        @param 	alarm_num Alarm number to disable
*/
/**************************************************************************/
void RTC_DS3231::disableAlarm(uint8_t alarm_num) {
   b4c66:	b570      	push	{r4, r5, r6, lr}
   b4c68:	4605      	mov	r5, r0
  uint8_t ctrl = read_i2c_register(DS3231_ADDRESS, DS3231_CONTROL, RTCWireBus);
   b4c6a:	6802      	ldr	r2, [r0, #0]
void RTC_DS3231::disableAlarm(uint8_t alarm_num) {
   b4c6c:	460c      	mov	r4, r1
  uint8_t ctrl = read_i2c_register(DS3231_ADDRESS, DS3231_CONTROL, RTCWireBus);
   b4c6e:	2068      	movs	r0, #104	; 0x68
   b4c70:	210e      	movs	r1, #14
   b4c72:	f7ff fd73 	bl	b475c <_ZL17read_i2c_registerhhP7TwoWire>
  ctrl &= ~(1 << (alarm_num - 1));
   b4c76:	3c01      	subs	r4, #1
   b4c78:	2201      	movs	r2, #1
   b4c7a:	fa02 f404 	lsl.w	r4, r2, r4
   b4c7e:	ea20 0004 	bic.w	r0, r0, r4
  write_i2c_register(DS3231_ADDRESS, DS3231_CONTROL, ctrl, RTCWireBus);
   b4c82:	682b      	ldr	r3, [r5, #0]
   b4c84:	b2c2      	uxtb	r2, r0
}
   b4c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  write_i2c_register(DS3231_ADDRESS, DS3231_CONTROL, ctrl, RTCWireBus);
   b4c8a:	210e      	movs	r1, #14
   b4c8c:	2068      	movs	r0, #104	; 0x68
   b4c8e:	f7ff bd80 	b.w	b4792 <_ZL18write_i2c_registerhhhP7TwoWire>

000b4c92 <_ZN10RTC_DS323110clearAlarmEh>:
/*!
    @brief  Clear status of alarm
        @param 	alarm_num Alarm number to clear
*/
/**************************************************************************/
void RTC_DS3231::clearAlarm(uint8_t alarm_num) {
   b4c92:	b570      	push	{r4, r5, r6, lr}
   b4c94:	4605      	mov	r5, r0
  uint8_t status =
      read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, RTCWireBus);
   b4c96:	6802      	ldr	r2, [r0, #0]
void RTC_DS3231::clearAlarm(uint8_t alarm_num) {
   b4c98:	460c      	mov	r4, r1
      read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, RTCWireBus);
   b4c9a:	2068      	movs	r0, #104	; 0x68
   b4c9c:	210f      	movs	r1, #15
   b4c9e:	f7ff fd5d 	bl	b475c <_ZL17read_i2c_registerhhP7TwoWire>
  status &= ~(0x1 << (alarm_num - 1));
   b4ca2:	3c01      	subs	r4, #1
   b4ca4:	2201      	movs	r2, #1
   b4ca6:	fa02 f404 	lsl.w	r4, r2, r4
   b4caa:	ea20 0004 	bic.w	r0, r0, r4
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, status, RTCWireBus);
   b4cae:	682b      	ldr	r3, [r5, #0]
   b4cb0:	b2c2      	uxtb	r2, r0
}
   b4cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, status, RTCWireBus);
   b4cb6:	210f      	movs	r1, #15
   b4cb8:	2068      	movs	r0, #104	; 0x68
   b4cba:	f7ff bd6a 	b.w	b4792 <_ZL18write_i2c_registerhhhP7TwoWire>

000b4cbe <_ZN10RTC_DS323110alarmFiredEh>:
    @brief  Get status of alarm
        @param 	alarm_num Alarm number to check status of
        @return True if alarm has been fired otherwise false
*/
/**************************************************************************/
bool RTC_DS3231::alarmFired(uint8_t alarm_num) {
   b4cbe:	b510      	push	{r4, lr}
   b4cc0:	460c      	mov	r4, r1
  uint8_t status =
      read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, RTCWireBus);
   b4cc2:	6802      	ldr	r2, [r0, #0]
   b4cc4:	210f      	movs	r1, #15
   b4cc6:	2068      	movs	r0, #104	; 0x68
   b4cc8:	f7ff fd48 	bl	b475c <_ZL17read_i2c_registerhhP7TwoWire>
  return (status >> (alarm_num - 1)) & 0x1;
   b4ccc:	3c01      	subs	r4, #1
   b4cce:	4120      	asrs	r0, r4
}
   b4cd0:	f000 0001 	and.w	r0, r0, #1
   b4cd4:	bd10      	pop	{r4, pc}

000b4cd6 <_ZN10RTC_DS323110disable32KEv>:
/**************************************************************************/
/*!
    @brief  Disable 32KHz Output
*/
/**************************************************************************/
void RTC_DS3231::disable32K(void) {
   b4cd6:	b510      	push	{r4, lr}
  uint8_t status =
      read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, RTCWireBus);
   b4cd8:	210f      	movs	r1, #15
   b4cda:	6802      	ldr	r2, [r0, #0]
void RTC_DS3231::disable32K(void) {
   b4cdc:	4604      	mov	r4, r0
      read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, RTCWireBus);
   b4cde:	2068      	movs	r0, #104	; 0x68
   b4ce0:	f7ff fd3c 	bl	b475c <_ZL17read_i2c_registerhhP7TwoWire>
  status &= ~(0x1 << 0x03);
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, status, RTCWireBus);
   b4ce4:	6823      	ldr	r3, [r4, #0]
   b4ce6:	f000 02f7 	and.w	r2, r0, #247	; 0xf7
  // Serial.println(read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG,
  // RTCWireBus), BIN);
}
   b4cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, status, RTCWireBus);
   b4cee:	210f      	movs	r1, #15
   b4cf0:	2068      	movs	r0, #104	; 0x68
   b4cf2:	f7ff bd4e 	b.w	b4792 <_ZL18write_i2c_registerhhhP7TwoWire>
	...

000b4cf8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4cf8:	b508      	push	{r3, lr}
   b4cfa:	4b02      	ldr	r3, [pc, #8]	; (b4d04 <netdb_freeaddrinfo+0xc>)
   b4cfc:	681b      	ldr	r3, [r3, #0]
   b4cfe:	689b      	ldr	r3, [r3, #8]
   b4d00:	9301      	str	r3, [sp, #4]
   b4d02:	bd08      	pop	{r3, pc}
   b4d04:	00030268 	.word	0x00030268

000b4d08 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4d08:	b508      	push	{r3, lr}
   b4d0a:	4b02      	ldr	r3, [pc, #8]	; (b4d14 <netdb_getaddrinfo+0xc>)
   b4d0c:	681b      	ldr	r3, [r3, #0]
   b4d0e:	68db      	ldr	r3, [r3, #12]
   b4d10:	9301      	str	r3, [sp, #4]
   b4d12:	bd08      	pop	{r3, pc}
   b4d14:	00030268 	.word	0x00030268

000b4d18 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4d18:	b508      	push	{r3, lr}
   b4d1a:	4b02      	ldr	r3, [pc, #8]	; (b4d24 <HAL_Validate_Pin_Function+0xc>)
   b4d1c:	681b      	ldr	r3, [r3, #0]
   b4d1e:	685b      	ldr	r3, [r3, #4]
   b4d20:	9301      	str	r3, [sp, #4]
   b4d22:	bd08      	pop	{r3, pc}
   b4d24:	0003022c 	.word	0x0003022c

000b4d28 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4d28:	b508      	push	{r3, lr}
   b4d2a:	4b02      	ldr	r3, [pc, #8]	; (b4d34 <HAL_Pin_Mode+0xc>)
   b4d2c:	681b      	ldr	r3, [r3, #0]
   b4d2e:	689b      	ldr	r3, [r3, #8]
   b4d30:	9301      	str	r3, [sp, #4]
   b4d32:	bd08      	pop	{r3, pc}
   b4d34:	0003022c 	.word	0x0003022c

000b4d38 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4d38:	b508      	push	{r3, lr}
   b4d3a:	4b02      	ldr	r3, [pc, #8]	; (b4d44 <HAL_Get_Pin_Mode+0xc>)
   b4d3c:	681b      	ldr	r3, [r3, #0]
   b4d3e:	68db      	ldr	r3, [r3, #12]
   b4d40:	9301      	str	r3, [sp, #4]
   b4d42:	bd08      	pop	{r3, pc}
   b4d44:	0003022c 	.word	0x0003022c

000b4d48 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4d48:	b508      	push	{r3, lr}
   b4d4a:	4b02      	ldr	r3, [pc, #8]	; (b4d54 <HAL_GPIO_Write+0xc>)
   b4d4c:	681b      	ldr	r3, [r3, #0]
   b4d4e:	691b      	ldr	r3, [r3, #16]
   b4d50:	9301      	str	r3, [sp, #4]
   b4d52:	bd08      	pop	{r3, pc}
   b4d54:	0003022c 	.word	0x0003022c

000b4d58 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4d58:	b508      	push	{r3, lr}
   b4d5a:	4b02      	ldr	r3, [pc, #8]	; (b4d64 <hal_adc_read+0xc>)
   b4d5c:	681b      	ldr	r3, [r3, #0]
   b4d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d60:	9301      	str	r3, [sp, #4]
   b4d62:	bd08      	pop	{r3, pc}
   b4d64:	0003022c 	.word	0x0003022c

000b4d68 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4d68:	b508      	push	{r3, lr}
   b4d6a:	4b02      	ldr	r3, [pc, #8]	; (b4d74 <HAL_RNG_GetRandomNumber+0xc>)
   b4d6c:	681b      	ldr	r3, [r3, #0]
   b4d6e:	685b      	ldr	r3, [r3, #4]
   b4d70:	9301      	str	r3, [sp, #4]
   b4d72:	bd08      	pop	{r3, pc}
   b4d74:	00030218 	.word	0x00030218

000b4d78 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4d78:	b508      	push	{r3, lr}
   b4d7a:	4b02      	ldr	r3, [pc, #8]	; (b4d84 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4d7c:	681b      	ldr	r3, [r3, #0]
   b4d7e:	695b      	ldr	r3, [r3, #20]
   b4d80:	9301      	str	r3, [sp, #4]
   b4d82:	bd08      	pop	{r3, pc}
   b4d84:	00030218 	.word	0x00030218

000b4d88 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b4d88:	b508      	push	{r3, lr}
   b4d8a:	4b02      	ldr	r3, [pc, #8]	; (b4d94 <os_thread_yield+0xc>)
   b4d8c:	681b      	ldr	r3, [r3, #0]
   b4d8e:	68db      	ldr	r3, [r3, #12]
   b4d90:	9301      	str	r3, [sp, #4]
   b4d92:	bd08      	pop	{r3, pc}
   b4d94:	00030248 	.word	0x00030248

000b4d98 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b4d98:	b508      	push	{r3, lr}
   b4d9a:	4b02      	ldr	r3, [pc, #8]	; (b4da4 <os_thread_scheduling+0xc>)
   b4d9c:	681b      	ldr	r3, [r3, #0]
   b4d9e:	69db      	ldr	r3, [r3, #28]
   b4da0:	9301      	str	r3, [sp, #4]
   b4da2:	bd08      	pop	{r3, pc}
   b4da4:	00030248 	.word	0x00030248

000b4da8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b4da8:	b508      	push	{r3, lr}
   b4daa:	4b02      	ldr	r3, [pc, #8]	; (b4db4 <os_timer_create+0xc>)
   b4dac:	681b      	ldr	r3, [r3, #0]
   b4dae:	6a1b      	ldr	r3, [r3, #32]
   b4db0:	9301      	str	r3, [sp, #4]
   b4db2:	bd08      	pop	{r3, pc}
   b4db4:	00030248 	.word	0x00030248

000b4db8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b4db8:	b508      	push	{r3, lr}
   b4dba:	4b02      	ldr	r3, [pc, #8]	; (b4dc4 <os_timer_destroy+0xc>)
   b4dbc:	681b      	ldr	r3, [r3, #0]
   b4dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4dc0:	9301      	str	r3, [sp, #4]
   b4dc2:	bd08      	pop	{r3, pc}
   b4dc4:	00030248 	.word	0x00030248

000b4dc8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b4dc8:	b508      	push	{r3, lr}
   b4dca:	4b02      	ldr	r3, [pc, #8]	; (b4dd4 <os_timer_get_id+0xc>)
   b4dcc:	681b      	ldr	r3, [r3, #0]
   b4dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4dd0:	9301      	str	r3, [sp, #4]
   b4dd2:	bd08      	pop	{r3, pc}
   b4dd4:	00030248 	.word	0x00030248

000b4dd8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b4dd8:	b508      	push	{r3, lr}
   b4dda:	4b02      	ldr	r3, [pc, #8]	; (b4de4 <os_timer_change+0xc>)
   b4ddc:	681b      	ldr	r3, [r3, #0]
   b4dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4de0:	9301      	str	r3, [sp, #4]
   b4de2:	bd08      	pop	{r3, pc}
   b4de4:	00030248 	.word	0x00030248

000b4de8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4de8:	b508      	push	{r3, lr}
   b4dea:	4b02      	ldr	r3, [pc, #8]	; (b4df4 <os_mutex_recursive_create+0xc>)
   b4dec:	681b      	ldr	r3, [r3, #0]
   b4dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4df0:	9301      	str	r3, [sp, #4]
   b4df2:	bd08      	pop	{r3, pc}
   b4df4:	00030248 	.word	0x00030248

000b4df8 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b4df8:	b508      	push	{r3, lr}
   b4dfa:	4b02      	ldr	r3, [pc, #8]	; (b4e04 <os_timer_set_id+0xc>)
   b4dfc:	681b      	ldr	r3, [r3, #0]
   b4dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4e00:	9301      	str	r3, [sp, #4]
   b4e02:	bd08      	pop	{r3, pc}
   b4e04:	00030248 	.word	0x00030248

000b4e08 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4e08:	b508      	push	{r3, lr}
   b4e0a:	4b02      	ldr	r3, [pc, #8]	; (b4e14 <inet_inet_ntop+0xc>)
   b4e0c:	681b      	ldr	r3, [r3, #0]
   b4e0e:	695b      	ldr	r3, [r3, #20]
   b4e10:	9301      	str	r3, [sp, #4]
   b4e12:	bd08      	pop	{r3, pc}
   b4e14:	00030264 	.word	0x00030264

000b4e18 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4e18:	b508      	push	{r3, lr}
   b4e1a:	4b02      	ldr	r3, [pc, #8]	; (b4e24 <hal_usart_write+0xc>)
   b4e1c:	681b      	ldr	r3, [r3, #0]
   b4e1e:	68db      	ldr	r3, [r3, #12]
   b4e20:	9301      	str	r3, [sp, #4]
   b4e22:	bd08      	pop	{r3, pc}
   b4e24:	0003023c 	.word	0x0003023c

000b4e28 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4e28:	b508      	push	{r3, lr}
   b4e2a:	4b02      	ldr	r3, [pc, #8]	; (b4e34 <hal_usart_available+0xc>)
   b4e2c:	681b      	ldr	r3, [r3, #0]
   b4e2e:	691b      	ldr	r3, [r3, #16]
   b4e30:	9301      	str	r3, [sp, #4]
   b4e32:	bd08      	pop	{r3, pc}
   b4e34:	0003023c 	.word	0x0003023c

000b4e38 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4e38:	b508      	push	{r3, lr}
   b4e3a:	4b02      	ldr	r3, [pc, #8]	; (b4e44 <hal_usart_read+0xc>)
   b4e3c:	681b      	ldr	r3, [r3, #0]
   b4e3e:	695b      	ldr	r3, [r3, #20]
   b4e40:	9301      	str	r3, [sp, #4]
   b4e42:	bd08      	pop	{r3, pc}
   b4e44:	0003023c 	.word	0x0003023c

000b4e48 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4e48:	b508      	push	{r3, lr}
   b4e4a:	4b02      	ldr	r3, [pc, #8]	; (b4e54 <hal_usart_peek+0xc>)
   b4e4c:	681b      	ldr	r3, [r3, #0]
   b4e4e:	699b      	ldr	r3, [r3, #24]
   b4e50:	9301      	str	r3, [sp, #4]
   b4e52:	bd08      	pop	{r3, pc}
   b4e54:	0003023c 	.word	0x0003023c

000b4e58 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4e58:	b508      	push	{r3, lr}
   b4e5a:	4b02      	ldr	r3, [pc, #8]	; (b4e64 <hal_usart_flush+0xc>)
   b4e5c:	681b      	ldr	r3, [r3, #0]
   b4e5e:	69db      	ldr	r3, [r3, #28]
   b4e60:	9301      	str	r3, [sp, #4]
   b4e62:	bd08      	pop	{r3, pc}
   b4e64:	0003023c 	.word	0x0003023c

000b4e68 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4e68:	b508      	push	{r3, lr}
   b4e6a:	4b02      	ldr	r3, [pc, #8]	; (b4e74 <hal_usart_is_enabled+0xc>)
   b4e6c:	681b      	ldr	r3, [r3, #0]
   b4e6e:	6a1b      	ldr	r3, [r3, #32]
   b4e70:	9301      	str	r3, [sp, #4]
   b4e72:	bd08      	pop	{r3, pc}
   b4e74:	0003023c 	.word	0x0003023c

000b4e78 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4e78:	b508      	push	{r3, lr}
   b4e7a:	4b02      	ldr	r3, [pc, #8]	; (b4e84 <hal_usart_available_data_for_write+0xc>)
   b4e7c:	681b      	ldr	r3, [r3, #0]
   b4e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e80:	9301      	str	r3, [sp, #4]
   b4e82:	bd08      	pop	{r3, pc}
   b4e84:	0003023c 	.word	0x0003023c

000b4e88 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4e88:	b508      	push	{r3, lr}
   b4e8a:	4b02      	ldr	r3, [pc, #8]	; (b4e94 <hal_usart_init_ex+0xc>)
   b4e8c:	681b      	ldr	r3, [r3, #0]
   b4e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e90:	9301      	str	r3, [sp, #4]
   b4e92:	bd08      	pop	{r3, pc}
   b4e94:	0003023c 	.word	0x0003023c

000b4e98 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4e98:	b508      	push	{r3, lr}
   b4e9a:	4b02      	ldr	r3, [pc, #8]	; (b4ea4 <hal_i2c_begin+0xc>)
   b4e9c:	681b      	ldr	r3, [r3, #0]
   b4e9e:	68db      	ldr	r3, [r3, #12]
   b4ea0:	9301      	str	r3, [sp, #4]
   b4ea2:	bd08      	pop	{r3, pc}
   b4ea4:	00030228 	.word	0x00030228

000b4ea8 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4ea8:	b508      	push	{r3, lr}
   b4eaa:	4b02      	ldr	r3, [pc, #8]	; (b4eb4 <hal_i2c_begin_transmission+0xc>)
   b4eac:	681b      	ldr	r3, [r3, #0]
   b4eae:	699b      	ldr	r3, [r3, #24]
   b4eb0:	9301      	str	r3, [sp, #4]
   b4eb2:	bd08      	pop	{r3, pc}
   b4eb4:	00030228 	.word	0x00030228

000b4eb8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4eb8:	b508      	push	{r3, lr}
   b4eba:	4b02      	ldr	r3, [pc, #8]	; (b4ec4 <hal_i2c_end_transmission+0xc>)
   b4ebc:	681b      	ldr	r3, [r3, #0]
   b4ebe:	69db      	ldr	r3, [r3, #28]
   b4ec0:	9301      	str	r3, [sp, #4]
   b4ec2:	bd08      	pop	{r3, pc}
   b4ec4:	00030228 	.word	0x00030228

000b4ec8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4ec8:	b508      	push	{r3, lr}
   b4eca:	4b02      	ldr	r3, [pc, #8]	; (b4ed4 <hal_i2c_write+0xc>)
   b4ecc:	681b      	ldr	r3, [r3, #0]
   b4ece:	6a1b      	ldr	r3, [r3, #32]
   b4ed0:	9301      	str	r3, [sp, #4]
   b4ed2:	bd08      	pop	{r3, pc}
   b4ed4:	00030228 	.word	0x00030228

000b4ed8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4ed8:	b508      	push	{r3, lr}
   b4eda:	4b02      	ldr	r3, [pc, #8]	; (b4ee4 <hal_i2c_available+0xc>)
   b4edc:	681b      	ldr	r3, [r3, #0]
   b4ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4ee0:	9301      	str	r3, [sp, #4]
   b4ee2:	bd08      	pop	{r3, pc}
   b4ee4:	00030228 	.word	0x00030228

000b4ee8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4ee8:	b508      	push	{r3, lr}
   b4eea:	4b02      	ldr	r3, [pc, #8]	; (b4ef4 <hal_i2c_read+0xc>)
   b4eec:	681b      	ldr	r3, [r3, #0]
   b4eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4ef0:	9301      	str	r3, [sp, #4]
   b4ef2:	bd08      	pop	{r3, pc}
   b4ef4:	00030228 	.word	0x00030228

000b4ef8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4ef8:	b508      	push	{r3, lr}
   b4efa:	4b02      	ldr	r3, [pc, #8]	; (b4f04 <hal_i2c_peek+0xc>)
   b4efc:	681b      	ldr	r3, [r3, #0]
   b4efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f00:	9301      	str	r3, [sp, #4]
   b4f02:	bd08      	pop	{r3, pc}
   b4f04:	00030228 	.word	0x00030228

000b4f08 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4f08:	b508      	push	{r3, lr}
   b4f0a:	4b02      	ldr	r3, [pc, #8]	; (b4f14 <hal_i2c_flush+0xc>)
   b4f0c:	681b      	ldr	r3, [r3, #0]
   b4f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4f10:	9301      	str	r3, [sp, #4]
   b4f12:	bd08      	pop	{r3, pc}
   b4f14:	00030228 	.word	0x00030228

000b4f18 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4f18:	b508      	push	{r3, lr}
   b4f1a:	4b02      	ldr	r3, [pc, #8]	; (b4f24 <hal_i2c_is_enabled+0xc>)
   b4f1c:	681b      	ldr	r3, [r3, #0]
   b4f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4f20:	9301      	str	r3, [sp, #4]
   b4f22:	bd08      	pop	{r3, pc}
   b4f24:	00030228 	.word	0x00030228

000b4f28 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4f28:	b508      	push	{r3, lr}
   b4f2a:	4b02      	ldr	r3, [pc, #8]	; (b4f34 <hal_i2c_init+0xc>)
   b4f2c:	681b      	ldr	r3, [r3, #0]
   b4f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f30:	9301      	str	r3, [sp, #4]
   b4f32:	bd08      	pop	{r3, pc}
   b4f34:	00030228 	.word	0x00030228

000b4f38 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4f38:	b508      	push	{r3, lr}
   b4f3a:	4b02      	ldr	r3, [pc, #8]	; (b4f44 <hal_i2c_request_ex+0xc>)
   b4f3c:	681b      	ldr	r3, [r3, #0]
   b4f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4f40:	9301      	str	r3, [sp, #4]
   b4f42:	bd08      	pop	{r3, pc}
   b4f44:	00030228 	.word	0x00030228

000b4f48 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4f48:	b508      	push	{r3, lr}
   b4f4a:	4b02      	ldr	r3, [pc, #8]	; (b4f54 <hal_spi_init+0xc>)
   b4f4c:	681b      	ldr	r3, [r3, #0]
   b4f4e:	69db      	ldr	r3, [r3, #28]
   b4f50:	9301      	str	r3, [sp, #4]
   b4f52:	bd08      	pop	{r3, pc}
   b4f54:	00030230 	.word	0x00030230

000b4f58 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4f58:	b508      	push	{r3, lr}
   b4f5a:	4b02      	ldr	r3, [pc, #8]	; (b4f64 <hal_spi_is_enabled+0xc>)
   b4f5c:	681b      	ldr	r3, [r3, #0]
   b4f5e:	6a1b      	ldr	r3, [r3, #32]
   b4f60:	9301      	str	r3, [sp, #4]
   b4f62:	bd08      	pop	{r3, pc}
   b4f64:	00030230 	.word	0x00030230

000b4f68 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4f68:	b508      	push	{r3, lr}
   b4f6a:	4b02      	ldr	r3, [pc, #8]	; (b4f74 <HAL_USB_USART_Init+0xc>)
   b4f6c:	681b      	ldr	r3, [r3, #0]
   b4f6e:	681b      	ldr	r3, [r3, #0]
   b4f70:	9301      	str	r3, [sp, #4]
   b4f72:	bd08      	pop	{r3, pc}
   b4f74:	0003024c 	.word	0x0003024c

000b4f78 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4f78:	b508      	push	{r3, lr}
   b4f7a:	4b02      	ldr	r3, [pc, #8]	; (b4f84 <HAL_USB_USART_Available_Data+0xc>)
   b4f7c:	681b      	ldr	r3, [r3, #0]
   b4f7e:	691b      	ldr	r3, [r3, #16]
   b4f80:	9301      	str	r3, [sp, #4]
   b4f82:	bd08      	pop	{r3, pc}
   b4f84:	0003024c 	.word	0x0003024c

000b4f88 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4f88:	b508      	push	{r3, lr}
   b4f8a:	4b02      	ldr	r3, [pc, #8]	; (b4f94 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4f8c:	681b      	ldr	r3, [r3, #0]
   b4f8e:	695b      	ldr	r3, [r3, #20]
   b4f90:	9301      	str	r3, [sp, #4]
   b4f92:	bd08      	pop	{r3, pc}
   b4f94:	0003024c 	.word	0x0003024c

000b4f98 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f98:	b508      	push	{r3, lr}
   b4f9a:	4b02      	ldr	r3, [pc, #8]	; (b4fa4 <HAL_USB_USART_Receive_Data+0xc>)
   b4f9c:	681b      	ldr	r3, [r3, #0]
   b4f9e:	699b      	ldr	r3, [r3, #24]
   b4fa0:	9301      	str	r3, [sp, #4]
   b4fa2:	bd08      	pop	{r3, pc}
   b4fa4:	0003024c 	.word	0x0003024c

000b4fa8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4fa8:	b508      	push	{r3, lr}
   b4faa:	4b02      	ldr	r3, [pc, #8]	; (b4fb4 <HAL_USB_USART_Send_Data+0xc>)
   b4fac:	681b      	ldr	r3, [r3, #0]
   b4fae:	69db      	ldr	r3, [r3, #28]
   b4fb0:	9301      	str	r3, [sp, #4]
   b4fb2:	bd08      	pop	{r3, pc}
   b4fb4:	0003024c 	.word	0x0003024c

000b4fb8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4fb8:	b508      	push	{r3, lr}
   b4fba:	4b02      	ldr	r3, [pc, #8]	; (b4fc4 <HAL_USB_USART_Flush_Data+0xc>)
   b4fbc:	681b      	ldr	r3, [r3, #0]
   b4fbe:	6a1b      	ldr	r3, [r3, #32]
   b4fc0:	9301      	str	r3, [sp, #4]
   b4fc2:	bd08      	pop	{r3, pc}
   b4fc4:	0003024c 	.word	0x0003024c

000b4fc8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4fc8:	b508      	push	{r3, lr}
   b4fca:	4b02      	ldr	r3, [pc, #8]	; (b4fd4 <log_message+0xc>)
   b4fcc:	681b      	ldr	r3, [r3, #0]
   b4fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4fd0:	9301      	str	r3, [sp, #4]
   b4fd2:	bd08      	pop	{r3, pc}
   b4fd4:	00030260 	.word	0x00030260

000b4fd8 <led_set_status_active>:
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   b4fd8:	b508      	push	{r3, lr}
   b4fda:	4b03      	ldr	r3, [pc, #12]	; (b4fe8 <led_set_status_active+0x10>)
   b4fdc:	681b      	ldr	r3, [r3, #0]
   b4fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b4fe2:	9301      	str	r3, [sp, #4]
   b4fe4:	bd08      	pop	{r3, pc}
   b4fe6:	0000      	.short	0x0000
   b4fe8:	00030260 	.word	0x00030260

000b4fec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4fec:	b508      	push	{r3, lr}
   b4fee:	4b02      	ldr	r3, [pc, #8]	; (b4ff8 <set_system_mode+0xc>)
   b4ff0:	681b      	ldr	r3, [r3, #0]
   b4ff2:	685b      	ldr	r3, [r3, #4]
   b4ff4:	9301      	str	r3, [sp, #4]
   b4ff6:	bd08      	pop	{r3, pc}
   b4ff8:	00030220 	.word	0x00030220

000b4ffc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4ffc:	b508      	push	{r3, lr}
   b4ffe:	4b02      	ldr	r3, [pc, #8]	; (b5008 <system_delay_ms+0xc>)
   b5000:	681b      	ldr	r3, [r3, #0]
   b5002:	695b      	ldr	r3, [r3, #20]
   b5004:	9301      	str	r3, [sp, #4]
   b5006:	bd08      	pop	{r3, pc}
   b5008:	00030220 	.word	0x00030220

000b500c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b500c:	b508      	push	{r3, lr}
   b500e:	4b02      	ldr	r3, [pc, #8]	; (b5018 <system_thread_set_state+0xc>)
   b5010:	681b      	ldr	r3, [r3, #0]
   b5012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5014:	9301      	str	r3, [sp, #4]
   b5016:	bd08      	pop	{r3, pc}
   b5018:	00030220 	.word	0x00030220

000b501c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b501c:	b508      	push	{r3, lr}
   b501e:	4b02      	ldr	r3, [pc, #8]	; (b5028 <application_thread_current+0xc>)
   b5020:	681b      	ldr	r3, [r3, #0]
   b5022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5024:	9301      	str	r3, [sp, #4]
   b5026:	bd08      	pop	{r3, pc}
   b5028:	00030220 	.word	0x00030220

000b502c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b502c:	b508      	push	{r3, lr}
   b502e:	4b02      	ldr	r3, [pc, #8]	; (b5038 <application_thread_invoke+0xc>)
   b5030:	681b      	ldr	r3, [r3, #0]
   b5032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5034:	9301      	str	r3, [sp, #4]
   b5036:	bd08      	pop	{r3, pc}
   b5038:	00030220 	.word	0x00030220

000b503c <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   b503c:	b508      	push	{r3, lr}
   b503e:	4b02      	ldr	r3, [pc, #8]	; (b5048 <led_pattern_period+0xc>)
   b5040:	681b      	ldr	r3, [r3, #0]
   b5042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b5044:	9301      	str	r3, [sp, #4]
   b5046:	bd08      	pop	{r3, pc}
   b5048:	00030220 	.word	0x00030220

000b504c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b504c:	b508      	push	{r3, lr}
   b504e:	4b03      	ldr	r3, [pc, #12]	; (b505c <system_ctrl_set_app_request_handler+0x10>)
   b5050:	681b      	ldr	r3, [r3, #0]
   b5052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5056:	9301      	str	r3, [sp, #4]
   b5058:	bd08      	pop	{r3, pc}
   b505a:	0000      	.short	0x0000
   b505c:	00030220 	.word	0x00030220

000b5060 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5060:	b508      	push	{r3, lr}
   b5062:	4b03      	ldr	r3, [pc, #12]	; (b5070 <system_ctrl_set_result+0x10>)
   b5064:	681b      	ldr	r3, [r3, #0]
   b5066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b506a:	9301      	str	r3, [sp, #4]
   b506c:	bd08      	pop	{r3, pc}
   b506e:	0000      	.short	0x0000
   b5070:	00030220 	.word	0x00030220

000b5074 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b5074:	b508      	push	{r3, lr}
   b5076:	4b03      	ldr	r3, [pc, #12]	; (b5084 <system_sleep_ext+0x10>)
   b5078:	681b      	ldr	r3, [r3, #0]
   b507a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b507e:	9301      	str	r3, [sp, #4]
   b5080:	bd08      	pop	{r3, pc}
   b5082:	0000      	.short	0x0000
   b5084:	00030220 	.word	0x00030220

000b5088 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5088:	b508      	push	{r3, lr}
   b508a:	4b02      	ldr	r3, [pc, #8]	; (b5094 <network_connect+0xc>)
   b508c:	681b      	ldr	r3, [r3, #0]
   b508e:	685b      	ldr	r3, [r3, #4]
   b5090:	9301      	str	r3, [sp, #4]
   b5092:	bd08      	pop	{r3, pc}
   b5094:	00030240 	.word	0x00030240

000b5098 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5098:	b508      	push	{r3, lr}
   b509a:	4b02      	ldr	r3, [pc, #8]	; (b50a4 <network_connecting+0xc>)
   b509c:	681b      	ldr	r3, [r3, #0]
   b509e:	689b      	ldr	r3, [r3, #8]
   b50a0:	9301      	str	r3, [sp, #4]
   b50a2:	bd08      	pop	{r3, pc}
   b50a4:	00030240 	.word	0x00030240

000b50a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b50a8:	b508      	push	{r3, lr}
   b50aa:	4b02      	ldr	r3, [pc, #8]	; (b50b4 <network_disconnect+0xc>)
   b50ac:	681b      	ldr	r3, [r3, #0]
   b50ae:	68db      	ldr	r3, [r3, #12]
   b50b0:	9301      	str	r3, [sp, #4]
   b50b2:	bd08      	pop	{r3, pc}
   b50b4:	00030240 	.word	0x00030240

000b50b8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b50b8:	b508      	push	{r3, lr}
   b50ba:	4b02      	ldr	r3, [pc, #8]	; (b50c4 <network_ready+0xc>)
   b50bc:	681b      	ldr	r3, [r3, #0]
   b50be:	691b      	ldr	r3, [r3, #16]
   b50c0:	9301      	str	r3, [sp, #4]
   b50c2:	bd08      	pop	{r3, pc}
   b50c4:	00030240 	.word	0x00030240

000b50c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b50c8:	b508      	push	{r3, lr}
   b50ca:	4b02      	ldr	r3, [pc, #8]	; (b50d4 <network_on+0xc>)
   b50cc:	681b      	ldr	r3, [r3, #0]
   b50ce:	695b      	ldr	r3, [r3, #20]
   b50d0:	9301      	str	r3, [sp, #4]
   b50d2:	bd08      	pop	{r3, pc}
   b50d4:	00030240 	.word	0x00030240

000b50d8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b50d8:	b508      	push	{r3, lr}
   b50da:	4b02      	ldr	r3, [pc, #8]	; (b50e4 <network_off+0xc>)
   b50dc:	681b      	ldr	r3, [r3, #0]
   b50de:	699b      	ldr	r3, [r3, #24]
   b50e0:	9301      	str	r3, [sp, #4]
   b50e2:	bd08      	pop	{r3, pc}
   b50e4:	00030240 	.word	0x00030240

000b50e8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b50e8:	b508      	push	{r3, lr}
   b50ea:	4b02      	ldr	r3, [pc, #8]	; (b50f4 <network_listen+0xc>)
   b50ec:	681b      	ldr	r3, [r3, #0]
   b50ee:	69db      	ldr	r3, [r3, #28]
   b50f0:	9301      	str	r3, [sp, #4]
   b50f2:	bd08      	pop	{r3, pc}
   b50f4:	00030240 	.word	0x00030240

000b50f8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b50f8:	b508      	push	{r3, lr}
   b50fa:	4b02      	ldr	r3, [pc, #8]	; (b5104 <network_listening+0xc>)
   b50fc:	681b      	ldr	r3, [r3, #0]
   b50fe:	6a1b      	ldr	r3, [r3, #32]
   b5100:	9301      	str	r3, [sp, #4]
   b5102:	bd08      	pop	{r3, pc}
   b5104:	00030240 	.word	0x00030240

000b5108 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b5108:	b508      	push	{r3, lr}
   b510a:	4b02      	ldr	r3, [pc, #8]	; (b5114 <network_set_credentials+0xc>)
   b510c:	681b      	ldr	r3, [r3, #0]
   b510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5110:	9301      	str	r3, [sp, #4]
   b5112:	bd08      	pop	{r3, pc}
   b5114:	00030240 	.word	0x00030240

000b5118 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5118:	b508      	push	{r3, lr}
   b511a:	4b02      	ldr	r3, [pc, #8]	; (b5124 <network_set_listen_timeout+0xc>)
   b511c:	681b      	ldr	r3, [r3, #0]
   b511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5120:	9301      	str	r3, [sp, #4]
   b5122:	bd08      	pop	{r3, pc}
   b5124:	00030240 	.word	0x00030240

000b5128 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5128:	b508      	push	{r3, lr}
   b512a:	4b02      	ldr	r3, [pc, #8]	; (b5134 <network_get_listen_timeout+0xc>)
   b512c:	681b      	ldr	r3, [r3, #0]
   b512e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5130:	9301      	str	r3, [sp, #4]
   b5132:	bd08      	pop	{r3, pc}
   b5134:	00030240 	.word	0x00030240

000b5138 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5138:	b508      	push	{r3, lr}
   b513a:	4b02      	ldr	r3, [pc, #8]	; (b5144 <network_is_on+0xc>)
   b513c:	681b      	ldr	r3, [r3, #0]
   b513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5140:	9301      	str	r3, [sp, #4]
   b5142:	bd08      	pop	{r3, pc}
   b5144:	00030240 	.word	0x00030240

000b5148 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5148:	b508      	push	{r3, lr}
   b514a:	4b02      	ldr	r3, [pc, #8]	; (b5154 <network_is_off+0xc>)
   b514c:	681b      	ldr	r3, [r3, #0]
   b514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5150:	9301      	str	r3, [sp, #4]
   b5152:	bd08      	pop	{r3, pc}
   b5154:	00030240 	.word	0x00030240

000b5158 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5158:	b508      	push	{r3, lr}
   b515a:	4b02      	ldr	r3, [pc, #8]	; (b5164 <spark_process+0xc>)
   b515c:	681b      	ldr	r3, [r3, #0]
   b515e:	689b      	ldr	r3, [r3, #8]
   b5160:	9301      	str	r3, [sp, #4]
   b5162:	bd08      	pop	{r3, pc}
   b5164:	00030244 	.word	0x00030244

000b5168 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5168:	b508      	push	{r3, lr}
   b516a:	4b02      	ldr	r3, [pc, #8]	; (b5174 <spark_cloud_flag_connected+0xc>)
   b516c:	681b      	ldr	r3, [r3, #0]
   b516e:	695b      	ldr	r3, [r3, #20]
   b5170:	9301      	str	r3, [sp, #4]
   b5172:	bd08      	pop	{r3, pc}
   b5174:	00030244 	.word	0x00030244

000b5178 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5178:	b508      	push	{r3, lr}
   b517a:	4b02      	ldr	r3, [pc, #8]	; (b5184 <spark_send_event+0xc>)
   b517c:	681b      	ldr	r3, [r3, #0]
   b517e:	6a1b      	ldr	r3, [r3, #32]
   b5180:	9301      	str	r3, [sp, #4]
   b5182:	bd08      	pop	{r3, pc}
   b5184:	00030244 	.word	0x00030244

000b5188 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b5188:	b508      	push	{r3, lr}
   b518a:	4b02      	ldr	r3, [pc, #8]	; (b5194 <spark_subscribe+0xc>)
   b518c:	681b      	ldr	r3, [r3, #0]
   b518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5190:	9301      	str	r3, [sp, #4]
   b5192:	bd08      	pop	{r3, pc}
   b5194:	00030244 	.word	0x00030244

000b5198 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5198:	b508      	push	{r3, lr}
   b519a:	4b02      	ldr	r3, [pc, #8]	; (b51a4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b519c:	681b      	ldr	r3, [r3, #0]
   b519e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b51a0:	9301      	str	r3, [sp, #4]
   b51a2:	bd08      	pop	{r3, pc}
   b51a4:	00030244 	.word	0x00030244

000b51a8 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b51a8:	b508      	push	{r3, lr}
   b51aa:	4b02      	ldr	r3, [pc, #8]	; (b51b4 <spark_cloud_disconnect+0xc>)
   b51ac:	681b      	ldr	r3, [r3, #0]
   b51ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b51b0:	9301      	str	r3, [sp, #4]
   b51b2:	bd08      	pop	{r3, pc}
   b51b4:	00030244 	.word	0x00030244

000b51b8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b51b8:	b508      	push	{r3, lr}
   b51ba:	4b02      	ldr	r3, [pc, #8]	; (b51c4 <malloc+0xc>)
   b51bc:	681b      	ldr	r3, [r3, #0]
   b51be:	681b      	ldr	r3, [r3, #0]
   b51c0:	9301      	str	r3, [sp, #4]
   b51c2:	bd08      	pop	{r3, pc}
   b51c4:	0003021c 	.word	0x0003021c

000b51c8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b51c8:	b508      	push	{r3, lr}
   b51ca:	4b02      	ldr	r3, [pc, #8]	; (b51d4 <free+0xc>)
   b51cc:	681b      	ldr	r3, [r3, #0]
   b51ce:	685b      	ldr	r3, [r3, #4]
   b51d0:	9301      	str	r3, [sp, #4]
   b51d2:	bd08      	pop	{r3, pc}
   b51d4:	0003021c 	.word	0x0003021c

000b51d8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b51d8:	b508      	push	{r3, lr}
   b51da:	4b02      	ldr	r3, [pc, #8]	; (b51e4 <realloc+0xc>)
   b51dc:	681b      	ldr	r3, [r3, #0]
   b51de:	689b      	ldr	r3, [r3, #8]
   b51e0:	9301      	str	r3, [sp, #4]
   b51e2:	bd08      	pop	{r3, pc}
   b51e4:	0003021c 	.word	0x0003021c

000b51e8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b51e8:	b508      	push	{r3, lr}
   b51ea:	4b02      	ldr	r3, [pc, #8]	; (b51f4 <sprintf+0xc>)
   b51ec:	681b      	ldr	r3, [r3, #0]
   b51ee:	68db      	ldr	r3, [r3, #12]
   b51f0:	9301      	str	r3, [sp, #4]
   b51f2:	bd08      	pop	{r3, pc}
   b51f4:	0003021c 	.word	0x0003021c

000b51f8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b51f8:	b508      	push	{r3, lr}
   b51fa:	4b02      	ldr	r3, [pc, #8]	; (b5204 <abort+0xc>)
   b51fc:	681b      	ldr	r3, [r3, #0]
   b51fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5200:	9301      	str	r3, [sp, #4]
   b5202:	bd08      	pop	{r3, pc}
   b5204:	0003021c 	.word	0x0003021c

000b5208 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5208:	b508      	push	{r3, lr}
   b520a:	4b02      	ldr	r3, [pc, #8]	; (b5214 <_malloc_r+0xc>)
   b520c:	681b      	ldr	r3, [r3, #0]
   b520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5210:	9301      	str	r3, [sp, #4]
   b5212:	bd08      	pop	{r3, pc}
   b5214:	0003021c 	.word	0x0003021c

000b5218 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5218:	b508      	push	{r3, lr}
   b521a:	4b02      	ldr	r3, [pc, #8]	; (b5224 <__assert_func+0xc>)
   b521c:	681b      	ldr	r3, [r3, #0]
   b521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5220:	9301      	str	r3, [sp, #4]
   b5222:	bd08      	pop	{r3, pc}
   b5224:	0003021c 	.word	0x0003021c

000b5228 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5228:	b508      	push	{r3, lr}
   b522a:	4b02      	ldr	r3, [pc, #8]	; (b5234 <newlib_impure_ptr_callback+0xc>)
   b522c:	681b      	ldr	r3, [r3, #0]
   b522e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5230:	9301      	str	r3, [sp, #4]
   b5232:	bd08      	pop	{r3, pc}
   b5234:	0003021c 	.word	0x0003021c

000b5238 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5238:	2200      	movs	r2, #0
   b523a:	6840      	ldr	r0, [r0, #4]
   b523c:	4611      	mov	r1, r2
   b523e:	f7ff bf5b 	b.w	b50f8 <network_listening>

000b5242 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5242:	2200      	movs	r2, #0
   b5244:	6840      	ldr	r0, [r0, #4]
   b5246:	4611      	mov	r1, r2
   b5248:	f7ff bf6e 	b.w	b5128 <network_get_listen_timeout>

000b524c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b524c:	6840      	ldr	r0, [r0, #4]
   b524e:	2200      	movs	r2, #0
   b5250:	f7ff bf62 	b.w	b5118 <network_set_listen_timeout>

000b5254 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5254:	6840      	ldr	r0, [r0, #4]
   b5256:	2200      	movs	r2, #0
   b5258:	f081 0101 	eor.w	r1, r1, #1
   b525c:	f7ff bf44 	b.w	b50e8 <network_listen>

000b5260 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5260:	2300      	movs	r3, #0
   b5262:	6840      	ldr	r0, [r0, #4]
   b5264:	461a      	mov	r2, r3
   b5266:	4619      	mov	r1, r3
   b5268:	f7ff bf36 	b.w	b50d8 <network_off>

000b526c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b526c:	2300      	movs	r3, #0
   b526e:	6840      	ldr	r0, [r0, #4]
   b5270:	461a      	mov	r2, r3
   b5272:	4619      	mov	r1, r3
   b5274:	f7ff bf28 	b.w	b50c8 <network_on>

000b5278 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5278:	2200      	movs	r2, #0
   b527a:	6840      	ldr	r0, [r0, #4]
   b527c:	4611      	mov	r1, r2
   b527e:	f7ff bf1b 	b.w	b50b8 <network_ready>

000b5282 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5282:	2200      	movs	r2, #0
   b5284:	6840      	ldr	r0, [r0, #4]
   b5286:	4611      	mov	r1, r2
   b5288:	f7ff bf06 	b.w	b5098 <network_connecting>

000b528c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b528c:	6840      	ldr	r0, [r0, #4]
   b528e:	2200      	movs	r2, #0
   b5290:	2102      	movs	r1, #2
   b5292:	f7ff bf09 	b.w	b50a8 <network_disconnect>

000b5296 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5296:	2300      	movs	r3, #0
   b5298:	6840      	ldr	r0, [r0, #4]
   b529a:	461a      	mov	r2, r3
   b529c:	f7ff bef4 	b.w	b5088 <network_connect>

000b52a0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b52a0:	4b02      	ldr	r3, [pc, #8]	; (b52ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b52a2:	2203      	movs	r2, #3
   b52a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b52a6:	4a02      	ldr	r2, [pc, #8]	; (b52b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b52a8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b52aa:	4770      	bx	lr
   b52ac:	2003e6b8 	.word	0x2003e6b8
   b52b0:	000b8e44 	.word	0x000b8e44

000b52b4 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   b52b4:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   b52b6:	460b      	mov	r3, r1
    s->update(ticks);
   b52b8:	6892      	ldr	r2, [r2, #8]
   b52ba:	4601      	mov	r1, r0
   b52bc:	4618      	mov	r0, r3
   b52be:	4710      	bx	r2

000b52c0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   b52c0:	b570      	push	{r4, r5, r6, lr}
   b52c2:	4c0e      	ldr	r4, [pc, #56]	; (b52fc <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   b52c4:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   b52c6:	2500      	movs	r5, #0
   b52c8:	241c      	movs	r4, #28
   b52ca:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b52ce:	f89d 4014 	ldrb.w	r4, [sp, #20]
   b52d2:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   b52d6:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b52d8:	f004 0403 	and.w	r4, r4, #3
   b52dc:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   b52e0:	b2e4      	uxtb	r4, r4
   b52e2:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   b52e4:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   b52e6:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   b52e8:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   b52ea:	7c42      	ldrb	r2, [r0, #17]
   b52ec:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   b52ee:	bf0a      	itet	eq
   b52f0:	4b03      	ldreq	r3, [pc, #12]	; (b5300 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   b52f2:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   b52f4:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   b52f8:	bd70      	pop	{r4, r5, r6, pc}
   b52fa:	bf00      	nop
   b52fc:	000b8df0 	.word	0x000b8df0
   b5300:	000b52b5 	.word	0x000b52b5

000b5304 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5304:	b510      	push	{r4, lr}
   b5306:	4604      	mov	r4, r0
   b5308:	4608      	mov	r0, r1
{
    _spi = spi;
   b530a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b530c:	f7ff fe1c 	bl	b4f48 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5310:	2300      	movs	r3, #0
   b5312:	6063      	str	r3, [r4, #4]
}
   b5314:	4620      	mov	r0, r4
   b5316:	bd10      	pop	{r4, pc}

000b5318 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b5318:	b538      	push	{r3, r4, r5, lr}
   b531a:	460c      	mov	r4, r1
   b531c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b531e:	f7fe ff67 	bl	b41f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b5322:	b154      	cbz	r4, b533a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b5324:	8820      	ldrh	r0, [r4, #0]
   b5326:	f7ff ff47 	bl	b51b8 <malloc>
   b532a:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b532c:	b128      	cbz	r0, b533a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b532e:	8822      	ldrh	r2, [r4, #0]
   b5330:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b5332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b5336:	f001 bd7c 	b.w	b6e32 <memcpy>
    }
   b533a:	bd38      	pop	{r3, r4, r5, pc}

000b533c <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b533c:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b533e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b5342:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b5344:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b5348:	f8c0 3006 	str.w	r3, [r0, #6]
   b534c:	894b      	ldrh	r3, [r1, #10]
   b534e:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b5350:	460c      	mov	r4, r1
   b5352:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b5354:	f7fe ff4c 	bl	b41f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b5358:	6823      	ldr	r3, [r4, #0]
   b535a:	b113      	cbz	r3, b5362 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b535c:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b535e:	2300      	movs	r3, #0
   b5360:	6023      	str	r3, [r4, #0]
    }
   b5362:	bd38      	pop	{r3, r4, r5, pc}

000b5364 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b5364:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5366:	4d2b      	ldr	r5, [pc, #172]	; (b5414 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b5368:	7d0b      	ldrb	r3, [r1, #20]
   b536a:	4604      	mov	r4, r0
   b536c:	b08b      	sub	sp, #44	; 0x2c
   b536e:	4608      	mov	r0, r1
   b5370:	1daf      	adds	r7, r5, #6
   b5372:	2b00      	cmp	r3, #0
   b5374:	d036      	beq.n	b53e4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b5376:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b5378:	791b      	ldrb	r3, [r3, #4]
   b537a:	2b00      	cmp	r3, #0
   b537c:	d032      	beq.n	b53e4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b537e:	4b26      	ldr	r3, [pc, #152]	; (b5418 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b5380:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b5382:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b5384:	a902      	add	r1, sp, #8
   b5386:	3004      	adds	r0, #4
   b5388:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b538c:	f7ff fe72 	bl	b5074 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b5390:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b5394:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b5398:	b200      	sxth	r0, r0
   b539a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b539e:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b53a2:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b53a4:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b53a6:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b53a8:	4628      	mov	r0, r5
   b53aa:	f7ff ffb5 	bl	b5318 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b53ae:	a802      	add	r0, sp, #8
   b53b0:	f7fe ff1e 	bl	b41f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b53b4:	2300      	movs	r3, #0
   b53b6:	6023      	str	r3, [r4, #0]
   b53b8:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b53ba:	71a3      	strb	r3, [r4, #6]
   b53bc:	8123      	strh	r3, [r4, #8]
   b53be:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b53c2:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b53c4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b53c8:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b53ca:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b53ce:	f8c4 3006 	str.w	r3, [r4, #6]
   b53d2:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b53d4:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b53d6:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b53d8:	4620      	mov	r0, r4
   b53da:	f7ff ff9d 	bl	b5318 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b53de:	4620      	mov	r0, r4
   b53e0:	b00b      	add	sp, #44	; 0x2c
   b53e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b53e4:	2600      	movs	r6, #0
   b53e6:	2320      	movs	r3, #32
   b53e8:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b53ec:	4b0b      	ldr	r3, [pc, #44]	; (b541c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b53ee:	9300      	str	r3, [sp, #0]
   b53f0:	aa02      	add	r2, sp, #8
   b53f2:	4633      	mov	r3, r6
   b53f4:	490a      	ldr	r1, [pc, #40]	; (b5420 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b53f6:	2032      	movs	r0, #50	; 0x32
   b53f8:	f7ff fde6 	bl	b4fc8 <log_message>
            : wakeupSource_(nullptr),
   b53fc:	4b06      	ldr	r3, [pc, #24]	; (b5418 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b53fe:	4805      	ldr	r0, [pc, #20]	; (b5414 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b5400:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b5402:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b5406:	a902      	add	r1, sp, #8
   b5408:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b540c:	f7ff ff96 	bl	b533c <_ZN17SystemSleepResultaSEOS_.isra.0>
   b5410:	e7cd      	b.n	b53ae <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b5412:	bf00      	nop
   b5414:	2003e6c0 	.word	0x2003e6c0
   b5418:	ffff0000 	.word	0xffff0000
   b541c:	000b8e7f 	.word	0x000b8e7f
   b5420:	000b8e78 	.word	0x000b8e78

000b5424 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5424:	4b05      	ldr	r3, [pc, #20]	; (b543c <_GLOBAL__sub_I_System+0x18>)
   b5426:	2202      	movs	r2, #2
   b5428:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b542a:	4b05      	ldr	r3, [pc, #20]	; (b5440 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b542c:	4a05      	ldr	r2, [pc, #20]	; (b5444 <_GLOBAL__sub_I_System+0x20>)
   b542e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5430:	2000      	movs	r0, #0
   b5432:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5436:	f7ff bdd9 	b.w	b4fec <set_system_mode>
   b543a:	bf00      	nop
   b543c:	2003e6cc 	.word	0x2003e6cc
   b5440:	2003e6c0 	.word	0x2003e6c0
   b5444:	ffff0000 	.word	0xffff0000

000b5448 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5448:	b510      	push	{r4, lr}
   b544a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b544c:	6800      	ldr	r0, [r0, #0]
   b544e:	b108      	cbz	r0, b5454 <_ZN6String10invalidateEv+0xc>
   b5450:	f7ff feba 	bl	b51c8 <free>
	buffer = NULL;
   b5454:	2300      	movs	r3, #0
	capacity = len = 0;
   b5456:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b545a:	6023      	str	r3, [r4, #0]
}
   b545c:	bd10      	pop	{r4, pc}

000b545e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b545e:	b538      	push	{r3, r4, r5, lr}
   b5460:	4604      	mov	r4, r0
   b5462:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5464:	6800      	ldr	r0, [r0, #0]
   b5466:	3101      	adds	r1, #1
   b5468:	f7ff feb6 	bl	b51d8 <realloc>
	if (newbuffer) {
   b546c:	b110      	cbz	r0, b5474 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b546e:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5472:	2001      	movs	r0, #1
	}
	return 0;
}
   b5474:	bd38      	pop	{r3, r4, r5, pc}

000b5476 <_ZN6String7reserveEj>:
{
   b5476:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5478:	6803      	ldr	r3, [r0, #0]
{
   b547a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b547c:	b123      	cbz	r3, b5488 <_ZN6String7reserveEj+0x12>
   b547e:	6843      	ldr	r3, [r0, #4]
   b5480:	428b      	cmp	r3, r1
   b5482:	d301      	bcc.n	b5488 <_ZN6String7reserveEj+0x12>
   b5484:	2001      	movs	r0, #1
}
   b5486:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5488:	4620      	mov	r0, r4
   b548a:	f7ff ffe8 	bl	b545e <_ZN6String12changeBufferEj>
   b548e:	2800      	cmp	r0, #0
   b5490:	d0f9      	beq.n	b5486 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5492:	68a3      	ldr	r3, [r4, #8]
   b5494:	2b00      	cmp	r3, #0
   b5496:	d1f5      	bne.n	b5484 <_ZN6String7reserveEj+0xe>
   b5498:	6822      	ldr	r2, [r4, #0]
   b549a:	7013      	strb	r3, [r2, #0]
   b549c:	e7f2      	b.n	b5484 <_ZN6String7reserveEj+0xe>

000b549e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b549e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b54a0:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b54a2:	4611      	mov	r1, r2
   b54a4:	9201      	str	r2, [sp, #4]
{
   b54a6:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b54a8:	f7ff ffe5 	bl	b5476 <_ZN6String7reserveEj>
   b54ac:	9a01      	ldr	r2, [sp, #4]
   b54ae:	b928      	cbnz	r0, b54bc <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b54b0:	4620      	mov	r0, r4
   b54b2:	f7ff ffc9 	bl	b5448 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b54b6:	4620      	mov	r0, r4
   b54b8:	b003      	add	sp, #12
   b54ba:	bd30      	pop	{r4, r5, pc}
	len = length;
   b54bc:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b54be:	4629      	mov	r1, r5
   b54c0:	6820      	ldr	r0, [r4, #0]
   b54c2:	f001 fcb6 	bl	b6e32 <memcpy>
	buffer[len] = 0;
   b54c6:	6822      	ldr	r2, [r4, #0]
   b54c8:	68a3      	ldr	r3, [r4, #8]
   b54ca:	2100      	movs	r1, #0
   b54cc:	54d1      	strb	r1, [r2, r3]
	return *this;
   b54ce:	e7f2      	b.n	b54b6 <_ZN6String4copyEPKcj+0x18>

000b54d0 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b54d0:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b54d2:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b54d4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b54d8:	4604      	mov	r4, r0
	len = 0;
   b54da:	6083      	str	r3, [r0, #8]
	flags = 0;
   b54dc:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b54de:	b141      	cbz	r1, b54f2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b54e0:	4608      	mov	r0, r1
   b54e2:	9101      	str	r1, [sp, #4]
   b54e4:	f001 fd0f 	bl	b6f06 <strlen>
   b54e8:	9901      	ldr	r1, [sp, #4]
   b54ea:	4602      	mov	r2, r0
   b54ec:	4620      	mov	r0, r4
   b54ee:	f7ff ffd6 	bl	b549e <_ZN6String4copyEPKcj>
}
   b54f2:	4620      	mov	r0, r4
   b54f4:	b002      	add	sp, #8
   b54f6:	bd10      	pop	{r4, pc}

000b54f8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b54f8:	b513      	push	{r0, r1, r4, lr}
   b54fa:	460b      	mov	r3, r1
   b54fc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54fe:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5502:	466c      	mov	r4, sp
   b5504:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5508:	e893 0003 	ldmia.w	r3, {r0, r1}
   b550c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5510:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5514:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5518:	b002      	add	sp, #8
   b551a:	bd10      	pop	{r4, pc}

000b551c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b551c:	4802      	ldr	r0, [pc, #8]	; (b5528 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b551e:	2300      	movs	r3, #0
   b5520:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5522:	f7ff bc61 	b.w	b4de8 <os_mutex_recursive_create>
   b5526:	bf00      	nop
   b5528:	2003e6d0 	.word	0x2003e6d0

000b552c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b552e:	4606      	mov	r6, r0
   b5530:	460d      	mov	r5, r1
  size_t n = 0;
   b5532:	188f      	adds	r7, r1, r2
   b5534:	2400      	movs	r4, #0
  while (size--) {
   b5536:	42bd      	cmp	r5, r7
   b5538:	d00c      	beq.n	b5554 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b553a:	6833      	ldr	r3, [r6, #0]
   b553c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5540:	689b      	ldr	r3, [r3, #8]
   b5542:	4630      	mov	r0, r6
   b5544:	4798      	blx	r3
     if (chunk>=0)
   b5546:	1e03      	subs	r3, r0, #0
   b5548:	db01      	blt.n	b554e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b554a:	441c      	add	r4, r3
  while (size--) {
   b554c:	e7f3      	b.n	b5536 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b554e:	2c00      	cmp	r4, #0
   b5550:	bf08      	it	eq
   b5552:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5554:	4620      	mov	r0, r4
   b5556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5558 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5558:	b513      	push	{r0, r1, r4, lr}
   b555a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b555c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b555e:	b159      	cbz	r1, b5578 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5560:	9101      	str	r1, [sp, #4]
   b5562:	f001 fcd0 	bl	b6f06 <strlen>
   b5566:	6823      	ldr	r3, [r4, #0]
   b5568:	9901      	ldr	r1, [sp, #4]
   b556a:	68db      	ldr	r3, [r3, #12]
   b556c:	4602      	mov	r2, r0
   b556e:	4620      	mov	r0, r4
    }
   b5570:	b002      	add	sp, #8
   b5572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5576:	4718      	bx	r3
    }
   b5578:	b002      	add	sp, #8
   b557a:	bd10      	pop	{r4, pc}

000b557c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b557c:	6803      	ldr	r3, [r0, #0]
   b557e:	689b      	ldr	r3, [r3, #8]
   b5580:	4718      	bx	r3

000b5582 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5582:	b530      	push	{r4, r5, lr}
   b5584:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5586:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5588:	2a01      	cmp	r2, #1
  *str = '\0';
   b558a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b558e:	bf98      	it	ls
   b5590:	220a      	movls	r2, #10
   b5592:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5594:	460d      	mov	r5, r1
   b5596:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b559a:	fb01 5312 	mls	r3, r1, r2, r5
   b559e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b55a2:	2b09      	cmp	r3, #9
   b55a4:	bf94      	ite	ls
   b55a6:	3330      	addls	r3, #48	; 0x30
   b55a8:	3337      	addhi	r3, #55	; 0x37
   b55aa:	b2db      	uxtb	r3, r3
  } while(n);
   b55ac:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b55ae:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b55b2:	d9ef      	bls.n	b5594 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b55b4:	4621      	mov	r1, r4
   b55b6:	f7ff ffcf 	bl	b5558 <_ZN5Print5writeEPKc>
}
   b55ba:	b00b      	add	sp, #44	; 0x2c
   b55bc:	bd30      	pop	{r4, r5, pc}
	...

000b55c0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b55c0:	4b01      	ldr	r3, [pc, #4]	; (b55c8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b55c2:	4a02      	ldr	r2, [pc, #8]	; (b55cc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b55c4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b55c6:	4770      	bx	lr
   b55c8:	2003e6d4 	.word	0x2003e6d4
   b55cc:	000b8ea6 	.word	0x000b8ea6

000b55d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b55d0:	4b02      	ldr	r3, [pc, #8]	; (b55dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b55d2:	681a      	ldr	r2, [r3, #0]
   b55d4:	4b02      	ldr	r3, [pc, #8]	; (b55e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b55d6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b55d8:	4770      	bx	lr
   b55da:	bf00      	nop
   b55dc:	2003e45c 	.word	0x2003e45c
   b55e0:	2003e6d8 	.word	0x2003e6d8

000b55e4 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b55e4:	428a      	cmp	r2, r1
{
   b55e6:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b55e8:	d007      	beq.n	b55fa <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b55ea:	1a44      	subs	r4, r0, r1
   b55ec:	9802      	ldr	r0, [sp, #8]
   b55ee:	1ac0      	subs	r0, r0, r3
   b55f0:	4344      	muls	r4, r0
   b55f2:	1a50      	subs	r0, r2, r1
   b55f4:	fb94 f0f0 	sdiv	r0, r4, r0
   b55f8:	4418      	add	r0, r3
}
   b55fa:	bd10      	pop	{r4, pc}

000b55fc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b55fc:	2100      	movs	r1, #0
   b55fe:	f7ff bcfd 	b.w	b4ffc <system_delay_ms>
	...

000b5604 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5604:	4b01      	ldr	r3, [pc, #4]	; (b560c <_GLOBAL__sub_I_RGB+0x8>)
   b5606:	2200      	movs	r2, #0
   b5608:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b560a:	4770      	bx	lr
   b560c:	2003e6dc 	.word	0x2003e6dc

000b5610 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5610:	4b01      	ldr	r3, [pc, #4]	; (b5618 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5612:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5614:	4770      	bx	lr
   b5616:	bf00      	nop
   b5618:	2003e460 	.word	0x2003e460

000b561c <serialEventRun>:
{
   b561c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b561e:	4b0b      	ldr	r3, [pc, #44]	; (b564c <serialEventRun+0x30>)
   b5620:	b143      	cbz	r3, b5634 <serialEventRun+0x18>
   b5622:	f000 fc15 	bl	b5e50 <_Z16_fetch_usbserialv>
   b5626:	6803      	ldr	r3, [r0, #0]
   b5628:	691b      	ldr	r3, [r3, #16]
   b562a:	4798      	blx	r3
   b562c:	2800      	cmp	r0, #0
   b562e:	dd01      	ble.n	b5634 <serialEventRun+0x18>
        serialEvent();
   b5630:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5634:	4b06      	ldr	r3, [pc, #24]	; (b5650 <serialEventRun+0x34>)
   b5636:	b143      	cbz	r3, b564a <serialEventRun+0x2e>
   b5638:	f000 fe9e 	bl	b6378 <_Z22__fetch_global_Serial1v>
   b563c:	6803      	ldr	r3, [r0, #0]
   b563e:	691b      	ldr	r3, [r3, #16]
   b5640:	4798      	blx	r3
   b5642:	2800      	cmp	r0, #0
   b5644:	dd01      	ble.n	b564a <serialEventRun+0x2e>
        serialEvent1();
   b5646:	f3af 8000 	nop.w
}
   b564a:	bd08      	pop	{r3, pc}
	...

000b5654 <_post_loop>:
{
   b5654:	b508      	push	{r3, lr}
	serialEventRun();
   b5656:	f7ff ffe1 	bl	b561c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b565a:	f7ff fb8d 	bl	b4d78 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b565e:	4b01      	ldr	r3, [pc, #4]	; (b5664 <_post_loop+0x10>)
   b5660:	6018      	str	r0, [r3, #0]
}
   b5662:	bd08      	pop	{r3, pc}
   b5664:	2003e740 	.word	0x2003e740

000b5668 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5668:	4805      	ldr	r0, [pc, #20]	; (b5680 <_Z33system_initialize_user_backup_ramv+0x18>)
   b566a:	4a06      	ldr	r2, [pc, #24]	; (b5684 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b566c:	4906      	ldr	r1, [pc, #24]	; (b5688 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b566e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5670:	1a12      	subs	r2, r2, r0
   b5672:	f001 fbde 	bl	b6e32 <memcpy>
    __backup_sram_signature = signature;
   b5676:	4b05      	ldr	r3, [pc, #20]	; (b568c <_Z33system_initialize_user_backup_ramv+0x24>)
   b5678:	4a05      	ldr	r2, [pc, #20]	; (b5690 <_Z33system_initialize_user_backup_ramv+0x28>)
   b567a:	601a      	str	r2, [r3, #0]
}
   b567c:	bd08      	pop	{r3, pc}
   b567e:	bf00      	nop
   b5680:	2003f400 	.word	0x2003f400
   b5684:	2003f40c 	.word	0x2003f40c
   b5688:	000b9464 	.word	0x000b9464
   b568c:	2003f408 	.word	0x2003f408
   b5690:	9a271c1e 	.word	0x9a271c1e

000b5694 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5694:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5696:	2300      	movs	r3, #0
   b5698:	9300      	str	r3, [sp, #0]
   b569a:	461a      	mov	r2, r3
   b569c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b56a0:	f7ff fcde 	bl	b5060 <system_ctrl_set_result>
}
   b56a4:	b003      	add	sp, #12
   b56a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b56ac <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b56ac:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b56ae:	8843      	ldrh	r3, [r0, #2]
   b56b0:	2b0a      	cmp	r3, #10
   b56b2:	d008      	beq.n	b56c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b56b4:	2b50      	cmp	r3, #80	; 0x50
   b56b6:	d10b      	bne.n	b56d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b56b8:	4b09      	ldr	r3, [pc, #36]	; (b56e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b56ba:	681b      	ldr	r3, [r3, #0]
   b56bc:	b14b      	cbz	r3, b56d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b56be:	b003      	add	sp, #12
   b56c0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b56c4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b56c6:	f7ff ffe5 	bl	b5694 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b56ca:	b003      	add	sp, #12
   b56cc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b56d0:	2300      	movs	r3, #0
   b56d2:	9300      	str	r3, [sp, #0]
   b56d4:	461a      	mov	r2, r3
   b56d6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b56da:	f7ff fcc1 	bl	b5060 <system_ctrl_set_result>
}
   b56de:	e7f4      	b.n	b56ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b56e0:	2003e6f0 	.word	0x2003e6f0

000b56e4 <module_user_init_hook>:
{
   b56e4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b56e6:	4812      	ldr	r0, [pc, #72]	; (b5730 <module_user_init_hook+0x4c>)
   b56e8:	2100      	movs	r1, #0
   b56ea:	f7ff fd9d 	bl	b5228 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b56ee:	4b11      	ldr	r3, [pc, #68]	; (b5734 <module_user_init_hook+0x50>)
   b56f0:	681a      	ldr	r2, [r3, #0]
   b56f2:	4b11      	ldr	r3, [pc, #68]	; (b5738 <module_user_init_hook+0x54>)
   b56f4:	429a      	cmp	r2, r3
   b56f6:	4b11      	ldr	r3, [pc, #68]	; (b573c <module_user_init_hook+0x58>)
   b56f8:	bf0c      	ite	eq
   b56fa:	2201      	moveq	r2, #1
   b56fc:	2200      	movne	r2, #0
   b56fe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5700:	d001      	beq.n	b5706 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5702:	f7ff ffb1 	bl	b5668 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5706:	f7ff fb2f 	bl	b4d68 <HAL_RNG_GetRandomNumber>
   b570a:	4604      	mov	r4, r0
    srand(seed);
   b570c:	f001 fba8 	bl	b6e60 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5710:	4b0b      	ldr	r3, [pc, #44]	; (b5740 <module_user_init_hook+0x5c>)
   b5712:	b113      	cbz	r3, b571a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5714:	4620      	mov	r0, r4
   b5716:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b571a:	2100      	movs	r1, #0
   b571c:	4808      	ldr	r0, [pc, #32]	; (b5740 <module_user_init_hook+0x5c>)
   b571e:	f7ff fd3b 	bl	b5198 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5726:	4807      	ldr	r0, [pc, #28]	; (b5744 <module_user_init_hook+0x60>)
   b5728:	2100      	movs	r1, #0
   b572a:	f7ff bc8f 	b.w	b504c <system_ctrl_set_app_request_handler>
   b572e:	bf00      	nop
   b5730:	000b5611 	.word	0x000b5611
   b5734:	2003f408 	.word	0x2003f408
   b5738:	9a271c1e 	.word	0x9a271c1e
   b573c:	2003e6ec 	.word	0x2003e6ec
   b5740:	00000000 	.word	0x00000000
   b5744:	000b56ad 	.word	0x000b56ad

000b5748 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5748:	4770      	bx	lr

000b574a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b574a:	2000      	movs	r0, #0
   b574c:	4770      	bx	lr

000b574e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b574e:	b510      	push	{r4, lr}
   b5750:	2110      	movs	r1, #16
   b5752:	4604      	mov	r4, r0
   b5754:	f7fe fca3 	bl	b409e <_ZdlPvj>
   b5758:	4620      	mov	r0, r4
   b575a:	bd10      	pop	{r4, pc}

000b575c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b575c:	b508      	push	{r3, lr}
      { delete this; }
   b575e:	f7ff fff6 	bl	b574e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b5762:	bd08      	pop	{r3, pc}

000b5764 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5764:	b530      	push	{r4, r5, lr}
        type_(type) {
   b5766:	2200      	movs	r2, #0
   b5768:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b576c:	6002      	str	r2, [r0, #0]
   b576e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5770:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b5772:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5774:	680c      	ldr	r4, [r1, #0]
   b5776:	8085      	strh	r5, [r0, #4]
   b5778:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b577a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b577c:	bd30      	pop	{r4, r5, pc}

000b577e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b577e:	b510      	push	{r4, lr}
   b5780:	4604      	mov	r4, r0
    free((void*)msg_);
   b5782:	6800      	ldr	r0, [r0, #0]
   b5784:	f7ff fd20 	bl	b51c8 <free>
}
   b5788:	4620      	mov	r0, r4
   b578a:	bd10      	pop	{r4, pc}

000b578c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b578c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b578e:	68c4      	ldr	r4, [r0, #12]
   b5790:	b1f4      	cbz	r4, b57d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b5792:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5794:	2b02      	cmp	r3, #2
   b5796:	d103      	bne.n	b57a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5798:	f104 000c 	add.w	r0, r4, #12
   b579c:	f7ff ffef 	bl	b577e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b57a0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b57a2:	b135      	cbz	r5, b57b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b57a4:	4628      	mov	r0, r5
   b57a6:	f7fe fce5 	bl	b4174 <_ZNSt14_Function_baseD1Ev>
   b57aa:	2110      	movs	r1, #16
   b57ac:	4628      	mov	r0, r5
   b57ae:	f7fe fc76 	bl	b409e <_ZdlPvj>
   b57b2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b57b4:	b135      	cbz	r5, b57c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b57b6:	4628      	mov	r0, r5
   b57b8:	f7fe fcdc 	bl	b4174 <_ZNSt14_Function_baseD1Ev>
   b57bc:	2110      	movs	r1, #16
   b57be:	4628      	mov	r0, r5
   b57c0:	f7fe fc6d 	bl	b409e <_ZdlPvj>
   b57c4:	4620      	mov	r0, r4
   b57c6:	2114      	movs	r1, #20
   b57c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b57cc:	f7fe bc67 	b.w	b409e <_ZdlPvj>
   b57d0:	bd38      	pop	{r3, r4, r5, pc}

000b57d2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b57d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b57d4:	230c      	movs	r3, #12
   b57d6:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b57da:	6803      	ldr	r3, [r0, #0]
   b57dc:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b57e0:	7a03      	ldrb	r3, [r0, #8]
   b57e2:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b57e6:	6843      	ldr	r3, [r0, #4]
   b57e8:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b57ea:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b57ec:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b57ee:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b57f2:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b57f4:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b57f8:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b57fc:	f7ff fcd4 	bl	b51a8 <spark_cloud_disconnect>
}
   b5800:	b005      	add	sp, #20
   b5802:	f85d fb04 	ldr.w	pc, [sp], #4

000b5806 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5806:	680b      	ldr	r3, [r1, #0]
   b5808:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b580a:	684b      	ldr	r3, [r1, #4]
   b580c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b580e:	b113      	cbz	r3, b5816 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5810:	685a      	ldr	r2, [r3, #4]
   b5812:	3201      	adds	r2, #1
   b5814:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5816:	4770      	bx	lr

000b5818 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b5818:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b581a:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b581c:	4668      	mov	r0, sp
   b581e:	460d      	mov	r5, r1
   b5820:	f7ff fff1 	bl	b5806 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5824:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5826:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5828:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b582a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b582c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b582e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5830:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b5832:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5834:	f7fe fce5 	bl	b4202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b5838:	b135      	cbz	r5, b5848 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b583a:	1d28      	adds	r0, r5, #4
   b583c:	f7fe fce1 	bl	b4202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5840:	2108      	movs	r1, #8
   b5842:	4628      	mov	r0, r5
   b5844:	f7fe fc2b 	bl	b409e <_ZdlPvj>
        return p;
    }
   b5848:	4620      	mov	r0, r4
   b584a:	b003      	add	sp, #12
   b584c:	bd30      	pop	{r4, r5, pc}

000b584e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b584e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5850:	b510      	push	{r4, lr}
      if (_M_empty())
   b5852:	b90a      	cbnz	r2, b5858 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5854:	f000 fdf4 	bl	b6440 <_ZSt25__throw_bad_function_callv>
    }
   b5858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b585c:	68c3      	ldr	r3, [r0, #12]
   b585e:	4718      	bx	r3

000b5860 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5860:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5862:	6800      	ldr	r0, [r0, #0]
   b5864:	f100 0110 	add.w	r1, r0, #16
   b5868:	f7ff fff1 	bl	b584e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b586c:	bd08      	pop	{r3, pc}

000b586e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b586e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5870:	b510      	push	{r4, lr}
      if (_M_empty())
   b5872:	b90a      	cbnz	r2, b5878 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5874:	f000 fde4 	bl	b6440 <_ZSt25__throw_bad_function_callv>
    }
   b5878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b587c:	68c3      	ldr	r3, [r0, #12]
   b587e:	4718      	bx	r3

000b5880 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5880:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5882:	6800      	ldr	r0, [r0, #0]
   b5884:	f100 0110 	add.w	r1, r0, #16
   b5888:	f7ff fff1 	bl	b586e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b588c:	bd08      	pop	{r3, pc}
	...

000b5890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5890:	b538      	push	{r3, r4, r5, lr}
   b5892:	2300      	movs	r3, #0
   b5894:	4604      	mov	r4, r0
   b5896:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5898:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b589a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b589c:	f7fe fbfb 	bl	b4096 <_Znwj>
   b58a0:	b128      	cbz	r0, b58ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b58a2:	2301      	movs	r3, #1
   b58a4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b58a8:	4b02      	ldr	r3, [pc, #8]	; (b58b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b58aa:	6003      	str	r3, [r0, #0]
   b58ac:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b58ae:	6020      	str	r0, [r4, #0]
	}
   b58b0:	4620      	mov	r0, r4
   b58b2:	bd38      	pop	{r3, r4, r5, pc}
   b58b4:	000b8ed0 	.word	0x000b8ed0

000b58b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b58b8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b58ba:	2300      	movs	r3, #0
   b58bc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b58be:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b58c0:	4604      	mov	r4, r0
   b58c2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b58c4:	b12b      	cbz	r3, b58d2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b58c6:	2202      	movs	r2, #2
   b58c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b58ca:	68eb      	ldr	r3, [r5, #12]
   b58cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b58ce:	68ab      	ldr	r3, [r5, #8]
   b58d0:	60a3      	str	r3, [r4, #8]
    }
   b58d2:	4620      	mov	r0, r4
   b58d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b58d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b58d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b58da:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b58dc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b58de:	4668      	mov	r0, sp
   b58e0:	f7ff ff40 	bl	b5764 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b58e4:	f04f 0302 	mov.w	r3, #2
   b58e8:	e8d4 2f4f 	ldrexb	r2, [r4]
   b58ec:	2a00      	cmp	r2, #0
   b58ee:	d103      	bne.n	b58f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b58f0:	e8c4 3f41 	strexb	r1, r3, [r4]
   b58f4:	2900      	cmp	r1, #0
   b58f6:	d1f7      	bne.n	b58e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b58f8:	d125      	bne.n	b5946 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b58fa:	f104 050c 	add.w	r5, r4, #12
   b58fe:	4669      	mov	r1, sp
   b5900:	4628      	mov	r0, r5
   b5902:	f7ff ff2f 	bl	b5764 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b5906:	f3bf 8f5b 	dmb	ish
   b590a:	2301      	movs	r3, #1
   b590c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b590e:	2000      	movs	r0, #0
   b5910:	f104 0308 	add.w	r3, r4, #8
   b5914:	f3bf 8f5b 	dmb	ish
   b5918:	e853 6f00 	ldrex	r6, [r3]
   b591c:	e843 0200 	strex	r2, r0, [r3]
   b5920:	2a00      	cmp	r2, #0
   b5922:	d1f9      	bne.n	b5918 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5924:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5928:	b16e      	cbz	r6, b5946 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b592a:	f7ff fb77 	bl	b501c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b592e:	b178      	cbz	r0, b5950 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5930:	4629      	mov	r1, r5
   b5932:	4630      	mov	r0, r6
   b5934:	f7ff ff8b 	bl	b584e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5938:	4630      	mov	r0, r6
   b593a:	f7fe fc1b 	bl	b4174 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b593e:	2110      	movs	r1, #16
   b5940:	4630      	mov	r0, r6
   b5942:	f7fe fbac 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b5946:	4668      	mov	r0, sp
   b5948:	f7ff ff19 	bl	b577e <_ZN8particle5ErrorD1Ev>
    }
   b594c:	b009      	add	sp, #36	; 0x24
   b594e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5950:	4631      	mov	r1, r6
   b5952:	a802      	add	r0, sp, #8
   b5954:	f7ff ffb0 	bl	b58b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5958:	68e0      	ldr	r0, [r4, #12]
   b595a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b595e:	b108      	cbz	r0, b5964 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5960:	f001 fab4 	bl	b6ecc <strdup>
        type_(type) {
   b5964:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5966:	2010      	movs	r0, #16
   b5968:	f8ad 501c 	strh.w	r5, [sp, #28]
   b596c:	f7fe fb93 	bl	b4096 <_Znwj>
   b5970:	4605      	mov	r5, r0
   b5972:	b1e8      	cbz	r0, b59b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5974:	2700      	movs	r7, #0
   b5976:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5978:	2018      	movs	r0, #24
   b597a:	f7fe fb8c 	bl	b4096 <_Znwj>
   b597e:	4604      	mov	r4, r0
   b5980:	b188      	cbz	r0, b59a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5982:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5984:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5986:	a802      	add	r0, sp, #8
   b5988:	f7ff fdb6 	bl	b54f8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b598c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b598e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5990:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5992:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5994:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5996:	a906      	add	r1, sp, #24
   b5998:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b599a:	60e3      	str	r3, [r4, #12]
   b599c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b59a0:	9205      	str	r2, [sp, #20]
   b59a2:	f7ff fedf 	bl	b5764 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b59a6:	4b08      	ldr	r3, [pc, #32]	; (b59c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b59a8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b59aa:	4b08      	ldr	r3, [pc, #32]	; (b59cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b59ac:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b59ae:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b59b0:	a806      	add	r0, sp, #24
   b59b2:	f7ff fee4 	bl	b577e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b59b6:	a802      	add	r0, sp, #8
   b59b8:	f7fe fbdc 	bl	b4174 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b59bc:	2200      	movs	r2, #0
   b59be:	4629      	mov	r1, r5
   b59c0:	4803      	ldr	r0, [pc, #12]	; (b59d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b59c2:	f7ff fb33 	bl	b502c <application_thread_invoke>
   b59c6:	e7b7      	b.n	b5938 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b59c8:	000b5861 	.word	0x000b5861
   b59cc:	000b5ae5 	.word	0x000b5ae5
   b59d0:	000b5f41 	.word	0x000b5f41

000b59d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b59d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b59d8:	b08b      	sub	sp, #44	; 0x2c
   b59da:	4605      	mov	r5, r0
   b59dc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b59e0:	460f      	mov	r7, r1
   b59e2:	4690      	mov	r8, r2
   b59e4:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b59e6:	f7ff fbbf 	bl	b5168 <spark_cloud_flag_connected>
   b59ea:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b59ec:	4683      	mov	fp, r0
   b59ee:	bb38      	cbnz	r0, b5a40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b59f0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b59f4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b59f6:	a905      	add	r1, sp, #20
   b59f8:	4630      	mov	r0, r6
   b59fa:	f8ad 3018 	strh.w	r3, [sp, #24]
   b59fe:	f7ff feb1 	bl	b5764 <_ZN8particle5ErrorC1EOS0_>
   b5a02:	2014      	movs	r0, #20
   b5a04:	f7fe fb47 	bl	b4096 <_Znwj>
   b5a08:	4604      	mov	r4, r0
   b5a0a:	b148      	cbz	r0, b5a20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5a0c:	2302      	movs	r3, #2
   b5a0e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5a10:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5a12:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5a16:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5a18:	4631      	mov	r1, r6
   b5a1a:	300c      	adds	r0, #12
   b5a1c:	f7ff fea2 	bl	b5764 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5a20:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5a22:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5a24:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5a28:	f7ff ff32 	bl	b5890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5a2c:	4630      	mov	r0, r6
   b5a2e:	f7ff fea6 	bl	b577e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5a32:	a805      	add	r0, sp, #20
   b5a34:	f7ff fea3 	bl	b577e <_ZN8particle5ErrorD1Ev>
}
   b5a38:	4628      	mov	r0, r5
   b5a3a:	b00b      	add	sp, #44	; 0x2c
   b5a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5a40:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b5a42:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5a44:	2014      	movs	r0, #20
   b5a46:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b5a4a:	9307      	str	r3, [sp, #28]
   b5a4c:	f7fe fb23 	bl	b4096 <_Znwj>
   b5a50:	4601      	mov	r1, r0
   b5a52:	b118      	cbz	r0, b5a5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5a54:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5a58:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5a5a:	7044      	strb	r4, [r0, #1]
   b5a5c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5a5e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5a60:	f7ff ff16 	bl	b5890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5a64:	4b1e      	ldr	r3, [pc, #120]	; (b5ae0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b5a66:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5a68:	2008      	movs	r0, #8
   b5a6a:	f7fe fb14 	bl	b4096 <_Znwj>
   b5a6e:	4604      	mov	r4, r0
   b5a70:	b110      	cbz	r0, b5a78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5a72:	a903      	add	r1, sp, #12
   b5a74:	f7ff fec7 	bl	b5806 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5a78:	9600      	str	r6, [sp, #0]
   b5a7a:	fa5f f38a 	uxtb.w	r3, sl
   b5a7e:	464a      	mov	r2, r9
   b5a80:	4641      	mov	r1, r8
   b5a82:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5a84:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5a86:	f7ff fb77 	bl	b5178 <spark_send_event>
   b5a8a:	b9b8      	cbnz	r0, b5abc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5a8c:	9b03      	ldr	r3, [sp, #12]
   b5a8e:	785b      	ldrb	r3, [r3, #1]
   b5a90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5a94:	b993      	cbnz	r3, b5abc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b5a96:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b5a9a:	a905      	add	r1, sp, #20
   b5a9c:	a803      	add	r0, sp, #12
   b5a9e:	9205      	str	r2, [sp, #20]
   b5aa0:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5aa4:	f7ff ff18 	bl	b58d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5aa8:	a805      	add	r0, sp, #20
   b5aaa:	f7ff fe68 	bl	b577e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5aae:	a805      	add	r0, sp, #20
   b5ab0:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5ab2:	f7ff feb1 	bl	b5818 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5ab6:	a806      	add	r0, sp, #24
   b5ab8:	f7fe fba3 	bl	b4202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5abc:	a903      	add	r1, sp, #12
   b5abe:	a805      	add	r0, sp, #20
   b5ac0:	f7ff fea1 	bl	b5806 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5ac4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5ac6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5ac8:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b5aca:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5acc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5ace:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5ad0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5ad2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5ad4:	f7fe fb95 	bl	b4202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5ad8:	a804      	add	r0, sp, #16
   b5ada:	f7fe fb92 	bl	b4202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5ade:	e7ab      	b.n	b5a38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5ae0:	000b5b61 	.word	0x000b5b61

000b5ae4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5ae4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5ae8:	4605      	mov	r5, r0
	switch (__op)
   b5aea:	d103      	bne.n	b5af4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5aec:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5aee:	6003      	str	r3, [r0, #0]
      }
   b5af0:	2000      	movs	r0, #0
   b5af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5af4:	2a02      	cmp	r2, #2
   b5af6:	d010      	beq.n	b5b1a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5af8:	2a03      	cmp	r2, #3
   b5afa:	d1f9      	bne.n	b5af0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5afc:	6804      	ldr	r4, [r0, #0]
   b5afe:	2c00      	cmp	r4, #0
   b5b00:	d0f6      	beq.n	b5af0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5b02:	f104 0010 	add.w	r0, r4, #16
   b5b06:	f7ff fe3a 	bl	b577e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5b0a:	4620      	mov	r0, r4
   b5b0c:	f7fe fb32 	bl	b4174 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5b10:	2118      	movs	r1, #24
   b5b12:	4620      	mov	r0, r4
   b5b14:	f7fe fac3 	bl	b409e <_ZdlPvj>
   b5b18:	e7ea      	b.n	b5af0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5b1a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5b1c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5b1e:	f7fe faba 	bl	b4096 <_Znwj>
   b5b22:	4604      	mov	r4, r0
   b5b24:	b150      	cbz	r0, b5b3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5b26:	4631      	mov	r1, r6
   b5b28:	f7ff fec6 	bl	b58b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5b2c:	6930      	ldr	r0, [r6, #16]
   b5b2e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5b32:	b108      	cbz	r0, b5b38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5b34:	f001 f9ca 	bl	b6ecc <strdup>
        type_(type) {
   b5b38:	6120      	str	r0, [r4, #16]
   b5b3a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5b3c:	602c      	str	r4, [r5, #0]
	}
   b5b3e:	e7d7      	b.n	b5af0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5b40 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5b40:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5b42:	2300      	movs	r3, #0
   b5b44:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5b46:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5b48:	4604      	mov	r4, r0
   b5b4a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5b4c:	b12b      	cbz	r3, b5b5a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5b4e:	2202      	movs	r2, #2
   b5b50:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5b52:	68eb      	ldr	r3, [r5, #12]
   b5b54:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5b56:	68ab      	ldr	r3, [r5, #8]
   b5b58:	60a3      	str	r3, [r4, #8]
    }
   b5b5a:	4620      	mov	r0, r4
   b5b5c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5b60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5b60:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5b62:	b089      	sub	sp, #36	; 0x24
   b5b64:	4604      	mov	r4, r0
   b5b66:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5b68:	a801      	add	r0, sp, #4
   b5b6a:	4611      	mov	r1, r2
   b5b6c:	f7ff fe54 	bl	b5818 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5b70:	b1a4      	cbz	r4, b5b9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5b72:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5b74:	b11d      	cbz	r5, b5b7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b5b76:	4628      	mov	r0, r5
   b5b78:	f001 f9a8 	bl	b6ecc <strdup>
   b5b7c:	4605      	mov	r5, r0
   b5b7e:	a801      	add	r0, sp, #4
   b5b80:	a903      	add	r1, sp, #12
        type_(type) {
   b5b82:	9503      	str	r5, [sp, #12]
   b5b84:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5b88:	f7ff fea6 	bl	b58d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5b8c:	a803      	add	r0, sp, #12
   b5b8e:	f7ff fdf6 	bl	b577e <_ZN8particle5ErrorD1Ev>
   b5b92:	a802      	add	r0, sp, #8
   b5b94:	f7fe fb35 	bl	b4202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5b98:	b009      	add	sp, #36	; 0x24
   b5b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5b9c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5b9e:	2301      	movs	r3, #1
   b5ba0:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5ba4:	2a00      	cmp	r2, #0
   b5ba6:	d103      	bne.n	b5bb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5ba8:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5bac:	2900      	cmp	r1, #0
   b5bae:	d1f7      	bne.n	b5ba0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5bb0:	d1ef      	bne.n	b5b92 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5bb2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5bb4:	f3bf 8f5b 	dmb	ish
   b5bb8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5bba:	1d2b      	adds	r3, r5, #4
   b5bbc:	f3bf 8f5b 	dmb	ish
   b5bc0:	e853 6f00 	ldrex	r6, [r3]
   b5bc4:	e843 4200 	strex	r2, r4, [r3]
   b5bc8:	2a00      	cmp	r2, #0
   b5bca:	d1f9      	bne.n	b5bc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5bcc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5bd0:	2e00      	cmp	r6, #0
   b5bd2:	d0de      	beq.n	b5b92 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5bd4:	4620      	mov	r0, r4
   b5bd6:	f7ff fa21 	bl	b501c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5bda:	4607      	mov	r7, r0
   b5bdc:	b160      	cbz	r0, b5bf8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5bde:	f105 010c 	add.w	r1, r5, #12
   b5be2:	4630      	mov	r0, r6
   b5be4:	f7ff fe43 	bl	b586e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5be8:	4630      	mov	r0, r6
   b5bea:	f7fe fac3 	bl	b4174 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5bee:	2110      	movs	r1, #16
   b5bf0:	4630      	mov	r0, r6
   b5bf2:	f7fe fa54 	bl	b409e <_ZdlPvj>
   b5bf6:	e7cc      	b.n	b5b92 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5bf8:	4631      	mov	r1, r6
   b5bfa:	a803      	add	r0, sp, #12
   b5bfc:	f7ff ffa0 	bl	b5b40 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5c00:	7b2b      	ldrb	r3, [r5, #12]
   b5c02:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5c06:	2010      	movs	r0, #16
   b5c08:	f7fe fa45 	bl	b4096 <_Znwj>
   b5c0c:	4605      	mov	r5, r0
   b5c0e:	b1d0      	cbz	r0, b5c46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5c10:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5c12:	2014      	movs	r0, #20
   b5c14:	f7fe fa3f 	bl	b4096 <_Znwj>
   b5c18:	4604      	mov	r4, r0
   b5c1a:	b178      	cbz	r0, b5c3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5c1c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5c1e:	4601      	mov	r1, r0
   b5c20:	a803      	add	r0, sp, #12
   b5c22:	f7ff fc69 	bl	b54f8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5c26:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5c28:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5c2a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5c2c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5c2e:	9205      	str	r2, [sp, #20]
   b5c30:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5c32:	60e3      	str	r3, [r4, #12]
   b5c34:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5c38:	9206      	str	r2, [sp, #24]
   b5c3a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5c3c:	4b06      	ldr	r3, [pc, #24]	; (b5c58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b5c3e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5c40:	4b06      	ldr	r3, [pc, #24]	; (b5c5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5c42:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5c44:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5c46:	a803      	add	r0, sp, #12
   b5c48:	f7fe fa94 	bl	b4174 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5c4c:	2200      	movs	r2, #0
   b5c4e:	4629      	mov	r1, r5
   b5c50:	4803      	ldr	r0, [pc, #12]	; (b5c60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5c52:	f7ff f9eb 	bl	b502c <application_thread_invoke>
   b5c56:	e7c7      	b.n	b5be8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5c58:	000b5881 	.word	0x000b5881
   b5c5c:	000b5c65 	.word	0x000b5c65
   b5c60:	000b5f41 	.word	0x000b5f41

000b5c64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5c64:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5c66:	b570      	push	{r4, r5, r6, lr}
   b5c68:	4604      	mov	r4, r0
	switch (__op)
   b5c6a:	d103      	bne.n	b5c74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5c6c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5c6e:	6003      	str	r3, [r0, #0]
      }
   b5c70:	2000      	movs	r0, #0
   b5c72:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5c74:	2a02      	cmp	r2, #2
   b5c76:	d00c      	beq.n	b5c92 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5c78:	2a03      	cmp	r2, #3
   b5c7a:	d1f9      	bne.n	b5c70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5c7c:	6804      	ldr	r4, [r0, #0]
   b5c7e:	2c00      	cmp	r4, #0
   b5c80:	d0f6      	beq.n	b5c70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5c82:	4620      	mov	r0, r4
   b5c84:	f7fe fa76 	bl	b4174 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5c88:	2114      	movs	r1, #20
   b5c8a:	4620      	mov	r0, r4
   b5c8c:	f7fe fa07 	bl	b409e <_ZdlPvj>
   b5c90:	e7ee      	b.n	b5c70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5c92:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5c94:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5c96:	f7fe f9fe 	bl	b4096 <_Znwj>
   b5c9a:	4605      	mov	r5, r0
   b5c9c:	b120      	cbz	r0, b5ca8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5c9e:	4631      	mov	r1, r6
   b5ca0:	f7ff ff4e 	bl	b5b40 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5ca4:	7c33      	ldrb	r3, [r6, #16]
   b5ca6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5ca8:	6025      	str	r5, [r4, #0]
	}
   b5caa:	e7e1      	b.n	b5c70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5cac <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5cac:	4770      	bx	lr

000b5cae <_ZN9IPAddressD0Ev>:
   b5cae:	b510      	push	{r4, lr}
   b5cb0:	2118      	movs	r1, #24
   b5cb2:	4604      	mov	r4, r0
   b5cb4:	f7fe f9f3 	bl	b409e <_ZdlPvj>
   b5cb8:	4620      	mov	r0, r4
   b5cba:	bd10      	pop	{r4, pc}

000b5cbc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5cbe:	7d03      	ldrb	r3, [r0, #20]
   b5cc0:	2b06      	cmp	r3, #6
{
   b5cc2:	b08d      	sub	sp, #52	; 0x34
   b5cc4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5cc6:	f100 0704 	add.w	r7, r0, #4
   b5cca:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5cce:	d012      	beq.n	b5cf6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5cd0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5cd4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5cd8:	220a      	movs	r2, #10
   b5cda:	4630      	mov	r0, r6
   b5cdc:	f7ff fc51 	bl	b5582 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5ce0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5ce2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5ce4:	d019      	beq.n	b5d1a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5ce6:	2c00      	cmp	r4, #0
   b5ce8:	d0f4      	beq.n	b5cd4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5cea:	212e      	movs	r1, #46	; 0x2e
   b5cec:	4630      	mov	r0, r6
   b5cee:	f7ff fc45 	bl	b557c <_ZN5Print5printEc>
   b5cf2:	4404      	add	r4, r0
   b5cf4:	e7ee      	b.n	b5cd4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5cf6:	232f      	movs	r3, #47	; 0x2f
   b5cf8:	466a      	mov	r2, sp
   b5cfa:	4639      	mov	r1, r7
   b5cfc:	200a      	movs	r0, #10
		buf[0] = 0;
   b5cfe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5d02:	f7ff f881 	bl	b4e08 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5d06:	4668      	mov	r0, sp
   b5d08:	f001 f8fd 	bl	b6f06 <strlen>
   b5d0c:	6833      	ldr	r3, [r6, #0]
   b5d0e:	4602      	mov	r2, r0
   b5d10:	68db      	ldr	r3, [r3, #12]
   b5d12:	4669      	mov	r1, sp
   b5d14:	4630      	mov	r0, r6
   b5d16:	4798      	blx	r3
   b5d18:	4604      	mov	r4, r0
    }
    return n;
}
   b5d1a:	4620      	mov	r0, r4
   b5d1c:	b00d      	add	sp, #52	; 0x34
   b5d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5d20 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5d20:	b510      	push	{r4, lr}
   b5d22:	4b05      	ldr	r3, [pc, #20]	; (b5d38 <_ZN9IPAddressC1Ev+0x18>)
   b5d24:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5d26:	2211      	movs	r2, #17
   b5d28:	f840 3b04 	str.w	r3, [r0], #4
   b5d2c:	2100      	movs	r1, #0
   b5d2e:	f001 f88e 	bl	b6e4e <memset>
}
   b5d32:	4620      	mov	r0, r4
   b5d34:	bd10      	pop	{r4, pc}
   b5d36:	bf00      	nop
   b5d38:	000b8eec 	.word	0x000b8eec

000b5d3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5d3c:	4603      	mov	r3, r0
   b5d3e:	4a07      	ldr	r2, [pc, #28]	; (b5d5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5d40:	b510      	push	{r4, lr}
   b5d42:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5d46:	f101 0210 	add.w	r2, r1, #16
   b5d4a:	f851 4b04 	ldr.w	r4, [r1], #4
   b5d4e:	f843 4b04 	str.w	r4, [r3], #4
   b5d52:	4291      	cmp	r1, r2
   b5d54:	d1f9      	bne.n	b5d4a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5d56:	780a      	ldrb	r2, [r1, #0]
   b5d58:	701a      	strb	r2, [r3, #0]
}
   b5d5a:	bd10      	pop	{r4, pc}
   b5d5c:	000b8eec 	.word	0x000b8eec

000b5d60 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5d60:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5d62:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5d66:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5d6a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5d6e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5d72:	2304      	movs	r3, #4
   b5d74:	6041      	str	r1, [r0, #4]
   b5d76:	7503      	strb	r3, [r0, #20]
}
   b5d78:	bd10      	pop	{r4, pc}
	...

000b5d7c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5d7c:	b507      	push	{r0, r1, r2, lr}
   b5d7e:	4b06      	ldr	r3, [pc, #24]	; (b5d98 <_ZN9IPAddressC1EPKh+0x1c>)
   b5d80:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5d82:	78cb      	ldrb	r3, [r1, #3]
   b5d84:	9300      	str	r3, [sp, #0]
   b5d86:	788b      	ldrb	r3, [r1, #2]
   b5d88:	784a      	ldrb	r2, [r1, #1]
   b5d8a:	7809      	ldrb	r1, [r1, #0]
   b5d8c:	f7ff ffe8 	bl	b5d60 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5d90:	b003      	add	sp, #12
   b5d92:	f85d fb04 	ldr.w	pc, [sp], #4
   b5d96:	bf00      	nop
   b5d98:	000b8eec 	.word	0x000b8eec

000b5d9c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5d9c:	7441      	strb	r1, [r0, #17]
}
   b5d9e:	4770      	bx	lr

000b5da0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5da0:	4770      	bx	lr

000b5da2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5da2:	4770      	bx	lr

000b5da4 <_ZN9USBSerial4readEv>:
{
   b5da4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5da6:	2100      	movs	r1, #0
   b5da8:	7c00      	ldrb	r0, [r0, #16]
   b5daa:	f7ff f8f5 	bl	b4f98 <HAL_USB_USART_Receive_Data>
}
   b5dae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5db2:	bd08      	pop	{r3, pc}

000b5db4 <_ZN9USBSerial4peekEv>:
{
   b5db4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5db6:	2101      	movs	r1, #1
   b5db8:	7c00      	ldrb	r0, [r0, #16]
   b5dba:	f7ff f8ed 	bl	b4f98 <HAL_USB_USART_Receive_Data>
}
   b5dbe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5dc2:	bd08      	pop	{r3, pc}

000b5dc4 <_ZN9USBSerial17availableForWriteEv>:
{
   b5dc4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5dc6:	7c00      	ldrb	r0, [r0, #16]
   b5dc8:	f7ff f8de 	bl	b4f88 <HAL_USB_USART_Available_Data_For_Write>
}
   b5dcc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5dd0:	bd08      	pop	{r3, pc}

000b5dd2 <_ZN9USBSerial9availableEv>:
{
   b5dd2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5dd4:	7c00      	ldrb	r0, [r0, #16]
   b5dd6:	f7ff f8cf 	bl	b4f78 <HAL_USB_USART_Available_Data>
}
   b5dda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5dde:	bd08      	pop	{r3, pc}

000b5de0 <_ZN9USBSerial5writeEh>:
{
   b5de0:	b513      	push	{r0, r1, r4, lr}
   b5de2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5de4:	7c00      	ldrb	r0, [r0, #16]
{
   b5de6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5de8:	f7ff f8ce 	bl	b4f88 <HAL_USB_USART_Available_Data_For_Write>
   b5dec:	2800      	cmp	r0, #0
   b5dee:	9901      	ldr	r1, [sp, #4]
   b5df0:	dc01      	bgt.n	b5df6 <_ZN9USBSerial5writeEh+0x16>
   b5df2:	7c60      	ldrb	r0, [r4, #17]
   b5df4:	b120      	cbz	r0, b5e00 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5df6:	7c20      	ldrb	r0, [r4, #16]
   b5df8:	f7ff f8d6 	bl	b4fa8 <HAL_USB_USART_Send_Data>
   b5dfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5e00:	b002      	add	sp, #8
   b5e02:	bd10      	pop	{r4, pc}

000b5e04 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5e04:	7c00      	ldrb	r0, [r0, #16]
   b5e06:	f7ff b8d7 	b.w	b4fb8 <HAL_USB_USART_Flush_Data>

000b5e0a <_ZN9USBSerialD0Ev>:
   b5e0a:	b510      	push	{r4, lr}
   b5e0c:	2114      	movs	r1, #20
   b5e0e:	4604      	mov	r4, r0
   b5e10:	f7fe f945 	bl	b409e <_ZdlPvj>
   b5e14:	4620      	mov	r0, r4
   b5e16:	bd10      	pop	{r4, pc}

000b5e18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5e18:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5e1e:	4604      	mov	r4, r0
   b5e20:	4608      	mov	r0, r1
   b5e22:	2100      	movs	r1, #0
   b5e24:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5e28:	4b04      	ldr	r3, [pc, #16]	; (b5e3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5e2a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5e2c:	2301      	movs	r3, #1
  _serial = serial;
   b5e2e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5e30:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5e32:	4611      	mov	r1, r2
   b5e34:	f7ff f898 	bl	b4f68 <HAL_USB_USART_Init>
}
   b5e38:	4620      	mov	r0, r4
   b5e3a:	bd10      	pop	{r4, pc}
   b5e3c:	000b8f00 	.word	0x000b8f00

000b5e40 <_Z19acquireSerialBufferv>:
{
   b5e40:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5e42:	2214      	movs	r2, #20
{
   b5e44:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5e46:	2100      	movs	r1, #0
   b5e48:	f001 f801 	bl	b6e4e <memset>
}
   b5e4c:	4620      	mov	r0, r4
   b5e4e:	bd10      	pop	{r4, pc}

000b5e50 <_Z16_fetch_usbserialv>:
{
   b5e50:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5e52:	4c0f      	ldr	r4, [pc, #60]	; (b5e90 <_Z16_fetch_usbserialv+0x40>)
{
   b5e54:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5e56:	a803      	add	r0, sp, #12
   b5e58:	f7ff fff2 	bl	b5e40 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5e5c:	7821      	ldrb	r1, [r4, #0]
   b5e5e:	f3bf 8f5b 	dmb	ish
   b5e62:	f011 0101 	ands.w	r1, r1, #1
   b5e66:	d10f      	bne.n	b5e88 <_Z16_fetch_usbserialv+0x38>
   b5e68:	4620      	mov	r0, r4
   b5e6a:	9101      	str	r1, [sp, #4]
   b5e6c:	f7fe f919 	bl	b40a2 <__cxa_guard_acquire>
   b5e70:	9901      	ldr	r1, [sp, #4]
   b5e72:	b148      	cbz	r0, b5e88 <_Z16_fetch_usbserialv+0x38>
   b5e74:	aa03      	add	r2, sp, #12
   b5e76:	4807      	ldr	r0, [pc, #28]	; (b5e94 <_Z16_fetch_usbserialv+0x44>)
   b5e78:	f7ff ffce 	bl	b5e18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5e7c:	4620      	mov	r0, r4
   b5e7e:	f7fe f915 	bl	b40ac <__cxa_guard_release>
   b5e82:	4805      	ldr	r0, [pc, #20]	; (b5e98 <_Z16_fetch_usbserialv+0x48>)
   b5e84:	f000 ffcc 	bl	b6e20 <atexit>
	return _usbserial;
}
   b5e88:	4802      	ldr	r0, [pc, #8]	; (b5e94 <_Z16_fetch_usbserialv+0x44>)
   b5e8a:	b008      	add	sp, #32
   b5e8c:	bd10      	pop	{r4, pc}
   b5e8e:	bf00      	nop
   b5e90:	2003e6f4 	.word	0x2003e6f4
   b5e94:	2003e6f8 	.word	0x2003e6f8
   b5e98:	000b5da1 	.word	0x000b5da1

000b5e9c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5e9c:	4770      	bx	lr

000b5e9e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5e9e:	7441      	strb	r1, [r0, #17]
}
   b5ea0:	4770      	bx	lr

000b5ea2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5ea2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5ea4:	7c00      	ldrb	r0, [r0, #16]
   b5ea6:	f7fe ffe7 	bl	b4e78 <hal_usart_available_data_for_write>
}
   b5eaa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5eae:	bd08      	pop	{r3, pc}

000b5eb0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5eb0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5eb2:	7c00      	ldrb	r0, [r0, #16]
   b5eb4:	f7fe ffb8 	bl	b4e28 <hal_usart_available>
}
   b5eb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ebc:	bd08      	pop	{r3, pc}

000b5ebe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5ebe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5ec0:	7c00      	ldrb	r0, [r0, #16]
   b5ec2:	f7fe ffc1 	bl	b4e48 <hal_usart_peek>
}
   b5ec6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5eca:	bd08      	pop	{r3, pc}

000b5ecc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5ecc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5ece:	7c00      	ldrb	r0, [r0, #16]
   b5ed0:	f7fe ffb2 	bl	b4e38 <hal_usart_read>
}
   b5ed4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5ed8:	bd08      	pop	{r3, pc}

000b5eda <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5eda:	7c00      	ldrb	r0, [r0, #16]
   b5edc:	f7fe bfbc 	b.w	b4e58 <hal_usart_flush>

000b5ee0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ee2:	7c45      	ldrb	r5, [r0, #17]
{
   b5ee4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ee6:	b12d      	cbz	r5, b5ef4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5ee8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5eea:	b003      	add	sp, #12
   b5eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5ef0:	f7fe bf92 	b.w	b4e18 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ef4:	7c00      	ldrb	r0, [r0, #16]
   b5ef6:	9101      	str	r1, [sp, #4]
   b5ef8:	f7fe ffbe 	bl	b4e78 <hal_usart_available_data_for_write>
   b5efc:	2800      	cmp	r0, #0
   b5efe:	9901      	ldr	r1, [sp, #4]
   b5f00:	dcf2      	bgt.n	b5ee8 <_ZN11USARTSerial5writeEh+0x8>
}
   b5f02:	4628      	mov	r0, r5
   b5f04:	b003      	add	sp, #12
   b5f06:	bd30      	pop	{r4, r5, pc}

000b5f08 <_ZN11USARTSerialD0Ev>:
   b5f08:	b510      	push	{r4, lr}
   b5f0a:	2114      	movs	r1, #20
   b5f0c:	4604      	mov	r4, r0
   b5f0e:	f7fe f8c6 	bl	b409e <_ZdlPvj>
   b5f12:	4620      	mov	r0, r4
   b5f14:	bd10      	pop	{r4, pc}
	...

000b5f18 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5f18:	b510      	push	{r4, lr}
   b5f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5f1e:	4604      	mov	r4, r0
   b5f20:	4608      	mov	r0, r1
   b5f22:	4611      	mov	r1, r2
   b5f24:	2200      	movs	r2, #0
   b5f26:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5f2a:	4b04      	ldr	r3, [pc, #16]	; (b5f3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5f2c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5f2e:	2301      	movs	r3, #1
  _serial = serial;
   b5f30:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5f32:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5f34:	f7fe ffa8 	bl	b4e88 <hal_usart_init_ex>
}
   b5f38:	4620      	mov	r0, r4
   b5f3a:	bd10      	pop	{r4, pc}
   b5f3c:	000b8f30 	.word	0x000b8f30

000b5f40 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b5f40:	b510      	push	{r4, lr}
      if (_M_empty())
   b5f42:	6883      	ldr	r3, [r0, #8]
   b5f44:	4604      	mov	r4, r0
   b5f46:	b90b      	cbnz	r3, b5f4c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5f48:	f000 fa7a 	bl	b6440 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5f4c:	68c3      	ldr	r3, [r0, #12]
   b5f4e:	4798      	blx	r3
      if (_M_manager)
   b5f50:	68a3      	ldr	r3, [r4, #8]
   b5f52:	b11b      	cbz	r3, b5f5c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5f54:	2203      	movs	r2, #3
   b5f56:	4621      	mov	r1, r4
   b5f58:	4620      	mov	r0, r4
   b5f5a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b5f5c:	4620      	mov	r0, r4
   b5f5e:	2110      	movs	r1, #16
}
   b5f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5f64:	f7fe b89b 	b.w	b409e <_ZdlPvj>

000b5f68 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5f68:	4770      	bx	lr

000b5f6a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f6c:	4606      	mov	r6, r0
   b5f6e:	4615      	mov	r5, r2
   b5f70:	460c      	mov	r4, r1
   b5f72:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5f74:	42bc      	cmp	r4, r7
   b5f76:	d006      	beq.n	b5f86 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5f78:	6833      	ldr	r3, [r6, #0]
   b5f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5f7e:	689b      	ldr	r3, [r3, #8]
   b5f80:	4630      	mov	r0, r6
   b5f82:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5f84:	e7f6      	b.n	b5f74 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5f86:	4628      	mov	r0, r5
   b5f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5f8a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5f8a:	7c00      	ldrb	r0, [r0, #16]
   b5f8c:	2200      	movs	r2, #0
   b5f8e:	f7fe bf9b 	b.w	b4ec8 <hal_i2c_write>

000b5f92 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5f92:	7c00      	ldrb	r0, [r0, #16]
   b5f94:	2100      	movs	r1, #0
   b5f96:	f7fe bf9f 	b.w	b4ed8 <hal_i2c_available>

000b5f9a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5f9a:	7c00      	ldrb	r0, [r0, #16]
   b5f9c:	2100      	movs	r1, #0
   b5f9e:	f7fe bfa3 	b.w	b4ee8 <hal_i2c_read>

000b5fa2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5fa2:	7c00      	ldrb	r0, [r0, #16]
   b5fa4:	2100      	movs	r1, #0
   b5fa6:	f7fe bfa7 	b.w	b4ef8 <hal_i2c_peek>

000b5faa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5faa:	7c00      	ldrb	r0, [r0, #16]
   b5fac:	2100      	movs	r1, #0
   b5fae:	f7fe bfab 	b.w	b4f08 <hal_i2c_flush>

000b5fb2 <_ZN7TwoWireD0Ev>:
   b5fb2:	b510      	push	{r4, lr}
   b5fb4:	2114      	movs	r1, #20
   b5fb6:	4604      	mov	r4, r0
   b5fb8:	f7fe f871 	bl	b409e <_ZdlPvj>
   b5fbc:	4620      	mov	r0, r4
   b5fbe:	bd10      	pop	{r4, pc}

000b5fc0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5fc0:	b510      	push	{r4, lr}
   b5fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5fc6:	4604      	mov	r4, r0
   b5fc8:	4608      	mov	r0, r1
   b5fca:	2100      	movs	r1, #0
   b5fcc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5fd0:	4b03      	ldr	r3, [pc, #12]	; (b5fe0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b5fd2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5fd4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5fd6:	4611      	mov	r1, r2
   b5fd8:	f7fe ffa6 	bl	b4f28 <hal_i2c_init>
}
   b5fdc:	4620      	mov	r0, r4
   b5fde:	bd10      	pop	{r4, pc}
   b5fe0:	000b8f60 	.word	0x000b8f60

000b5fe4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5fe4:	2300      	movs	r3, #0
   b5fe6:	7c00      	ldrb	r0, [r0, #16]
   b5fe8:	461a      	mov	r2, r3
   b5fea:	4619      	mov	r1, r3
   b5fec:	f7fe bf54 	b.w	b4e98 <hal_i2c_begin>

000b5ff0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5ff0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5ff2:	2200      	movs	r2, #0
   b5ff4:	2314      	movs	r3, #20
   b5ff6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5ffa:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b5ffe:	780b      	ldrb	r3, [r1, #0]
   b6000:	f88d 3008 	strb.w	r3, [sp, #8]
   b6004:	684b      	ldr	r3, [r1, #4]
   b6006:	9303      	str	r3, [sp, #12]
   b6008:	68cb      	ldr	r3, [r1, #12]
   b600a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b600c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b600e:	7a0b      	ldrb	r3, [r1, #8]
   b6010:	9305      	str	r3, [sp, #20]
   b6012:	a901      	add	r1, sp, #4
   b6014:	f7fe ff90 	bl	b4f38 <hal_i2c_request_ex>
}
   b6018:	b007      	add	sp, #28
   b601a:	f85d fb04 	ldr.w	pc, [sp], #4

000b601e <_ZN7TwoWire11requestFromEhjh>:
{
   b601e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6020:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6022:	f88d 1000 	strb.w	r1, [sp]
   b6026:	f04f 0164 	mov.w	r1, #100	; 0x64
   b602a:	9103      	str	r1, [sp, #12]
   b602c:	bf18      	it	ne
   b602e:	2301      	movne	r3, #1
   b6030:	4669      	mov	r1, sp
    size_ = size;
   b6032:	9201      	str	r2, [sp, #4]
   b6034:	f88d 3008 	strb.w	r3, [sp, #8]
   b6038:	f7ff ffda 	bl	b5ff0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b603c:	b005      	add	sp, #20
   b603e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6042 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6042:	2301      	movs	r3, #1
   b6044:	f7ff bfeb 	b.w	b601e <_ZN7TwoWire11requestFromEhjh>

000b6048 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6048:	7c00      	ldrb	r0, [r0, #16]
   b604a:	2200      	movs	r2, #0
   b604c:	f7fe bf2c 	b.w	b4ea8 <hal_i2c_begin_transmission>

000b6050 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6050:	b2c9      	uxtb	r1, r1
   b6052:	f7ff bff9 	b.w	b6048 <_ZN7TwoWire17beginTransmissionEh>

000b6056 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6056:	7c00      	ldrb	r0, [r0, #16]
   b6058:	2200      	movs	r2, #0
   b605a:	f7fe bf2d 	b.w	b4eb8 <hal_i2c_end_transmission>

000b605e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b605e:	2101      	movs	r1, #1
   b6060:	f7ff bff9 	b.w	b6056 <_ZN7TwoWire15endTransmissionEh>

000b6064 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6064:	2200      	movs	r2, #0
   b6066:	6840      	ldr	r0, [r0, #4]
   b6068:	4611      	mov	r1, r2
   b606a:	f7ff b825 	b.w	b50b8 <network_ready>

000b606e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b606e:	2200      	movs	r2, #0
   b6070:	6840      	ldr	r0, [r0, #4]
   b6072:	4611      	mov	r1, r2
   b6074:	f7ff b840 	b.w	b50f8 <network_listening>

000b6078 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6078:	2200      	movs	r2, #0
   b607a:	6840      	ldr	r0, [r0, #4]
   b607c:	4611      	mov	r1, r2
   b607e:	f7ff b853 	b.w	b5128 <network_get_listen_timeout>

000b6082 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6082:	6840      	ldr	r0, [r0, #4]
   b6084:	2200      	movs	r2, #0
   b6086:	f7ff b847 	b.w	b5118 <network_set_listen_timeout>

000b608a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b608a:	6840      	ldr	r0, [r0, #4]
   b608c:	2200      	movs	r2, #0
   b608e:	f081 0101 	eor.w	r1, r1, #1
   b6092:	f7ff b829 	b.w	b50e8 <network_listen>

000b6096 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6096:	2300      	movs	r3, #0
   b6098:	6840      	ldr	r0, [r0, #4]
   b609a:	461a      	mov	r2, r3
   b609c:	4619      	mov	r1, r3
   b609e:	f7ff b81b 	b.w	b50d8 <network_off>

000b60a2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b60a2:	2300      	movs	r3, #0
   b60a4:	6840      	ldr	r0, [r0, #4]
   b60a6:	461a      	mov	r2, r3
   b60a8:	4619      	mov	r1, r3
   b60aa:	f7ff b80d 	b.w	b50c8 <network_on>

000b60ae <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b60ae:	2200      	movs	r2, #0
   b60b0:	6840      	ldr	r0, [r0, #4]
   b60b2:	4611      	mov	r1, r2
   b60b4:	f7fe bff0 	b.w	b5098 <network_connecting>

000b60b8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b60b8:	6840      	ldr	r0, [r0, #4]
   b60ba:	2200      	movs	r2, #0
   b60bc:	2102      	movs	r1, #2
   b60be:	f7fe bff3 	b.w	b50a8 <network_disconnect>

000b60c2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b60c2:	2300      	movs	r3, #0
   b60c4:	6840      	ldr	r0, [r0, #4]
   b60c6:	461a      	mov	r2, r3
   b60c8:	f7fe bfde 	b.w	b5088 <network_connect>

000b60cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b60cc:	4b02      	ldr	r3, [pc, #8]	; (b60d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b60ce:	2204      	movs	r2, #4
   b60d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b60d2:	4a02      	ldr	r2, [pc, #8]	; (b60dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b60d4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b60d6:	4770      	bx	lr
   b60d8:	2003e70c 	.word	0x2003e70c
   b60dc:	000b8f88 	.word	0x000b8f88

000b60e0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b60e0:	2300      	movs	r3, #0
   b60e2:	6840      	ldr	r0, [r0, #4]
   b60e4:	461a      	mov	r2, r3
   b60e6:	f7fe bfcf 	b.w	b5088 <network_connect>

000b60ea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b60ea:	6840      	ldr	r0, [r0, #4]
   b60ec:	2200      	movs	r2, #0
   b60ee:	2102      	movs	r1, #2
   b60f0:	f7fe bfda 	b.w	b50a8 <network_disconnect>

000b60f4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b60f4:	2200      	movs	r2, #0
   b60f6:	6840      	ldr	r0, [r0, #4]
   b60f8:	4611      	mov	r1, r2
   b60fa:	f7fe bfcd 	b.w	b5098 <network_connecting>

000b60fe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b60fe:	2200      	movs	r2, #0
   b6100:	6840      	ldr	r0, [r0, #4]
   b6102:	4611      	mov	r1, r2
   b6104:	f7fe bfd8 	b.w	b50b8 <network_ready>

000b6108 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6108:	2300      	movs	r3, #0
   b610a:	6840      	ldr	r0, [r0, #4]
   b610c:	461a      	mov	r2, r3
   b610e:	4619      	mov	r1, r3
   b6110:	f7fe bfda 	b.w	b50c8 <network_on>

000b6114 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6114:	2300      	movs	r3, #0
   b6116:	6840      	ldr	r0, [r0, #4]
   b6118:	461a      	mov	r2, r3
   b611a:	4619      	mov	r1, r3
   b611c:	f7fe bfdc 	b.w	b50d8 <network_off>

000b6120 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6120:	6840      	ldr	r0, [r0, #4]
   b6122:	2100      	movs	r1, #0
   b6124:	f7ff b808 	b.w	b5138 <network_is_on>

000b6128 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6128:	6840      	ldr	r0, [r0, #4]
   b612a:	2100      	movs	r1, #0
   b612c:	f7ff b80c 	b.w	b5148 <network_is_off>

000b6130 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6130:	6840      	ldr	r0, [r0, #4]
   b6132:	2200      	movs	r2, #0
   b6134:	f081 0101 	eor.w	r1, r1, #1
   b6138:	f7fe bfd6 	b.w	b50e8 <network_listen>

000b613c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b613c:	6840      	ldr	r0, [r0, #4]
   b613e:	2200      	movs	r2, #0
   b6140:	f7fe bfea 	b.w	b5118 <network_set_listen_timeout>

000b6144 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6144:	2200      	movs	r2, #0
   b6146:	6840      	ldr	r0, [r0, #4]
   b6148:	4611      	mov	r1, r2
   b614a:	f7fe bfed 	b.w	b5128 <network_get_listen_timeout>

000b614e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b614e:	2200      	movs	r2, #0
   b6150:	6840      	ldr	r0, [r0, #4]
   b6152:	4611      	mov	r1, r2
   b6154:	f7fe bfd0 	b.w	b50f8 <network_listening>

000b6158 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b615c:	b095      	sub	sp, #84	; 0x54
   b615e:	4614      	mov	r4, r2
   b6160:	460d      	mov	r5, r1
   b6162:	4607      	mov	r7, r0
    IPAddress addr;
   b6164:	f7ff fddc 	bl	b5d20 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6168:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b616a:	221c      	movs	r2, #28
   b616c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b616e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6170:	f000 fe6d 	bl	b6e4e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6174:	2340      	movs	r3, #64	; 0x40
   b6176:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6178:	4620      	mov	r0, r4
   b617a:	466b      	mov	r3, sp
   b617c:	aa0c      	add	r2, sp, #48	; 0x30
   b617e:	2100      	movs	r1, #0
   b6180:	f7fe fdc2 	bl	b4d08 <netdb_getaddrinfo>
    if (!r) {
   b6184:	4604      	mov	r4, r0
   b6186:	2800      	cmp	r0, #0
   b6188:	d14b      	bne.n	b6222 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b618a:	4602      	mov	r2, r0
   b618c:	2101      	movs	r1, #1
   b618e:	6868      	ldr	r0, [r5, #4]
   b6190:	f7fe ff92 	bl	b50b8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6194:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6196:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6198:	4622      	mov	r2, r4
   b619a:	6868      	ldr	r0, [r5, #4]
   b619c:	f7fe ff8c 	bl	b50b8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b61a0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b61a2:	4681      	mov	r9, r0
        bool ok = false;
   b61a4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b61a6:	2e00      	cmp	r6, #0
   b61a8:	d03b      	beq.n	b6222 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b61aa:	2900      	cmp	r1, #0
   b61ac:	d139      	bne.n	b6222 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b61ae:	6873      	ldr	r3, [r6, #4]
   b61b0:	2b02      	cmp	r3, #2
   b61b2:	d003      	beq.n	b61bc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b61b4:	2b0a      	cmp	r3, #10
   b61b6:	d011      	beq.n	b61dc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b61b8:	69f6      	ldr	r6, [r6, #28]
   b61ba:	e7f4      	b.n	b61a6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b61bc:	f1b8 0f00 	cmp.w	r8, #0
   b61c0:	d0fa      	beq.n	b61b8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b61c2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b61c4:	a806      	add	r0, sp, #24
   b61c6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b61c8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b61ca:	f7ff fdd7 	bl	b5d7c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b61ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b61d0:	1d3c      	adds	r4, r7, #4
   b61d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b61d4:	682b      	ldr	r3, [r5, #0]
   b61d6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b61d8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b61da:	e7ed      	b.n	b61b8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b61dc:	f1b9 0f00 	cmp.w	r9, #0
   b61e0:	d0ea      	beq.n	b61b8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b61e2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b61e4:	2210      	movs	r2, #16
   b61e6:	a801      	add	r0, sp, #4
   b61e8:	f000 fe31 	bl	b6e4e <memset>
                    a.v = 6;
   b61ec:	2306      	movs	r3, #6
   b61ee:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b61f2:	ad01      	add	r5, sp, #4
   b61f4:	f104 0308 	add.w	r3, r4, #8
   b61f8:	3418      	adds	r4, #24
   b61fa:	6818      	ldr	r0, [r3, #0]
   b61fc:	6859      	ldr	r1, [r3, #4]
   b61fe:	462a      	mov	r2, r5
   b6200:	c203      	stmia	r2!, {r0, r1}
   b6202:	3308      	adds	r3, #8
   b6204:	42a3      	cmp	r3, r4
   b6206:	4615      	mov	r5, r2
   b6208:	d1f7      	bne.n	b61fa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b620a:	a901      	add	r1, sp, #4
   b620c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b620e:	ad07      	add	r5, sp, #28
   b6210:	f7ff fd94 	bl	b5d3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6216:	1d3c      	adds	r4, r7, #4
   b6218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b621a:	682b      	ldr	r3, [r5, #0]
   b621c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b621e:	4649      	mov	r1, r9
   b6220:	e7ca      	b.n	b61b8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6222:	9800      	ldr	r0, [sp, #0]
   b6224:	f7fe fd68 	bl	b4cf8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6228:	4638      	mov	r0, r7
   b622a:	b015      	add	sp, #84	; 0x54
   b622c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6230 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6230:	4b02      	ldr	r3, [pc, #8]	; (b623c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6232:	4a03      	ldr	r2, [pc, #12]	; (b6240 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6234:	601a      	str	r2, [r3, #0]
   b6236:	2200      	movs	r2, #0
   b6238:	605a      	str	r2, [r3, #4]

} // spark
   b623a:	4770      	bx	lr
   b623c:	2003e714 	.word	0x2003e714
   b6240:	000b8fc4 	.word	0x000b8fc4

000b6244 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6244:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6246:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6248:	d902      	bls.n	b6250 <pinAvailable+0xc>
    return false;
   b624a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b624c:	b002      	add	sp, #8
   b624e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6250:	f1a0 030b 	sub.w	r3, r0, #11
   b6254:	2b02      	cmp	r3, #2
   b6256:	d81a      	bhi.n	b628e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6258:	4c17      	ldr	r4, [pc, #92]	; (b62b8 <pinAvailable+0x74>)
   b625a:	7821      	ldrb	r1, [r4, #0]
   b625c:	f3bf 8f5b 	dmb	ish
   b6260:	f011 0101 	ands.w	r1, r1, #1
   b6264:	d10b      	bne.n	b627e <pinAvailable+0x3a>
   b6266:	4620      	mov	r0, r4
   b6268:	9101      	str	r1, [sp, #4]
   b626a:	f7fd ff1a 	bl	b40a2 <__cxa_guard_acquire>
   b626e:	9901      	ldr	r1, [sp, #4]
   b6270:	b128      	cbz	r0, b627e <pinAvailable+0x3a>
   b6272:	4812      	ldr	r0, [pc, #72]	; (b62bc <pinAvailable+0x78>)
   b6274:	f7ff f846 	bl	b5304 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6278:	4620      	mov	r0, r4
   b627a:	f7fd ff17 	bl	b40ac <__cxa_guard_release>
   b627e:	4b0f      	ldr	r3, [pc, #60]	; (b62bc <pinAvailable+0x78>)
   b6280:	7818      	ldrb	r0, [r3, #0]
   b6282:	f7fe fe69 	bl	b4f58 <hal_spi_is_enabled>
   b6286:	2800      	cmp	r0, #0
   b6288:	d1df      	bne.n	b624a <pinAvailable+0x6>
  return true; // 'pin' is available
   b628a:	2001      	movs	r0, #1
   b628c:	e7de      	b.n	b624c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b628e:	2801      	cmp	r0, #1
   b6290:	d809      	bhi.n	b62a6 <pinAvailable+0x62>
   b6292:	f000 f8ad 	bl	b63f0 <_Z19__fetch_global_Wirev>
   b6296:	2100      	movs	r1, #0
   b6298:	7c00      	ldrb	r0, [r0, #16]
   b629a:	f7fe fe3d 	bl	b4f18 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b629e:	f080 0001 	eor.w	r0, r0, #1
   b62a2:	b2c0      	uxtb	r0, r0
   b62a4:	e7d2      	b.n	b624c <pinAvailable+0x8>
   b62a6:	3809      	subs	r0, #9
   b62a8:	2801      	cmp	r0, #1
   b62aa:	d8ee      	bhi.n	b628a <pinAvailable+0x46>
   b62ac:	f000 f864 	bl	b6378 <_Z22__fetch_global_Serial1v>
   b62b0:	7c00      	ldrb	r0, [r0, #16]
   b62b2:	f7fe fdd9 	bl	b4e68 <hal_usart_is_enabled>
   b62b6:	e7f2      	b.n	b629e <pinAvailable+0x5a>
   b62b8:	2003e71c 	.word	0x2003e71c
   b62bc:	2003e720 	.word	0x2003e720

000b62c0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b62c0:	2823      	cmp	r0, #35	; 0x23
{
   b62c2:	b538      	push	{r3, r4, r5, lr}
   b62c4:	4604      	mov	r4, r0
   b62c6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b62c8:	d80a      	bhi.n	b62e0 <pinMode+0x20>
   b62ca:	29ff      	cmp	r1, #255	; 0xff
   b62cc:	d008      	beq.n	b62e0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b62ce:	f7ff ffb9 	bl	b6244 <pinAvailable>
   b62d2:	b128      	cbz	r0, b62e0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b62d4:	4629      	mov	r1, r5
   b62d6:	4620      	mov	r0, r4
}
   b62d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b62dc:	f7fe bd24 	b.w	b4d28 <HAL_Pin_Mode>
}
   b62e0:	bd38      	pop	{r3, r4, r5, pc}

000b62e2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b62e2:	b538      	push	{r3, r4, r5, lr}
   b62e4:	4604      	mov	r4, r0
   b62e6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b62e8:	f7fe fd26 	bl	b4d38 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b62ec:	28ff      	cmp	r0, #255	; 0xff
   b62ee:	d010      	beq.n	b6312 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b62f0:	2806      	cmp	r0, #6
   b62f2:	d804      	bhi.n	b62fe <digitalWrite+0x1c>
   b62f4:	234d      	movs	r3, #77	; 0x4d
   b62f6:	fa23 f000 	lsr.w	r0, r3, r0
   b62fa:	07c3      	lsls	r3, r0, #31
   b62fc:	d409      	bmi.n	b6312 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b62fe:	4620      	mov	r0, r4
   b6300:	f7ff ffa0 	bl	b6244 <pinAvailable>
   b6304:	b128      	cbz	r0, b6312 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6306:	4629      	mov	r1, r5
   b6308:	4620      	mov	r0, r4
}
   b630a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b630e:	f7fe bd1b 	b.w	b4d48 <HAL_GPIO_Write>
}
   b6312:	bd38      	pop	{r3, r4, r5, pc}

000b6314 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b6314:	280d      	cmp	r0, #13
{
   b6316:	b510      	push	{r4, lr}
   b6318:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b631a:	bf9c      	itt	ls
   b631c:	340e      	addls	r4, #14
   b631e:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b6320:	4620      	mov	r0, r4
   b6322:	f7ff ff8f 	bl	b6244 <pinAvailable>
   b6326:	b150      	cbz	r0, b633e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b6328:	2103      	movs	r1, #3
   b632a:	4620      	mov	r0, r4
   b632c:	f7fe fcf4 	bl	b4d18 <HAL_Validate_Pin_Function>
   b6330:	2803      	cmp	r0, #3
   b6332:	d104      	bne.n	b633e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b6334:	4620      	mov	r0, r4
}
   b6336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b633a:	f7fe bd0d 	b.w	b4d58 <hal_adc_read>
}
   b633e:	2000      	movs	r0, #0
   b6340:	bd10      	pop	{r4, pc}

000b6342 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6342:	4770      	bx	lr

000b6344 <_Z20acquireSerial1Bufferv>:
{
   b6344:	b538      	push	{r3, r4, r5, lr}
   b6346:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6348:	2514      	movs	r5, #20
   b634a:	462a      	mov	r2, r5
   b634c:	2100      	movs	r1, #0
   b634e:	f000 fd7e 	bl	b6e4e <memset>
   b6352:	8025      	strh	r5, [r4, #0]
   b6354:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6356:	4907      	ldr	r1, [pc, #28]	; (b6374 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6358:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b635a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b635c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b635e:	f000 f86d 	bl	b643c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6362:	4904      	ldr	r1, [pc, #16]	; (b6374 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6364:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6366:	4628      	mov	r0, r5
   b6368:	f000 f868 	bl	b643c <_ZnajRKSt9nothrow_t>
    };
   b636c:	60e0      	str	r0, [r4, #12]
}
   b636e:	4620      	mov	r0, r4
   b6370:	bd38      	pop	{r3, r4, r5, pc}
   b6372:	bf00      	nop
   b6374:	000b8ff8 	.word	0x000b8ff8

000b6378 <_Z22__fetch_global_Serial1v>:
{
   b6378:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b637a:	4d0e      	ldr	r5, [pc, #56]	; (b63b4 <_Z22__fetch_global_Serial1v+0x3c>)
   b637c:	7829      	ldrb	r1, [r5, #0]
   b637e:	f3bf 8f5b 	dmb	ish
   b6382:	f011 0401 	ands.w	r4, r1, #1
{
   b6386:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6388:	d111      	bne.n	b63ae <_Z22__fetch_global_Serial1v+0x36>
   b638a:	4628      	mov	r0, r5
   b638c:	f7fd fe89 	bl	b40a2 <__cxa_guard_acquire>
   b6390:	b168      	cbz	r0, b63ae <_Z22__fetch_global_Serial1v+0x36>
   b6392:	a801      	add	r0, sp, #4
   b6394:	f7ff ffd6 	bl	b6344 <_Z20acquireSerial1Bufferv>
   b6398:	aa01      	add	r2, sp, #4
   b639a:	4621      	mov	r1, r4
   b639c:	4806      	ldr	r0, [pc, #24]	; (b63b8 <_Z22__fetch_global_Serial1v+0x40>)
   b639e:	f7ff fdbb 	bl	b5f18 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b63a2:	4628      	mov	r0, r5
   b63a4:	f7fd fe82 	bl	b40ac <__cxa_guard_release>
   b63a8:	4804      	ldr	r0, [pc, #16]	; (b63bc <_Z22__fetch_global_Serial1v+0x44>)
   b63aa:	f000 fd39 	bl	b6e20 <atexit>
    return serial1;
}
   b63ae:	4802      	ldr	r0, [pc, #8]	; (b63b8 <_Z22__fetch_global_Serial1v+0x40>)
   b63b0:	b007      	add	sp, #28
   b63b2:	bd30      	pop	{r4, r5, pc}
   b63b4:	2003e728 	.word	0x2003e728
   b63b8:	2003e72c 	.word	0x2003e72c
   b63bc:	000b6343 	.word	0x000b6343

000b63c0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b63c0:	4770      	bx	lr
	...

000b63c4 <_Z17acquireWireBufferv>:
{
   b63c4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b63c6:	2520      	movs	r5, #32
   b63c8:	2314      	movs	r3, #20
{
   b63ca:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b63cc:	6003      	str	r3, [r0, #0]
   b63ce:	6085      	str	r5, [r0, #8]
   b63d0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b63d2:	4906      	ldr	r1, [pc, #24]	; (b63ec <_Z17acquireWireBufferv+0x28>)
   b63d4:	4628      	mov	r0, r5
   b63d6:	f000 f831 	bl	b643c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b63da:	4904      	ldr	r1, [pc, #16]	; (b63ec <_Z17acquireWireBufferv+0x28>)
	};
   b63dc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b63de:	4628      	mov	r0, r5
   b63e0:	f000 f82c 	bl	b643c <_ZnajRKSt9nothrow_t>
	};
   b63e4:	60e0      	str	r0, [r4, #12]
}
   b63e6:	4620      	mov	r0, r4
   b63e8:	bd38      	pop	{r3, r4, r5, pc}
   b63ea:	bf00      	nop
   b63ec:	000b8ff8 	.word	0x000b8ff8

000b63f0 <_Z19__fetch_global_Wirev>:
{
   b63f0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b63f2:	4d0e      	ldr	r5, [pc, #56]	; (b642c <_Z19__fetch_global_Wirev+0x3c>)
   b63f4:	7829      	ldrb	r1, [r5, #0]
   b63f6:	f3bf 8f5b 	dmb	ish
   b63fa:	f011 0401 	ands.w	r4, r1, #1
{
   b63fe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6400:	d111      	bne.n	b6426 <_Z19__fetch_global_Wirev+0x36>
   b6402:	4628      	mov	r0, r5
   b6404:	f7fd fe4d 	bl	b40a2 <__cxa_guard_acquire>
   b6408:	b168      	cbz	r0, b6426 <_Z19__fetch_global_Wirev+0x36>
   b640a:	a801      	add	r0, sp, #4
   b640c:	f7ff ffda 	bl	b63c4 <_Z17acquireWireBufferv>
   b6410:	aa01      	add	r2, sp, #4
   b6412:	4621      	mov	r1, r4
   b6414:	4806      	ldr	r0, [pc, #24]	; (b6430 <_Z19__fetch_global_Wirev+0x40>)
   b6416:	f7ff fdd3 	bl	b5fc0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b641a:	4628      	mov	r0, r5
   b641c:	f7fd fe46 	bl	b40ac <__cxa_guard_release>
   b6420:	4804      	ldr	r0, [pc, #16]	; (b6434 <_Z19__fetch_global_Wirev+0x44>)
   b6422:	f000 fcfd 	bl	b6e20 <atexit>
	return wire;
}
   b6426:	4802      	ldr	r0, [pc, #8]	; (b6430 <_Z19__fetch_global_Wirev+0x40>)
   b6428:	b007      	add	sp, #28
   b642a:	bd30      	pop	{r4, r5, pc}
   b642c:	2003e744 	.word	0x2003e744
   b6430:	2003e748 	.word	0x2003e748
   b6434:	000b63c1 	.word	0x000b63c1

000b6438 <_ZnwjRKSt9nothrow_t>:
   b6438:	f7fd be2d 	b.w	b4096 <_Znwj>

000b643c <_ZnajRKSt9nothrow_t>:
   b643c:	f7fd be2d 	b.w	b409a <_Znaj>

000b6440 <_ZSt25__throw_bad_function_callv>:
   b6440:	b508      	push	{r3, lr}
   b6442:	f7fe fed9 	bl	b51f8 <abort>
	...

000b6448 <nan>:
   b6448:	ed9f 0b01 	vldr	d0, [pc, #4]	; b6450 <nan+0x8>
   b644c:	4770      	bx	lr
   b644e:	bf00      	nop
   b6450:	00000000 	.word	0x00000000
   b6454:	7ff80000 	.word	0x7ff80000

000b6458 <__aeabi_drsub>:
   b6458:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b645c:	e002      	b.n	b6464 <__adddf3>
   b645e:	bf00      	nop

000b6460 <__aeabi_dsub>:
   b6460:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6464 <__adddf3>:
   b6464:	b530      	push	{r4, r5, lr}
   b6466:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b646a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b646e:	ea94 0f05 	teq	r4, r5
   b6472:	bf08      	it	eq
   b6474:	ea90 0f02 	teqeq	r0, r2
   b6478:	bf1f      	itttt	ne
   b647a:	ea54 0c00 	orrsne.w	ip, r4, r0
   b647e:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6482:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6486:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b648a:	f000 80e2 	beq.w	b6652 <__adddf3+0x1ee>
   b648e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6492:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6496:	bfb8      	it	lt
   b6498:	426d      	neglt	r5, r5
   b649a:	dd0c      	ble.n	b64b6 <__adddf3+0x52>
   b649c:	442c      	add	r4, r5
   b649e:	ea80 0202 	eor.w	r2, r0, r2
   b64a2:	ea81 0303 	eor.w	r3, r1, r3
   b64a6:	ea82 0000 	eor.w	r0, r2, r0
   b64aa:	ea83 0101 	eor.w	r1, r3, r1
   b64ae:	ea80 0202 	eor.w	r2, r0, r2
   b64b2:	ea81 0303 	eor.w	r3, r1, r3
   b64b6:	2d36      	cmp	r5, #54	; 0x36
   b64b8:	bf88      	it	hi
   b64ba:	bd30      	pophi	{r4, r5, pc}
   b64bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b64c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b64c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b64c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b64cc:	d002      	beq.n	b64d4 <__adddf3+0x70>
   b64ce:	4240      	negs	r0, r0
   b64d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b64d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b64d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b64dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b64e0:	d002      	beq.n	b64e8 <__adddf3+0x84>
   b64e2:	4252      	negs	r2, r2
   b64e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b64e8:	ea94 0f05 	teq	r4, r5
   b64ec:	f000 80a7 	beq.w	b663e <__adddf3+0x1da>
   b64f0:	f1a4 0401 	sub.w	r4, r4, #1
   b64f4:	f1d5 0e20 	rsbs	lr, r5, #32
   b64f8:	db0d      	blt.n	b6516 <__adddf3+0xb2>
   b64fa:	fa02 fc0e 	lsl.w	ip, r2, lr
   b64fe:	fa22 f205 	lsr.w	r2, r2, r5
   b6502:	1880      	adds	r0, r0, r2
   b6504:	f141 0100 	adc.w	r1, r1, #0
   b6508:	fa03 f20e 	lsl.w	r2, r3, lr
   b650c:	1880      	adds	r0, r0, r2
   b650e:	fa43 f305 	asr.w	r3, r3, r5
   b6512:	4159      	adcs	r1, r3
   b6514:	e00e      	b.n	b6534 <__adddf3+0xd0>
   b6516:	f1a5 0520 	sub.w	r5, r5, #32
   b651a:	f10e 0e20 	add.w	lr, lr, #32
   b651e:	2a01      	cmp	r2, #1
   b6520:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6524:	bf28      	it	cs
   b6526:	f04c 0c02 	orrcs.w	ip, ip, #2
   b652a:	fa43 f305 	asr.w	r3, r3, r5
   b652e:	18c0      	adds	r0, r0, r3
   b6530:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6538:	d507      	bpl.n	b654a <__adddf3+0xe6>
   b653a:	f04f 0e00 	mov.w	lr, #0
   b653e:	f1dc 0c00 	rsbs	ip, ip, #0
   b6542:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6546:	eb6e 0101 	sbc.w	r1, lr, r1
   b654a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b654e:	d31b      	bcc.n	b6588 <__adddf3+0x124>
   b6550:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6554:	d30c      	bcc.n	b6570 <__adddf3+0x10c>
   b6556:	0849      	lsrs	r1, r1, #1
   b6558:	ea5f 0030 	movs.w	r0, r0, rrx
   b655c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6560:	f104 0401 	add.w	r4, r4, #1
   b6564:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6568:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b656c:	f080 809a 	bcs.w	b66a4 <__adddf3+0x240>
   b6570:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6574:	bf08      	it	eq
   b6576:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b657a:	f150 0000 	adcs.w	r0, r0, #0
   b657e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6582:	ea41 0105 	orr.w	r1, r1, r5
   b6586:	bd30      	pop	{r4, r5, pc}
   b6588:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b658c:	4140      	adcs	r0, r0
   b658e:	eb41 0101 	adc.w	r1, r1, r1
   b6592:	3c01      	subs	r4, #1
   b6594:	bf28      	it	cs
   b6596:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b659a:	d2e9      	bcs.n	b6570 <__adddf3+0x10c>
   b659c:	f091 0f00 	teq	r1, #0
   b65a0:	bf04      	itt	eq
   b65a2:	4601      	moveq	r1, r0
   b65a4:	2000      	moveq	r0, #0
   b65a6:	fab1 f381 	clz	r3, r1
   b65aa:	bf08      	it	eq
   b65ac:	3320      	addeq	r3, #32
   b65ae:	f1a3 030b 	sub.w	r3, r3, #11
   b65b2:	f1b3 0220 	subs.w	r2, r3, #32
   b65b6:	da0c      	bge.n	b65d2 <__adddf3+0x16e>
   b65b8:	320c      	adds	r2, #12
   b65ba:	dd08      	ble.n	b65ce <__adddf3+0x16a>
   b65bc:	f102 0c14 	add.w	ip, r2, #20
   b65c0:	f1c2 020c 	rsb	r2, r2, #12
   b65c4:	fa01 f00c 	lsl.w	r0, r1, ip
   b65c8:	fa21 f102 	lsr.w	r1, r1, r2
   b65cc:	e00c      	b.n	b65e8 <__adddf3+0x184>
   b65ce:	f102 0214 	add.w	r2, r2, #20
   b65d2:	bfd8      	it	le
   b65d4:	f1c2 0c20 	rsble	ip, r2, #32
   b65d8:	fa01 f102 	lsl.w	r1, r1, r2
   b65dc:	fa20 fc0c 	lsr.w	ip, r0, ip
   b65e0:	bfdc      	itt	le
   b65e2:	ea41 010c 	orrle.w	r1, r1, ip
   b65e6:	4090      	lslle	r0, r2
   b65e8:	1ae4      	subs	r4, r4, r3
   b65ea:	bfa2      	ittt	ge
   b65ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b65f0:	4329      	orrge	r1, r5
   b65f2:	bd30      	popge	{r4, r5, pc}
   b65f4:	ea6f 0404 	mvn.w	r4, r4
   b65f8:	3c1f      	subs	r4, #31
   b65fa:	da1c      	bge.n	b6636 <__adddf3+0x1d2>
   b65fc:	340c      	adds	r4, #12
   b65fe:	dc0e      	bgt.n	b661e <__adddf3+0x1ba>
   b6600:	f104 0414 	add.w	r4, r4, #20
   b6604:	f1c4 0220 	rsb	r2, r4, #32
   b6608:	fa20 f004 	lsr.w	r0, r0, r4
   b660c:	fa01 f302 	lsl.w	r3, r1, r2
   b6610:	ea40 0003 	orr.w	r0, r0, r3
   b6614:	fa21 f304 	lsr.w	r3, r1, r4
   b6618:	ea45 0103 	orr.w	r1, r5, r3
   b661c:	bd30      	pop	{r4, r5, pc}
   b661e:	f1c4 040c 	rsb	r4, r4, #12
   b6622:	f1c4 0220 	rsb	r2, r4, #32
   b6626:	fa20 f002 	lsr.w	r0, r0, r2
   b662a:	fa01 f304 	lsl.w	r3, r1, r4
   b662e:	ea40 0003 	orr.w	r0, r0, r3
   b6632:	4629      	mov	r1, r5
   b6634:	bd30      	pop	{r4, r5, pc}
   b6636:	fa21 f004 	lsr.w	r0, r1, r4
   b663a:	4629      	mov	r1, r5
   b663c:	bd30      	pop	{r4, r5, pc}
   b663e:	f094 0f00 	teq	r4, #0
   b6642:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6646:	bf06      	itte	eq
   b6648:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b664c:	3401      	addeq	r4, #1
   b664e:	3d01      	subne	r5, #1
   b6650:	e74e      	b.n	b64f0 <__adddf3+0x8c>
   b6652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6656:	bf18      	it	ne
   b6658:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b665c:	d029      	beq.n	b66b2 <__adddf3+0x24e>
   b665e:	ea94 0f05 	teq	r4, r5
   b6662:	bf08      	it	eq
   b6664:	ea90 0f02 	teqeq	r0, r2
   b6668:	d005      	beq.n	b6676 <__adddf3+0x212>
   b666a:	ea54 0c00 	orrs.w	ip, r4, r0
   b666e:	bf04      	itt	eq
   b6670:	4619      	moveq	r1, r3
   b6672:	4610      	moveq	r0, r2
   b6674:	bd30      	pop	{r4, r5, pc}
   b6676:	ea91 0f03 	teq	r1, r3
   b667a:	bf1e      	ittt	ne
   b667c:	2100      	movne	r1, #0
   b667e:	2000      	movne	r0, #0
   b6680:	bd30      	popne	{r4, r5, pc}
   b6682:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6686:	d105      	bne.n	b6694 <__adddf3+0x230>
   b6688:	0040      	lsls	r0, r0, #1
   b668a:	4149      	adcs	r1, r1
   b668c:	bf28      	it	cs
   b668e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6692:	bd30      	pop	{r4, r5, pc}
   b6694:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6698:	bf3c      	itt	cc
   b669a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b669e:	bd30      	popcc	{r4, r5, pc}
   b66a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b66a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b66a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b66ac:	f04f 0000 	mov.w	r0, #0
   b66b0:	bd30      	pop	{r4, r5, pc}
   b66b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b66b6:	bf1a      	itte	ne
   b66b8:	4619      	movne	r1, r3
   b66ba:	4610      	movne	r0, r2
   b66bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b66c0:	bf1c      	itt	ne
   b66c2:	460b      	movne	r3, r1
   b66c4:	4602      	movne	r2, r0
   b66c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b66ca:	bf06      	itte	eq
   b66cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b66d0:	ea91 0f03 	teqeq	r1, r3
   b66d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b66d8:	bd30      	pop	{r4, r5, pc}
   b66da:	bf00      	nop

000b66dc <__aeabi_ui2d>:
   b66dc:	f090 0f00 	teq	r0, #0
   b66e0:	bf04      	itt	eq
   b66e2:	2100      	moveq	r1, #0
   b66e4:	4770      	bxeq	lr
   b66e6:	b530      	push	{r4, r5, lr}
   b66e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b66ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b66f0:	f04f 0500 	mov.w	r5, #0
   b66f4:	f04f 0100 	mov.w	r1, #0
   b66f8:	e750      	b.n	b659c <__adddf3+0x138>
   b66fa:	bf00      	nop

000b66fc <__aeabi_i2d>:
   b66fc:	f090 0f00 	teq	r0, #0
   b6700:	bf04      	itt	eq
   b6702:	2100      	moveq	r1, #0
   b6704:	4770      	bxeq	lr
   b6706:	b530      	push	{r4, r5, lr}
   b6708:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b670c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6710:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6714:	bf48      	it	mi
   b6716:	4240      	negmi	r0, r0
   b6718:	f04f 0100 	mov.w	r1, #0
   b671c:	e73e      	b.n	b659c <__adddf3+0x138>
   b671e:	bf00      	nop

000b6720 <__aeabi_f2d>:
   b6720:	0042      	lsls	r2, r0, #1
   b6722:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6726:	ea4f 0131 	mov.w	r1, r1, rrx
   b672a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b672e:	bf1f      	itttt	ne
   b6730:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6734:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6738:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b673c:	4770      	bxne	lr
   b673e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6742:	bf08      	it	eq
   b6744:	4770      	bxeq	lr
   b6746:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b674a:	bf04      	itt	eq
   b674c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6750:	4770      	bxeq	lr
   b6752:	b530      	push	{r4, r5, lr}
   b6754:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6758:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b675c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6760:	e71c      	b.n	b659c <__adddf3+0x138>
   b6762:	bf00      	nop

000b6764 <__aeabi_ul2d>:
   b6764:	ea50 0201 	orrs.w	r2, r0, r1
   b6768:	bf08      	it	eq
   b676a:	4770      	bxeq	lr
   b676c:	b530      	push	{r4, r5, lr}
   b676e:	f04f 0500 	mov.w	r5, #0
   b6772:	e00a      	b.n	b678a <__aeabi_l2d+0x16>

000b6774 <__aeabi_l2d>:
   b6774:	ea50 0201 	orrs.w	r2, r0, r1
   b6778:	bf08      	it	eq
   b677a:	4770      	bxeq	lr
   b677c:	b530      	push	{r4, r5, lr}
   b677e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6782:	d502      	bpl.n	b678a <__aeabi_l2d+0x16>
   b6784:	4240      	negs	r0, r0
   b6786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b678a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b678e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6792:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6796:	f43f aed8 	beq.w	b654a <__adddf3+0xe6>
   b679a:	f04f 0203 	mov.w	r2, #3
   b679e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b67a2:	bf18      	it	ne
   b67a4:	3203      	addne	r2, #3
   b67a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b67aa:	bf18      	it	ne
   b67ac:	3203      	addne	r2, #3
   b67ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b67b2:	f1c2 0320 	rsb	r3, r2, #32
   b67b6:	fa00 fc03 	lsl.w	ip, r0, r3
   b67ba:	fa20 f002 	lsr.w	r0, r0, r2
   b67be:	fa01 fe03 	lsl.w	lr, r1, r3
   b67c2:	ea40 000e 	orr.w	r0, r0, lr
   b67c6:	fa21 f102 	lsr.w	r1, r1, r2
   b67ca:	4414      	add	r4, r2
   b67cc:	e6bd      	b.n	b654a <__adddf3+0xe6>
   b67ce:	bf00      	nop

000b67d0 <__aeabi_dmul>:
   b67d0:	b570      	push	{r4, r5, r6, lr}
   b67d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b67d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b67da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b67de:	bf1d      	ittte	ne
   b67e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b67e4:	ea94 0f0c 	teqne	r4, ip
   b67e8:	ea95 0f0c 	teqne	r5, ip
   b67ec:	f000 f8de 	bleq	b69ac <__aeabi_dmul+0x1dc>
   b67f0:	442c      	add	r4, r5
   b67f2:	ea81 0603 	eor.w	r6, r1, r3
   b67f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b67fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b67fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6802:	bf18      	it	ne
   b6804:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b680c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6810:	d038      	beq.n	b6884 <__aeabi_dmul+0xb4>
   b6812:	fba0 ce02 	umull	ip, lr, r0, r2
   b6816:	f04f 0500 	mov.w	r5, #0
   b681a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b681e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6822:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6826:	f04f 0600 	mov.w	r6, #0
   b682a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b682e:	f09c 0f00 	teq	ip, #0
   b6832:	bf18      	it	ne
   b6834:	f04e 0e01 	orrne.w	lr, lr, #1
   b6838:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b683c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6840:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6844:	d204      	bcs.n	b6850 <__aeabi_dmul+0x80>
   b6846:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b684a:	416d      	adcs	r5, r5
   b684c:	eb46 0606 	adc.w	r6, r6, r6
   b6850:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6854:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6858:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b685c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6860:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6864:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6868:	bf88      	it	hi
   b686a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b686e:	d81e      	bhi.n	b68ae <__aeabi_dmul+0xde>
   b6870:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6874:	bf08      	it	eq
   b6876:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b687a:	f150 0000 	adcs.w	r0, r0, #0
   b687e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6882:	bd70      	pop	{r4, r5, r6, pc}
   b6884:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6888:	ea46 0101 	orr.w	r1, r6, r1
   b688c:	ea40 0002 	orr.w	r0, r0, r2
   b6890:	ea81 0103 	eor.w	r1, r1, r3
   b6894:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6898:	bfc2      	ittt	gt
   b689a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b689e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b68a2:	bd70      	popgt	{r4, r5, r6, pc}
   b68a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b68a8:	f04f 0e00 	mov.w	lr, #0
   b68ac:	3c01      	subs	r4, #1
   b68ae:	f300 80ab 	bgt.w	b6a08 <__aeabi_dmul+0x238>
   b68b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b68b6:	bfde      	ittt	le
   b68b8:	2000      	movle	r0, #0
   b68ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b68be:	bd70      	pople	{r4, r5, r6, pc}
   b68c0:	f1c4 0400 	rsb	r4, r4, #0
   b68c4:	3c20      	subs	r4, #32
   b68c6:	da35      	bge.n	b6934 <__aeabi_dmul+0x164>
   b68c8:	340c      	adds	r4, #12
   b68ca:	dc1b      	bgt.n	b6904 <__aeabi_dmul+0x134>
   b68cc:	f104 0414 	add.w	r4, r4, #20
   b68d0:	f1c4 0520 	rsb	r5, r4, #32
   b68d4:	fa00 f305 	lsl.w	r3, r0, r5
   b68d8:	fa20 f004 	lsr.w	r0, r0, r4
   b68dc:	fa01 f205 	lsl.w	r2, r1, r5
   b68e0:	ea40 0002 	orr.w	r0, r0, r2
   b68e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b68e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b68ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b68f0:	fa21 f604 	lsr.w	r6, r1, r4
   b68f4:	eb42 0106 	adc.w	r1, r2, r6
   b68f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b68fc:	bf08      	it	eq
   b68fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6902:	bd70      	pop	{r4, r5, r6, pc}
   b6904:	f1c4 040c 	rsb	r4, r4, #12
   b6908:	f1c4 0520 	rsb	r5, r4, #32
   b690c:	fa00 f304 	lsl.w	r3, r0, r4
   b6910:	fa20 f005 	lsr.w	r0, r0, r5
   b6914:	fa01 f204 	lsl.w	r2, r1, r4
   b6918:	ea40 0002 	orr.w	r0, r0, r2
   b691c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6920:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6924:	f141 0100 	adc.w	r1, r1, #0
   b6928:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b692c:	bf08      	it	eq
   b692e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6932:	bd70      	pop	{r4, r5, r6, pc}
   b6934:	f1c4 0520 	rsb	r5, r4, #32
   b6938:	fa00 f205 	lsl.w	r2, r0, r5
   b693c:	ea4e 0e02 	orr.w	lr, lr, r2
   b6940:	fa20 f304 	lsr.w	r3, r0, r4
   b6944:	fa01 f205 	lsl.w	r2, r1, r5
   b6948:	ea43 0302 	orr.w	r3, r3, r2
   b694c:	fa21 f004 	lsr.w	r0, r1, r4
   b6950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6954:	fa21 f204 	lsr.w	r2, r1, r4
   b6958:	ea20 0002 	bic.w	r0, r0, r2
   b695c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6960:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6964:	bf08      	it	eq
   b6966:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b696a:	bd70      	pop	{r4, r5, r6, pc}
   b696c:	f094 0f00 	teq	r4, #0
   b6970:	d10f      	bne.n	b6992 <__aeabi_dmul+0x1c2>
   b6972:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6976:	0040      	lsls	r0, r0, #1
   b6978:	eb41 0101 	adc.w	r1, r1, r1
   b697c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6980:	bf08      	it	eq
   b6982:	3c01      	subeq	r4, #1
   b6984:	d0f7      	beq.n	b6976 <__aeabi_dmul+0x1a6>
   b6986:	ea41 0106 	orr.w	r1, r1, r6
   b698a:	f095 0f00 	teq	r5, #0
   b698e:	bf18      	it	ne
   b6990:	4770      	bxne	lr
   b6992:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6996:	0052      	lsls	r2, r2, #1
   b6998:	eb43 0303 	adc.w	r3, r3, r3
   b699c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b69a0:	bf08      	it	eq
   b69a2:	3d01      	subeq	r5, #1
   b69a4:	d0f7      	beq.n	b6996 <__aeabi_dmul+0x1c6>
   b69a6:	ea43 0306 	orr.w	r3, r3, r6
   b69aa:	4770      	bx	lr
   b69ac:	ea94 0f0c 	teq	r4, ip
   b69b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b69b4:	bf18      	it	ne
   b69b6:	ea95 0f0c 	teqne	r5, ip
   b69ba:	d00c      	beq.n	b69d6 <__aeabi_dmul+0x206>
   b69bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b69c0:	bf18      	it	ne
   b69c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b69c6:	d1d1      	bne.n	b696c <__aeabi_dmul+0x19c>
   b69c8:	ea81 0103 	eor.w	r1, r1, r3
   b69cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b69d0:	f04f 0000 	mov.w	r0, #0
   b69d4:	bd70      	pop	{r4, r5, r6, pc}
   b69d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b69da:	bf06      	itte	eq
   b69dc:	4610      	moveq	r0, r2
   b69de:	4619      	moveq	r1, r3
   b69e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b69e4:	d019      	beq.n	b6a1a <__aeabi_dmul+0x24a>
   b69e6:	ea94 0f0c 	teq	r4, ip
   b69ea:	d102      	bne.n	b69f2 <__aeabi_dmul+0x222>
   b69ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b69f0:	d113      	bne.n	b6a1a <__aeabi_dmul+0x24a>
   b69f2:	ea95 0f0c 	teq	r5, ip
   b69f6:	d105      	bne.n	b6a04 <__aeabi_dmul+0x234>
   b69f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b69fc:	bf1c      	itt	ne
   b69fe:	4610      	movne	r0, r2
   b6a00:	4619      	movne	r1, r3
   b6a02:	d10a      	bne.n	b6a1a <__aeabi_dmul+0x24a>
   b6a04:	ea81 0103 	eor.w	r1, r1, r3
   b6a08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6a0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6a10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6a14:	f04f 0000 	mov.w	r0, #0
   b6a18:	bd70      	pop	{r4, r5, r6, pc}
   b6a1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6a1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6a22:	bd70      	pop	{r4, r5, r6, pc}

000b6a24 <__aeabi_ddiv>:
   b6a24:	b570      	push	{r4, r5, r6, lr}
   b6a26:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6a2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6a2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6a32:	bf1d      	ittte	ne
   b6a34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6a38:	ea94 0f0c 	teqne	r4, ip
   b6a3c:	ea95 0f0c 	teqne	r5, ip
   b6a40:	f000 f8a7 	bleq	b6b92 <__aeabi_ddiv+0x16e>
   b6a44:	eba4 0405 	sub.w	r4, r4, r5
   b6a48:	ea81 0e03 	eor.w	lr, r1, r3
   b6a4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6a50:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6a54:	f000 8088 	beq.w	b6b68 <__aeabi_ddiv+0x144>
   b6a58:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6a5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6a60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6a64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6a68:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6a6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b6a70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6a74:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6a78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6a7c:	429d      	cmp	r5, r3
   b6a7e:	bf08      	it	eq
   b6a80:	4296      	cmpeq	r6, r2
   b6a82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6a86:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6a8a:	d202      	bcs.n	b6a92 <__aeabi_ddiv+0x6e>
   b6a8c:	085b      	lsrs	r3, r3, #1
   b6a8e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a92:	1ab6      	subs	r6, r6, r2
   b6a94:	eb65 0503 	sbc.w	r5, r5, r3
   b6a98:	085b      	lsrs	r3, r3, #1
   b6a9a:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6aa2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6aa6:	ebb6 0e02 	subs.w	lr, r6, r2
   b6aaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6aae:	bf22      	ittt	cs
   b6ab0:	1ab6      	subcs	r6, r6, r2
   b6ab2:	4675      	movcs	r5, lr
   b6ab4:	ea40 000c 	orrcs.w	r0, r0, ip
   b6ab8:	085b      	lsrs	r3, r3, #1
   b6aba:	ea4f 0232 	mov.w	r2, r2, rrx
   b6abe:	ebb6 0e02 	subs.w	lr, r6, r2
   b6ac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6ac6:	bf22      	ittt	cs
   b6ac8:	1ab6      	subcs	r6, r6, r2
   b6aca:	4675      	movcs	r5, lr
   b6acc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6ad0:	085b      	lsrs	r3, r3, #1
   b6ad2:	ea4f 0232 	mov.w	r2, r2, rrx
   b6ad6:	ebb6 0e02 	subs.w	lr, r6, r2
   b6ada:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6ade:	bf22      	ittt	cs
   b6ae0:	1ab6      	subcs	r6, r6, r2
   b6ae2:	4675      	movcs	r5, lr
   b6ae4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6ae8:	085b      	lsrs	r3, r3, #1
   b6aea:	ea4f 0232 	mov.w	r2, r2, rrx
   b6aee:	ebb6 0e02 	subs.w	lr, r6, r2
   b6af2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6af6:	bf22      	ittt	cs
   b6af8:	1ab6      	subcs	r6, r6, r2
   b6afa:	4675      	movcs	r5, lr
   b6afc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6b00:	ea55 0e06 	orrs.w	lr, r5, r6
   b6b04:	d018      	beq.n	b6b38 <__aeabi_ddiv+0x114>
   b6b06:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6b0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6b0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6b12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6b16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6b1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6b1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6b22:	d1c0      	bne.n	b6aa6 <__aeabi_ddiv+0x82>
   b6b24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6b28:	d10b      	bne.n	b6b42 <__aeabi_ddiv+0x11e>
   b6b2a:	ea41 0100 	orr.w	r1, r1, r0
   b6b2e:	f04f 0000 	mov.w	r0, #0
   b6b32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6b36:	e7b6      	b.n	b6aa6 <__aeabi_ddiv+0x82>
   b6b38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6b3c:	bf04      	itt	eq
   b6b3e:	4301      	orreq	r1, r0
   b6b40:	2000      	moveq	r0, #0
   b6b42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6b46:	bf88      	it	hi
   b6b48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6b4c:	f63f aeaf 	bhi.w	b68ae <__aeabi_dmul+0xde>
   b6b50:	ebb5 0c03 	subs.w	ip, r5, r3
   b6b54:	bf04      	itt	eq
   b6b56:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6b5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6b5e:	f150 0000 	adcs.w	r0, r0, #0
   b6b62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6b66:	bd70      	pop	{r4, r5, r6, pc}
   b6b68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6b6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6b70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6b74:	bfc2      	ittt	gt
   b6b76:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6b7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6b7e:	bd70      	popgt	{r4, r5, r6, pc}
   b6b80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6b84:	f04f 0e00 	mov.w	lr, #0
   b6b88:	3c01      	subs	r4, #1
   b6b8a:	e690      	b.n	b68ae <__aeabi_dmul+0xde>
   b6b8c:	ea45 0e06 	orr.w	lr, r5, r6
   b6b90:	e68d      	b.n	b68ae <__aeabi_dmul+0xde>
   b6b92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6b96:	ea94 0f0c 	teq	r4, ip
   b6b9a:	bf08      	it	eq
   b6b9c:	ea95 0f0c 	teqeq	r5, ip
   b6ba0:	f43f af3b 	beq.w	b6a1a <__aeabi_dmul+0x24a>
   b6ba4:	ea94 0f0c 	teq	r4, ip
   b6ba8:	d10a      	bne.n	b6bc0 <__aeabi_ddiv+0x19c>
   b6baa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6bae:	f47f af34 	bne.w	b6a1a <__aeabi_dmul+0x24a>
   b6bb2:	ea95 0f0c 	teq	r5, ip
   b6bb6:	f47f af25 	bne.w	b6a04 <__aeabi_dmul+0x234>
   b6bba:	4610      	mov	r0, r2
   b6bbc:	4619      	mov	r1, r3
   b6bbe:	e72c      	b.n	b6a1a <__aeabi_dmul+0x24a>
   b6bc0:	ea95 0f0c 	teq	r5, ip
   b6bc4:	d106      	bne.n	b6bd4 <__aeabi_ddiv+0x1b0>
   b6bc6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6bca:	f43f aefd 	beq.w	b69c8 <__aeabi_dmul+0x1f8>
   b6bce:	4610      	mov	r0, r2
   b6bd0:	4619      	mov	r1, r3
   b6bd2:	e722      	b.n	b6a1a <__aeabi_dmul+0x24a>
   b6bd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6bd8:	bf18      	it	ne
   b6bda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6bde:	f47f aec5 	bne.w	b696c <__aeabi_dmul+0x19c>
   b6be2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6be6:	f47f af0d 	bne.w	b6a04 <__aeabi_dmul+0x234>
   b6bea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6bee:	f47f aeeb 	bne.w	b69c8 <__aeabi_dmul+0x1f8>
   b6bf2:	e712      	b.n	b6a1a <__aeabi_dmul+0x24a>

000b6bf4 <__gedf2>:
   b6bf4:	f04f 3cff 	mov.w	ip, #4294967295
   b6bf8:	e006      	b.n	b6c08 <__cmpdf2+0x4>
   b6bfa:	bf00      	nop

000b6bfc <__ledf2>:
   b6bfc:	f04f 0c01 	mov.w	ip, #1
   b6c00:	e002      	b.n	b6c08 <__cmpdf2+0x4>
   b6c02:	bf00      	nop

000b6c04 <__cmpdf2>:
   b6c04:	f04f 0c01 	mov.w	ip, #1
   b6c08:	f84d cd04 	str.w	ip, [sp, #-4]!
   b6c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6c14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6c18:	bf18      	it	ne
   b6c1a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b6c1e:	d01b      	beq.n	b6c58 <__cmpdf2+0x54>
   b6c20:	b001      	add	sp, #4
   b6c22:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b6c26:	bf0c      	ite	eq
   b6c28:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b6c2c:	ea91 0f03 	teqne	r1, r3
   b6c30:	bf02      	ittt	eq
   b6c32:	ea90 0f02 	teqeq	r0, r2
   b6c36:	2000      	moveq	r0, #0
   b6c38:	4770      	bxeq	lr
   b6c3a:	f110 0f00 	cmn.w	r0, #0
   b6c3e:	ea91 0f03 	teq	r1, r3
   b6c42:	bf58      	it	pl
   b6c44:	4299      	cmppl	r1, r3
   b6c46:	bf08      	it	eq
   b6c48:	4290      	cmpeq	r0, r2
   b6c4a:	bf2c      	ite	cs
   b6c4c:	17d8      	asrcs	r0, r3, #31
   b6c4e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b6c52:	f040 0001 	orr.w	r0, r0, #1
   b6c56:	4770      	bx	lr
   b6c58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6c5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6c60:	d102      	bne.n	b6c68 <__cmpdf2+0x64>
   b6c62:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6c66:	d107      	bne.n	b6c78 <__cmpdf2+0x74>
   b6c68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6c6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6c70:	d1d6      	bne.n	b6c20 <__cmpdf2+0x1c>
   b6c72:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6c76:	d0d3      	beq.n	b6c20 <__cmpdf2+0x1c>
   b6c78:	f85d 0b04 	ldr.w	r0, [sp], #4
   b6c7c:	4770      	bx	lr
   b6c7e:	bf00      	nop

000b6c80 <__aeabi_cdrcmple>:
   b6c80:	4684      	mov	ip, r0
   b6c82:	4610      	mov	r0, r2
   b6c84:	4662      	mov	r2, ip
   b6c86:	468c      	mov	ip, r1
   b6c88:	4619      	mov	r1, r3
   b6c8a:	4663      	mov	r3, ip
   b6c8c:	e000      	b.n	b6c90 <__aeabi_cdcmpeq>
   b6c8e:	bf00      	nop

000b6c90 <__aeabi_cdcmpeq>:
   b6c90:	b501      	push	{r0, lr}
   b6c92:	f7ff ffb7 	bl	b6c04 <__cmpdf2>
   b6c96:	2800      	cmp	r0, #0
   b6c98:	bf48      	it	mi
   b6c9a:	f110 0f00 	cmnmi.w	r0, #0
   b6c9e:	bd01      	pop	{r0, pc}

000b6ca0 <__aeabi_dcmpeq>:
   b6ca0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6ca4:	f7ff fff4 	bl	b6c90 <__aeabi_cdcmpeq>
   b6ca8:	bf0c      	ite	eq
   b6caa:	2001      	moveq	r0, #1
   b6cac:	2000      	movne	r0, #0
   b6cae:	f85d fb08 	ldr.w	pc, [sp], #8
   b6cb2:	bf00      	nop

000b6cb4 <__aeabi_dcmplt>:
   b6cb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6cb8:	f7ff ffea 	bl	b6c90 <__aeabi_cdcmpeq>
   b6cbc:	bf34      	ite	cc
   b6cbe:	2001      	movcc	r0, #1
   b6cc0:	2000      	movcs	r0, #0
   b6cc2:	f85d fb08 	ldr.w	pc, [sp], #8
   b6cc6:	bf00      	nop

000b6cc8 <__aeabi_dcmple>:
   b6cc8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6ccc:	f7ff ffe0 	bl	b6c90 <__aeabi_cdcmpeq>
   b6cd0:	bf94      	ite	ls
   b6cd2:	2001      	movls	r0, #1
   b6cd4:	2000      	movhi	r0, #0
   b6cd6:	f85d fb08 	ldr.w	pc, [sp], #8
   b6cda:	bf00      	nop

000b6cdc <__aeabi_dcmpge>:
   b6cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6ce0:	f7ff ffce 	bl	b6c80 <__aeabi_cdrcmple>
   b6ce4:	bf94      	ite	ls
   b6ce6:	2001      	movls	r0, #1
   b6ce8:	2000      	movhi	r0, #0
   b6cea:	f85d fb08 	ldr.w	pc, [sp], #8
   b6cee:	bf00      	nop

000b6cf0 <__aeabi_dcmpgt>:
   b6cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6cf4:	f7ff ffc4 	bl	b6c80 <__aeabi_cdrcmple>
   b6cf8:	bf34      	ite	cc
   b6cfa:	2001      	movcc	r0, #1
   b6cfc:	2000      	movcs	r0, #0
   b6cfe:	f85d fb08 	ldr.w	pc, [sp], #8
   b6d02:	bf00      	nop

000b6d04 <__aeabi_d2uiz>:
   b6d04:	004a      	lsls	r2, r1, #1
   b6d06:	d211      	bcs.n	b6d2c <__aeabi_d2uiz+0x28>
   b6d08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6d0c:	d211      	bcs.n	b6d32 <__aeabi_d2uiz+0x2e>
   b6d0e:	d50d      	bpl.n	b6d2c <__aeabi_d2uiz+0x28>
   b6d10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6d14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6d18:	d40e      	bmi.n	b6d38 <__aeabi_d2uiz+0x34>
   b6d1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6d1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b6d22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b6d26:	fa23 f002 	lsr.w	r0, r3, r2
   b6d2a:	4770      	bx	lr
   b6d2c:	f04f 0000 	mov.w	r0, #0
   b6d30:	4770      	bx	lr
   b6d32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b6d36:	d102      	bne.n	b6d3e <__aeabi_d2uiz+0x3a>
   b6d38:	f04f 30ff 	mov.w	r0, #4294967295
   b6d3c:	4770      	bx	lr
   b6d3e:	f04f 0000 	mov.w	r0, #0
   b6d42:	4770      	bx	lr

000b6d44 <__aeabi_d2f>:
   b6d44:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6d48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b6d4c:	bf24      	itt	cs
   b6d4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b6d52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b6d56:	d90d      	bls.n	b6d74 <__aeabi_d2f+0x30>
   b6d58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b6d5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b6d60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b6d64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b6d68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b6d6c:	bf08      	it	eq
   b6d6e:	f020 0001 	biceq.w	r0, r0, #1
   b6d72:	4770      	bx	lr
   b6d74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b6d78:	d121      	bne.n	b6dbe <__aeabi_d2f+0x7a>
   b6d7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b6d7e:	bfbc      	itt	lt
   b6d80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b6d84:	4770      	bxlt	lr
   b6d86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6d8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b6d8e:	f1c2 0218 	rsb	r2, r2, #24
   b6d92:	f1c2 0c20 	rsb	ip, r2, #32
   b6d96:	fa10 f30c 	lsls.w	r3, r0, ip
   b6d9a:	fa20 f002 	lsr.w	r0, r0, r2
   b6d9e:	bf18      	it	ne
   b6da0:	f040 0001 	orrne.w	r0, r0, #1
   b6da4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6da8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b6dac:	fa03 fc0c 	lsl.w	ip, r3, ip
   b6db0:	ea40 000c 	orr.w	r0, r0, ip
   b6db4:	fa23 f302 	lsr.w	r3, r3, r2
   b6db8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b6dbc:	e7cc      	b.n	b6d58 <__aeabi_d2f+0x14>
   b6dbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b6dc2:	d107      	bne.n	b6dd4 <__aeabi_d2f+0x90>
   b6dc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b6dc8:	bf1e      	ittt	ne
   b6dca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b6dce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b6dd2:	4770      	bxne	lr
   b6dd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b6dd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b6ddc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b6de0:	4770      	bx	lr
   b6de2:	bf00      	nop

000b6de4 <__aeabi_d2ulz>:
   b6de4:	b5d0      	push	{r4, r6, r7, lr}
   b6de6:	4b0c      	ldr	r3, [pc, #48]	; (b6e18 <__aeabi_d2ulz+0x34>)
   b6de8:	2200      	movs	r2, #0
   b6dea:	4606      	mov	r6, r0
   b6dec:	460f      	mov	r7, r1
   b6dee:	f7ff fcef 	bl	b67d0 <__aeabi_dmul>
   b6df2:	f7ff ff87 	bl	b6d04 <__aeabi_d2uiz>
   b6df6:	4604      	mov	r4, r0
   b6df8:	f7ff fc70 	bl	b66dc <__aeabi_ui2d>
   b6dfc:	4b07      	ldr	r3, [pc, #28]	; (b6e1c <__aeabi_d2ulz+0x38>)
   b6dfe:	2200      	movs	r2, #0
   b6e00:	f7ff fce6 	bl	b67d0 <__aeabi_dmul>
   b6e04:	4602      	mov	r2, r0
   b6e06:	460b      	mov	r3, r1
   b6e08:	4630      	mov	r0, r6
   b6e0a:	4639      	mov	r1, r7
   b6e0c:	f7ff fb28 	bl	b6460 <__aeabi_dsub>
   b6e10:	f7ff ff78 	bl	b6d04 <__aeabi_d2uiz>
   b6e14:	4621      	mov	r1, r4
   b6e16:	bdd0      	pop	{r4, r6, r7, pc}
   b6e18:	3df00000 	.word	0x3df00000
   b6e1c:	41f00000 	.word	0x41f00000

000b6e20 <atexit>:
   b6e20:	2300      	movs	r3, #0
   b6e22:	4601      	mov	r1, r0
   b6e24:	461a      	mov	r2, r3
   b6e26:	4618      	mov	r0, r3
   b6e28:	f000 beb8 	b.w	b7b9c <__register_exitproc>

000b6e2c <atof>:
   b6e2c:	2100      	movs	r1, #0
   b6e2e:	f000 bea9 	b.w	b7b84 <strtod>

000b6e32 <memcpy>:
   b6e32:	440a      	add	r2, r1
   b6e34:	4291      	cmp	r1, r2
   b6e36:	f100 33ff 	add.w	r3, r0, #4294967295
   b6e3a:	d100      	bne.n	b6e3e <memcpy+0xc>
   b6e3c:	4770      	bx	lr
   b6e3e:	b510      	push	{r4, lr}
   b6e40:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6e44:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6e48:	4291      	cmp	r1, r2
   b6e4a:	d1f9      	bne.n	b6e40 <memcpy+0xe>
   b6e4c:	bd10      	pop	{r4, pc}

000b6e4e <memset>:
   b6e4e:	4402      	add	r2, r0
   b6e50:	4603      	mov	r3, r0
   b6e52:	4293      	cmp	r3, r2
   b6e54:	d100      	bne.n	b6e58 <memset+0xa>
   b6e56:	4770      	bx	lr
   b6e58:	f803 1b01 	strb.w	r1, [r3], #1
   b6e5c:	e7f9      	b.n	b6e52 <memset+0x4>
	...

000b6e60 <srand>:
   b6e60:	b538      	push	{r3, r4, r5, lr}
   b6e62:	4b10      	ldr	r3, [pc, #64]	; (b6ea4 <srand+0x44>)
   b6e64:	681d      	ldr	r5, [r3, #0]
   b6e66:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6e68:	4604      	mov	r4, r0
   b6e6a:	b9b3      	cbnz	r3, b6e9a <srand+0x3a>
   b6e6c:	2018      	movs	r0, #24
   b6e6e:	f7fe f9a3 	bl	b51b8 <malloc>
   b6e72:	4602      	mov	r2, r0
   b6e74:	63a8      	str	r0, [r5, #56]	; 0x38
   b6e76:	b920      	cbnz	r0, b6e82 <srand+0x22>
   b6e78:	4b0b      	ldr	r3, [pc, #44]	; (b6ea8 <srand+0x48>)
   b6e7a:	480c      	ldr	r0, [pc, #48]	; (b6eac <srand+0x4c>)
   b6e7c:	2142      	movs	r1, #66	; 0x42
   b6e7e:	f7fe f9cb 	bl	b5218 <__assert_func>
   b6e82:	490b      	ldr	r1, [pc, #44]	; (b6eb0 <srand+0x50>)
   b6e84:	4b0b      	ldr	r3, [pc, #44]	; (b6eb4 <srand+0x54>)
   b6e86:	e9c0 1300 	strd	r1, r3, [r0]
   b6e8a:	4b0b      	ldr	r3, [pc, #44]	; (b6eb8 <srand+0x58>)
   b6e8c:	6083      	str	r3, [r0, #8]
   b6e8e:	230b      	movs	r3, #11
   b6e90:	8183      	strh	r3, [r0, #12]
   b6e92:	2100      	movs	r1, #0
   b6e94:	2001      	movs	r0, #1
   b6e96:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6e9a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6e9c:	2200      	movs	r2, #0
   b6e9e:	611c      	str	r4, [r3, #16]
   b6ea0:	615a      	str	r2, [r3, #20]
   b6ea2:	bd38      	pop	{r3, r4, r5, pc}
   b6ea4:	2003e460 	.word	0x2003e460
   b6ea8:	000b8ff9 	.word	0x000b8ff9
   b6eac:	000b9010 	.word	0x000b9010
   b6eb0:	abcd330e 	.word	0xabcd330e
   b6eb4:	e66d1234 	.word	0xe66d1234
   b6eb8:	0005deec 	.word	0x0005deec

000b6ebc <strcpy>:
   b6ebc:	4603      	mov	r3, r0
   b6ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6ec2:	f803 2b01 	strb.w	r2, [r3], #1
   b6ec6:	2a00      	cmp	r2, #0
   b6ec8:	d1f9      	bne.n	b6ebe <strcpy+0x2>
   b6eca:	4770      	bx	lr

000b6ecc <strdup>:
   b6ecc:	4b02      	ldr	r3, [pc, #8]	; (b6ed8 <strdup+0xc>)
   b6ece:	4601      	mov	r1, r0
   b6ed0:	6818      	ldr	r0, [r3, #0]
   b6ed2:	f000 b803 	b.w	b6edc <_strdup_r>
   b6ed6:	bf00      	nop
   b6ed8:	2003e460 	.word	0x2003e460

000b6edc <_strdup_r>:
   b6edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6ede:	4604      	mov	r4, r0
   b6ee0:	4608      	mov	r0, r1
   b6ee2:	460d      	mov	r5, r1
   b6ee4:	f000 f80f 	bl	b6f06 <strlen>
   b6ee8:	1c42      	adds	r2, r0, #1
   b6eea:	4611      	mov	r1, r2
   b6eec:	4620      	mov	r0, r4
   b6eee:	9201      	str	r2, [sp, #4]
   b6ef0:	f7fe f98a 	bl	b5208 <_malloc_r>
   b6ef4:	4604      	mov	r4, r0
   b6ef6:	b118      	cbz	r0, b6f00 <_strdup_r+0x24>
   b6ef8:	9a01      	ldr	r2, [sp, #4]
   b6efa:	4629      	mov	r1, r5
   b6efc:	f7ff ff99 	bl	b6e32 <memcpy>
   b6f00:	4620      	mov	r0, r4
   b6f02:	b003      	add	sp, #12
   b6f04:	bd30      	pop	{r4, r5, pc}

000b6f06 <strlen>:
   b6f06:	4603      	mov	r3, r0
   b6f08:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6f0c:	2a00      	cmp	r2, #0
   b6f0e:	d1fb      	bne.n	b6f08 <strlen+0x2>
   b6f10:	1a18      	subs	r0, r3, r0
   b6f12:	3801      	subs	r0, #1
   b6f14:	4770      	bx	lr

000b6f16 <strncmp>:
   b6f16:	b510      	push	{r4, lr}
   b6f18:	b17a      	cbz	r2, b6f3a <strncmp+0x24>
   b6f1a:	4603      	mov	r3, r0
   b6f1c:	3901      	subs	r1, #1
   b6f1e:	1884      	adds	r4, r0, r2
   b6f20:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6f24:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6f28:	4290      	cmp	r0, r2
   b6f2a:	d101      	bne.n	b6f30 <strncmp+0x1a>
   b6f2c:	42a3      	cmp	r3, r4
   b6f2e:	d101      	bne.n	b6f34 <strncmp+0x1e>
   b6f30:	1a80      	subs	r0, r0, r2
   b6f32:	bd10      	pop	{r4, pc}
   b6f34:	2800      	cmp	r0, #0
   b6f36:	d1f3      	bne.n	b6f20 <strncmp+0xa>
   b6f38:	e7fa      	b.n	b6f30 <strncmp+0x1a>
   b6f3a:	4610      	mov	r0, r2
   b6f3c:	e7f9      	b.n	b6f32 <strncmp+0x1c>

000b6f3e <sulp>:
   b6f3e:	b570      	push	{r4, r5, r6, lr}
   b6f40:	4604      	mov	r4, r0
   b6f42:	460d      	mov	r5, r1
   b6f44:	ec45 4b10 	vmov	d0, r4, r5
   b6f48:	4616      	mov	r6, r2
   b6f4a:	f001 fd81 	bl	b8a50 <__ulp>
   b6f4e:	ec51 0b10 	vmov	r0, r1, d0
   b6f52:	b17e      	cbz	r6, b6f74 <sulp+0x36>
   b6f54:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b6f58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b6f5c:	2b00      	cmp	r3, #0
   b6f5e:	dd09      	ble.n	b6f74 <sulp+0x36>
   b6f60:	051b      	lsls	r3, r3, #20
   b6f62:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b6f66:	2400      	movs	r4, #0
   b6f68:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b6f6c:	4622      	mov	r2, r4
   b6f6e:	462b      	mov	r3, r5
   b6f70:	f7ff fc2e 	bl	b67d0 <__aeabi_dmul>
   b6f74:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6f78 <_strtod_l>:
   b6f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6f7c:	ed2d 8b02 	vpush	{d8}
   b6f80:	b09d      	sub	sp, #116	; 0x74
   b6f82:	461f      	mov	r7, r3
   b6f84:	2300      	movs	r3, #0
   b6f86:	9318      	str	r3, [sp, #96]	; 0x60
   b6f88:	4ba2      	ldr	r3, [pc, #648]	; (b7214 <_strtod_l+0x29c>)
   b6f8a:	9213      	str	r2, [sp, #76]	; 0x4c
   b6f8c:	681b      	ldr	r3, [r3, #0]
   b6f8e:	9305      	str	r3, [sp, #20]
   b6f90:	4604      	mov	r4, r0
   b6f92:	4618      	mov	r0, r3
   b6f94:	4688      	mov	r8, r1
   b6f96:	f7ff ffb6 	bl	b6f06 <strlen>
   b6f9a:	f04f 0a00 	mov.w	sl, #0
   b6f9e:	4605      	mov	r5, r0
   b6fa0:	f04f 0b00 	mov.w	fp, #0
   b6fa4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b6fa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6faa:	781a      	ldrb	r2, [r3, #0]
   b6fac:	2a2b      	cmp	r2, #43	; 0x2b
   b6fae:	d04e      	beq.n	b704e <_strtod_l+0xd6>
   b6fb0:	d83b      	bhi.n	b702a <_strtod_l+0xb2>
   b6fb2:	2a0d      	cmp	r2, #13
   b6fb4:	d834      	bhi.n	b7020 <_strtod_l+0xa8>
   b6fb6:	2a08      	cmp	r2, #8
   b6fb8:	d834      	bhi.n	b7024 <_strtod_l+0xac>
   b6fba:	2a00      	cmp	r2, #0
   b6fbc:	d03e      	beq.n	b703c <_strtod_l+0xc4>
   b6fbe:	2300      	movs	r3, #0
   b6fc0:	930a      	str	r3, [sp, #40]	; 0x28
   b6fc2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b6fc4:	7833      	ldrb	r3, [r6, #0]
   b6fc6:	2b30      	cmp	r3, #48	; 0x30
   b6fc8:	f040 80b0 	bne.w	b712c <_strtod_l+0x1b4>
   b6fcc:	7873      	ldrb	r3, [r6, #1]
   b6fce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b6fd2:	2b58      	cmp	r3, #88	; 0x58
   b6fd4:	d168      	bne.n	b70a8 <_strtod_l+0x130>
   b6fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6fd8:	9301      	str	r3, [sp, #4]
   b6fda:	ab18      	add	r3, sp, #96	; 0x60
   b6fdc:	9702      	str	r7, [sp, #8]
   b6fde:	9300      	str	r3, [sp, #0]
   b6fe0:	4a8d      	ldr	r2, [pc, #564]	; (b7218 <_strtod_l+0x2a0>)
   b6fe2:	ab19      	add	r3, sp, #100	; 0x64
   b6fe4:	a917      	add	r1, sp, #92	; 0x5c
   b6fe6:	4620      	mov	r0, r4
   b6fe8:	f000 fea2 	bl	b7d30 <__gethex>
   b6fec:	f010 0707 	ands.w	r7, r0, #7
   b6ff0:	4605      	mov	r5, r0
   b6ff2:	d005      	beq.n	b7000 <_strtod_l+0x88>
   b6ff4:	2f06      	cmp	r7, #6
   b6ff6:	d12c      	bne.n	b7052 <_strtod_l+0xda>
   b6ff8:	3601      	adds	r6, #1
   b6ffa:	2300      	movs	r3, #0
   b6ffc:	9617      	str	r6, [sp, #92]	; 0x5c
   b6ffe:	930a      	str	r3, [sp, #40]	; 0x28
   b7000:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7002:	2b00      	cmp	r3, #0
   b7004:	f040 8590 	bne.w	b7b28 <_strtod_l+0xbb0>
   b7008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b700a:	b1eb      	cbz	r3, b7048 <_strtod_l+0xd0>
   b700c:	4652      	mov	r2, sl
   b700e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b7012:	ec43 2b10 	vmov	d0, r2, r3
   b7016:	b01d      	add	sp, #116	; 0x74
   b7018:	ecbd 8b02 	vpop	{d8}
   b701c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7020:	2a20      	cmp	r2, #32
   b7022:	d1cc      	bne.n	b6fbe <_strtod_l+0x46>
   b7024:	3301      	adds	r3, #1
   b7026:	9317      	str	r3, [sp, #92]	; 0x5c
   b7028:	e7be      	b.n	b6fa8 <_strtod_l+0x30>
   b702a:	2a2d      	cmp	r2, #45	; 0x2d
   b702c:	d1c7      	bne.n	b6fbe <_strtod_l+0x46>
   b702e:	2201      	movs	r2, #1
   b7030:	920a      	str	r2, [sp, #40]	; 0x28
   b7032:	1c5a      	adds	r2, r3, #1
   b7034:	9217      	str	r2, [sp, #92]	; 0x5c
   b7036:	785b      	ldrb	r3, [r3, #1]
   b7038:	2b00      	cmp	r3, #0
   b703a:	d1c2      	bne.n	b6fc2 <_strtod_l+0x4a>
   b703c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b703e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7042:	2b00      	cmp	r3, #0
   b7044:	f040 856e 	bne.w	b7b24 <_strtod_l+0xbac>
   b7048:	4652      	mov	r2, sl
   b704a:	465b      	mov	r3, fp
   b704c:	e7e1      	b.n	b7012 <_strtod_l+0x9a>
   b704e:	2200      	movs	r2, #0
   b7050:	e7ee      	b.n	b7030 <_strtod_l+0xb8>
   b7052:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b7054:	b13a      	cbz	r2, b7066 <_strtod_l+0xee>
   b7056:	2135      	movs	r1, #53	; 0x35
   b7058:	a81a      	add	r0, sp, #104	; 0x68
   b705a:	f001 fe04 	bl	b8c66 <__copybits>
   b705e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7060:	4620      	mov	r0, r4
   b7062:	f001 f9c3 	bl	b83ec <_Bfree>
   b7066:	3f01      	subs	r7, #1
   b7068:	2f04      	cmp	r7, #4
   b706a:	d806      	bhi.n	b707a <_strtod_l+0x102>
   b706c:	e8df f007 	tbb	[pc, r7]
   b7070:	1714030a 	.word	0x1714030a
   b7074:	0a          	.byte	0x0a
   b7075:	00          	.byte	0x00
   b7076:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b707a:	0728      	lsls	r0, r5, #28
   b707c:	d5c0      	bpl.n	b7000 <_strtod_l+0x88>
   b707e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b7082:	e7bd      	b.n	b7000 <_strtod_l+0x88>
   b7084:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b7088:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b708a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b708e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b7092:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b7096:	e7f0      	b.n	b707a <_strtod_l+0x102>
   b7098:	f8df b180 	ldr.w	fp, [pc, #384]	; b721c <_strtod_l+0x2a4>
   b709c:	e7ed      	b.n	b707a <_strtod_l+0x102>
   b709e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b70a2:	f04f 3aff 	mov.w	sl, #4294967295
   b70a6:	e7e8      	b.n	b707a <_strtod_l+0x102>
   b70a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b70aa:	1c5a      	adds	r2, r3, #1
   b70ac:	9217      	str	r2, [sp, #92]	; 0x5c
   b70ae:	785b      	ldrb	r3, [r3, #1]
   b70b0:	2b30      	cmp	r3, #48	; 0x30
   b70b2:	d0f9      	beq.n	b70a8 <_strtod_l+0x130>
   b70b4:	2b00      	cmp	r3, #0
   b70b6:	d0a3      	beq.n	b7000 <_strtod_l+0x88>
   b70b8:	2301      	movs	r3, #1
   b70ba:	f04f 0900 	mov.w	r9, #0
   b70be:	9304      	str	r3, [sp, #16]
   b70c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b70c2:	9308      	str	r3, [sp, #32]
   b70c4:	f8cd 901c 	str.w	r9, [sp, #28]
   b70c8:	464f      	mov	r7, r9
   b70ca:	220a      	movs	r2, #10
   b70cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b70ce:	7806      	ldrb	r6, [r0, #0]
   b70d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b70d4:	b2d9      	uxtb	r1, r3
   b70d6:	2909      	cmp	r1, #9
   b70d8:	d92a      	bls.n	b7130 <_strtod_l+0x1b8>
   b70da:	9905      	ldr	r1, [sp, #20]
   b70dc:	462a      	mov	r2, r5
   b70de:	f7ff ff1a 	bl	b6f16 <strncmp>
   b70e2:	b398      	cbz	r0, b714c <_strtod_l+0x1d4>
   b70e4:	2000      	movs	r0, #0
   b70e6:	4632      	mov	r2, r6
   b70e8:	463d      	mov	r5, r7
   b70ea:	9005      	str	r0, [sp, #20]
   b70ec:	4603      	mov	r3, r0
   b70ee:	2a65      	cmp	r2, #101	; 0x65
   b70f0:	d001      	beq.n	b70f6 <_strtod_l+0x17e>
   b70f2:	2a45      	cmp	r2, #69	; 0x45
   b70f4:	d118      	bne.n	b7128 <_strtod_l+0x1b0>
   b70f6:	b91d      	cbnz	r5, b7100 <_strtod_l+0x188>
   b70f8:	9a04      	ldr	r2, [sp, #16]
   b70fa:	4302      	orrs	r2, r0
   b70fc:	d09e      	beq.n	b703c <_strtod_l+0xc4>
   b70fe:	2500      	movs	r5, #0
   b7100:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b7104:	f108 0201 	add.w	r2, r8, #1
   b7108:	9217      	str	r2, [sp, #92]	; 0x5c
   b710a:	f898 2001 	ldrb.w	r2, [r8, #1]
   b710e:	2a2b      	cmp	r2, #43	; 0x2b
   b7110:	d075      	beq.n	b71fe <_strtod_l+0x286>
   b7112:	2a2d      	cmp	r2, #45	; 0x2d
   b7114:	d07b      	beq.n	b720e <_strtod_l+0x296>
   b7116:	f04f 0c00 	mov.w	ip, #0
   b711a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b711e:	2909      	cmp	r1, #9
   b7120:	f240 8082 	bls.w	b7228 <_strtod_l+0x2b0>
   b7124:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7128:	2600      	movs	r6, #0
   b712a:	e09d      	b.n	b7268 <_strtod_l+0x2f0>
   b712c:	2300      	movs	r3, #0
   b712e:	e7c4      	b.n	b70ba <_strtod_l+0x142>
   b7130:	2f08      	cmp	r7, #8
   b7132:	bfd8      	it	le
   b7134:	9907      	ldrle	r1, [sp, #28]
   b7136:	f100 0001 	add.w	r0, r0, #1
   b713a:	bfda      	itte	le
   b713c:	fb02 3301 	mlale	r3, r2, r1, r3
   b7140:	9307      	strle	r3, [sp, #28]
   b7142:	fb02 3909 	mlagt	r9, r2, r9, r3
   b7146:	3701      	adds	r7, #1
   b7148:	9017      	str	r0, [sp, #92]	; 0x5c
   b714a:	e7bf      	b.n	b70cc <_strtod_l+0x154>
   b714c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b714e:	195a      	adds	r2, r3, r5
   b7150:	9217      	str	r2, [sp, #92]	; 0x5c
   b7152:	5d5a      	ldrb	r2, [r3, r5]
   b7154:	2f00      	cmp	r7, #0
   b7156:	d037      	beq.n	b71c8 <_strtod_l+0x250>
   b7158:	9005      	str	r0, [sp, #20]
   b715a:	463d      	mov	r5, r7
   b715c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b7160:	2b09      	cmp	r3, #9
   b7162:	d912      	bls.n	b718a <_strtod_l+0x212>
   b7164:	2301      	movs	r3, #1
   b7166:	e7c2      	b.n	b70ee <_strtod_l+0x176>
   b7168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b716a:	1c5a      	adds	r2, r3, #1
   b716c:	9217      	str	r2, [sp, #92]	; 0x5c
   b716e:	785a      	ldrb	r2, [r3, #1]
   b7170:	3001      	adds	r0, #1
   b7172:	2a30      	cmp	r2, #48	; 0x30
   b7174:	d0f8      	beq.n	b7168 <_strtod_l+0x1f0>
   b7176:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b717a:	2b08      	cmp	r3, #8
   b717c:	f200 84d9 	bhi.w	b7b32 <_strtod_l+0xbba>
   b7180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7182:	9005      	str	r0, [sp, #20]
   b7184:	2000      	movs	r0, #0
   b7186:	9308      	str	r3, [sp, #32]
   b7188:	4605      	mov	r5, r0
   b718a:	3a30      	subs	r2, #48	; 0x30
   b718c:	f100 0301 	add.w	r3, r0, #1
   b7190:	d014      	beq.n	b71bc <_strtod_l+0x244>
   b7192:	9905      	ldr	r1, [sp, #20]
   b7194:	4419      	add	r1, r3
   b7196:	9105      	str	r1, [sp, #20]
   b7198:	462b      	mov	r3, r5
   b719a:	eb00 0e05 	add.w	lr, r0, r5
   b719e:	210a      	movs	r1, #10
   b71a0:	4573      	cmp	r3, lr
   b71a2:	d113      	bne.n	b71cc <_strtod_l+0x254>
   b71a4:	182b      	adds	r3, r5, r0
   b71a6:	2b08      	cmp	r3, #8
   b71a8:	f105 0501 	add.w	r5, r5, #1
   b71ac:	4405      	add	r5, r0
   b71ae:	dc1c      	bgt.n	b71ea <_strtod_l+0x272>
   b71b0:	9907      	ldr	r1, [sp, #28]
   b71b2:	230a      	movs	r3, #10
   b71b4:	fb03 2301 	mla	r3, r3, r1, r2
   b71b8:	9307      	str	r3, [sp, #28]
   b71ba:	2300      	movs	r3, #0
   b71bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b71be:	1c51      	adds	r1, r2, #1
   b71c0:	9117      	str	r1, [sp, #92]	; 0x5c
   b71c2:	7852      	ldrb	r2, [r2, #1]
   b71c4:	4618      	mov	r0, r3
   b71c6:	e7c9      	b.n	b715c <_strtod_l+0x1e4>
   b71c8:	4638      	mov	r0, r7
   b71ca:	e7d2      	b.n	b7172 <_strtod_l+0x1fa>
   b71cc:	2b08      	cmp	r3, #8
   b71ce:	dc04      	bgt.n	b71da <_strtod_l+0x262>
   b71d0:	9e07      	ldr	r6, [sp, #28]
   b71d2:	434e      	muls	r6, r1
   b71d4:	9607      	str	r6, [sp, #28]
   b71d6:	3301      	adds	r3, #1
   b71d8:	e7e2      	b.n	b71a0 <_strtod_l+0x228>
   b71da:	f103 0c01 	add.w	ip, r3, #1
   b71de:	f1bc 0f10 	cmp.w	ip, #16
   b71e2:	bfd8      	it	le
   b71e4:	fb01 f909 	mulle.w	r9, r1, r9
   b71e8:	e7f5      	b.n	b71d6 <_strtod_l+0x25e>
   b71ea:	2d10      	cmp	r5, #16
   b71ec:	bfdc      	itt	le
   b71ee:	230a      	movle	r3, #10
   b71f0:	fb03 2909 	mlale	r9, r3, r9, r2
   b71f4:	e7e1      	b.n	b71ba <_strtod_l+0x242>
   b71f6:	2300      	movs	r3, #0
   b71f8:	9305      	str	r3, [sp, #20]
   b71fa:	2301      	movs	r3, #1
   b71fc:	e77c      	b.n	b70f8 <_strtod_l+0x180>
   b71fe:	f04f 0c00 	mov.w	ip, #0
   b7202:	f108 0202 	add.w	r2, r8, #2
   b7206:	9217      	str	r2, [sp, #92]	; 0x5c
   b7208:	f898 2002 	ldrb.w	r2, [r8, #2]
   b720c:	e785      	b.n	b711a <_strtod_l+0x1a2>
   b720e:	f04f 0c01 	mov.w	ip, #1
   b7212:	e7f6      	b.n	b7202 <_strtod_l+0x28a>
   b7214:	000b9288 	.word	0x000b9288
   b7218:	000b909c 	.word	0x000b909c
   b721c:	7ff00000 	.word	0x7ff00000
   b7220:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7222:	1c51      	adds	r1, r2, #1
   b7224:	9117      	str	r1, [sp, #92]	; 0x5c
   b7226:	7852      	ldrb	r2, [r2, #1]
   b7228:	2a30      	cmp	r2, #48	; 0x30
   b722a:	d0f9      	beq.n	b7220 <_strtod_l+0x2a8>
   b722c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b7230:	2908      	cmp	r1, #8
   b7232:	f63f af79 	bhi.w	b7128 <_strtod_l+0x1b0>
   b7236:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b723a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b723c:	9206      	str	r2, [sp, #24]
   b723e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7240:	1c51      	adds	r1, r2, #1
   b7242:	9117      	str	r1, [sp, #92]	; 0x5c
   b7244:	7852      	ldrb	r2, [r2, #1]
   b7246:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b724a:	2e09      	cmp	r6, #9
   b724c:	d937      	bls.n	b72be <_strtod_l+0x346>
   b724e:	9e06      	ldr	r6, [sp, #24]
   b7250:	1b89      	subs	r1, r1, r6
   b7252:	2908      	cmp	r1, #8
   b7254:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b7258:	dc02      	bgt.n	b7260 <_strtod_l+0x2e8>
   b725a:	4576      	cmp	r6, lr
   b725c:	bfa8      	it	ge
   b725e:	4676      	movge	r6, lr
   b7260:	f1bc 0f00 	cmp.w	ip, #0
   b7264:	d000      	beq.n	b7268 <_strtod_l+0x2f0>
   b7266:	4276      	negs	r6, r6
   b7268:	2d00      	cmp	r5, #0
   b726a:	d14d      	bne.n	b7308 <_strtod_l+0x390>
   b726c:	9904      	ldr	r1, [sp, #16]
   b726e:	4301      	orrs	r1, r0
   b7270:	f47f aec6 	bne.w	b7000 <_strtod_l+0x88>
   b7274:	2b00      	cmp	r3, #0
   b7276:	f47f aee1 	bne.w	b703c <_strtod_l+0xc4>
   b727a:	2a69      	cmp	r2, #105	; 0x69
   b727c:	d027      	beq.n	b72ce <_strtod_l+0x356>
   b727e:	dc24      	bgt.n	b72ca <_strtod_l+0x352>
   b7280:	2a49      	cmp	r2, #73	; 0x49
   b7282:	d024      	beq.n	b72ce <_strtod_l+0x356>
   b7284:	2a4e      	cmp	r2, #78	; 0x4e
   b7286:	f47f aed9 	bne.w	b703c <_strtod_l+0xc4>
   b728a:	499f      	ldr	r1, [pc, #636]	; (b7508 <_strtod_l+0x590>)
   b728c:	a817      	add	r0, sp, #92	; 0x5c
   b728e:	f000 ffa7 	bl	b81e0 <__match>
   b7292:	2800      	cmp	r0, #0
   b7294:	f43f aed2 	beq.w	b703c <_strtod_l+0xc4>
   b7298:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b729a:	781b      	ldrb	r3, [r3, #0]
   b729c:	2b28      	cmp	r3, #40	; 0x28
   b729e:	d12d      	bne.n	b72fc <_strtod_l+0x384>
   b72a0:	499a      	ldr	r1, [pc, #616]	; (b750c <_strtod_l+0x594>)
   b72a2:	aa1a      	add	r2, sp, #104	; 0x68
   b72a4:	a817      	add	r0, sp, #92	; 0x5c
   b72a6:	f000 ffaf 	bl	b8208 <__hexnan>
   b72aa:	2805      	cmp	r0, #5
   b72ac:	d126      	bne.n	b72fc <_strtod_l+0x384>
   b72ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b72b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b72b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b72b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b72bc:	e6a0      	b.n	b7000 <_strtod_l+0x88>
   b72be:	210a      	movs	r1, #10
   b72c0:	fb01 2e0e 	mla	lr, r1, lr, r2
   b72c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b72c8:	e7b9      	b.n	b723e <_strtod_l+0x2c6>
   b72ca:	2a6e      	cmp	r2, #110	; 0x6e
   b72cc:	e7db      	b.n	b7286 <_strtod_l+0x30e>
   b72ce:	4990      	ldr	r1, [pc, #576]	; (b7510 <_strtod_l+0x598>)
   b72d0:	a817      	add	r0, sp, #92	; 0x5c
   b72d2:	f000 ff85 	bl	b81e0 <__match>
   b72d6:	2800      	cmp	r0, #0
   b72d8:	f43f aeb0 	beq.w	b703c <_strtod_l+0xc4>
   b72dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b72de:	498d      	ldr	r1, [pc, #564]	; (b7514 <_strtod_l+0x59c>)
   b72e0:	3b01      	subs	r3, #1
   b72e2:	a817      	add	r0, sp, #92	; 0x5c
   b72e4:	9317      	str	r3, [sp, #92]	; 0x5c
   b72e6:	f000 ff7b 	bl	b81e0 <__match>
   b72ea:	b910      	cbnz	r0, b72f2 <_strtod_l+0x37a>
   b72ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b72ee:	3301      	adds	r3, #1
   b72f0:	9317      	str	r3, [sp, #92]	; 0x5c
   b72f2:	f8df b230 	ldr.w	fp, [pc, #560]	; b7524 <_strtod_l+0x5ac>
   b72f6:	f04f 0a00 	mov.w	sl, #0
   b72fa:	e681      	b.n	b7000 <_strtod_l+0x88>
   b72fc:	4886      	ldr	r0, [pc, #536]	; (b7518 <_strtod_l+0x5a0>)
   b72fe:	f7ff f8a3 	bl	b6448 <nan>
   b7302:	ec5b ab10 	vmov	sl, fp, d0
   b7306:	e67b      	b.n	b7000 <_strtod_l+0x88>
   b7308:	9b05      	ldr	r3, [sp, #20]
   b730a:	9807      	ldr	r0, [sp, #28]
   b730c:	1af3      	subs	r3, r6, r3
   b730e:	2f00      	cmp	r7, #0
   b7310:	bf08      	it	eq
   b7312:	462f      	moveq	r7, r5
   b7314:	2d10      	cmp	r5, #16
   b7316:	9306      	str	r3, [sp, #24]
   b7318:	46a8      	mov	r8, r5
   b731a:	bfa8      	it	ge
   b731c:	f04f 0810 	movge.w	r8, #16
   b7320:	f7ff f9dc 	bl	b66dc <__aeabi_ui2d>
   b7324:	2d09      	cmp	r5, #9
   b7326:	4682      	mov	sl, r0
   b7328:	468b      	mov	fp, r1
   b732a:	dd13      	ble.n	b7354 <_strtod_l+0x3dc>
   b732c:	4b7b      	ldr	r3, [pc, #492]	; (b751c <_strtod_l+0x5a4>)
   b732e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b7332:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b7336:	f7ff fa4b 	bl	b67d0 <__aeabi_dmul>
   b733a:	4682      	mov	sl, r0
   b733c:	4648      	mov	r0, r9
   b733e:	468b      	mov	fp, r1
   b7340:	f7ff f9cc 	bl	b66dc <__aeabi_ui2d>
   b7344:	4602      	mov	r2, r0
   b7346:	460b      	mov	r3, r1
   b7348:	4650      	mov	r0, sl
   b734a:	4659      	mov	r1, fp
   b734c:	f7ff f88a 	bl	b6464 <__adddf3>
   b7350:	4682      	mov	sl, r0
   b7352:	468b      	mov	fp, r1
   b7354:	2d0f      	cmp	r5, #15
   b7356:	dc38      	bgt.n	b73ca <_strtod_l+0x452>
   b7358:	9b06      	ldr	r3, [sp, #24]
   b735a:	2b00      	cmp	r3, #0
   b735c:	f43f ae50 	beq.w	b7000 <_strtod_l+0x88>
   b7360:	dd24      	ble.n	b73ac <_strtod_l+0x434>
   b7362:	2b16      	cmp	r3, #22
   b7364:	dc0b      	bgt.n	b737e <_strtod_l+0x406>
   b7366:	496d      	ldr	r1, [pc, #436]	; (b751c <_strtod_l+0x5a4>)
   b7368:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b736c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7370:	4652      	mov	r2, sl
   b7372:	465b      	mov	r3, fp
   b7374:	f7ff fa2c 	bl	b67d0 <__aeabi_dmul>
   b7378:	4682      	mov	sl, r0
   b737a:	468b      	mov	fp, r1
   b737c:	e640      	b.n	b7000 <_strtod_l+0x88>
   b737e:	9a06      	ldr	r2, [sp, #24]
   b7380:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b7384:	4293      	cmp	r3, r2
   b7386:	db20      	blt.n	b73ca <_strtod_l+0x452>
   b7388:	4c64      	ldr	r4, [pc, #400]	; (b751c <_strtod_l+0x5a4>)
   b738a:	f1c5 050f 	rsb	r5, r5, #15
   b738e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b7392:	4652      	mov	r2, sl
   b7394:	465b      	mov	r3, fp
   b7396:	e9d1 0100 	ldrd	r0, r1, [r1]
   b739a:	f7ff fa19 	bl	b67d0 <__aeabi_dmul>
   b739e:	9b06      	ldr	r3, [sp, #24]
   b73a0:	1b5d      	subs	r5, r3, r5
   b73a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b73a6:	e9d4 2300 	ldrd	r2, r3, [r4]
   b73aa:	e7e3      	b.n	b7374 <_strtod_l+0x3fc>
   b73ac:	9b06      	ldr	r3, [sp, #24]
   b73ae:	3316      	adds	r3, #22
   b73b0:	db0b      	blt.n	b73ca <_strtod_l+0x452>
   b73b2:	9b05      	ldr	r3, [sp, #20]
   b73b4:	1b9e      	subs	r6, r3, r6
   b73b6:	4b59      	ldr	r3, [pc, #356]	; (b751c <_strtod_l+0x5a4>)
   b73b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b73bc:	e9d6 2300 	ldrd	r2, r3, [r6]
   b73c0:	4650      	mov	r0, sl
   b73c2:	4659      	mov	r1, fp
   b73c4:	f7ff fb2e 	bl	b6a24 <__aeabi_ddiv>
   b73c8:	e7d6      	b.n	b7378 <_strtod_l+0x400>
   b73ca:	9b06      	ldr	r3, [sp, #24]
   b73cc:	eba5 0808 	sub.w	r8, r5, r8
   b73d0:	4498      	add	r8, r3
   b73d2:	f1b8 0f00 	cmp.w	r8, #0
   b73d6:	dd74      	ble.n	b74c2 <_strtod_l+0x54a>
   b73d8:	f018 030f 	ands.w	r3, r8, #15
   b73dc:	d00a      	beq.n	b73f4 <_strtod_l+0x47c>
   b73de:	494f      	ldr	r1, [pc, #316]	; (b751c <_strtod_l+0x5a4>)
   b73e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b73e4:	4652      	mov	r2, sl
   b73e6:	465b      	mov	r3, fp
   b73e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b73ec:	f7ff f9f0 	bl	b67d0 <__aeabi_dmul>
   b73f0:	4682      	mov	sl, r0
   b73f2:	468b      	mov	fp, r1
   b73f4:	f038 080f 	bics.w	r8, r8, #15
   b73f8:	d04f      	beq.n	b749a <_strtod_l+0x522>
   b73fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b73fe:	dd22      	ble.n	b7446 <_strtod_l+0x4ce>
   b7400:	2500      	movs	r5, #0
   b7402:	462e      	mov	r6, r5
   b7404:	9507      	str	r5, [sp, #28]
   b7406:	9505      	str	r5, [sp, #20]
   b7408:	2322      	movs	r3, #34	; 0x22
   b740a:	f8df b118 	ldr.w	fp, [pc, #280]	; b7524 <_strtod_l+0x5ac>
   b740e:	6023      	str	r3, [r4, #0]
   b7410:	f04f 0a00 	mov.w	sl, #0
   b7414:	9b07      	ldr	r3, [sp, #28]
   b7416:	2b00      	cmp	r3, #0
   b7418:	f43f adf2 	beq.w	b7000 <_strtod_l+0x88>
   b741c:	9918      	ldr	r1, [sp, #96]	; 0x60
   b741e:	4620      	mov	r0, r4
   b7420:	f000 ffe4 	bl	b83ec <_Bfree>
   b7424:	9905      	ldr	r1, [sp, #20]
   b7426:	4620      	mov	r0, r4
   b7428:	f000 ffe0 	bl	b83ec <_Bfree>
   b742c:	4631      	mov	r1, r6
   b742e:	4620      	mov	r0, r4
   b7430:	f000 ffdc 	bl	b83ec <_Bfree>
   b7434:	9907      	ldr	r1, [sp, #28]
   b7436:	4620      	mov	r0, r4
   b7438:	f000 ffd8 	bl	b83ec <_Bfree>
   b743c:	4629      	mov	r1, r5
   b743e:	4620      	mov	r0, r4
   b7440:	f000 ffd4 	bl	b83ec <_Bfree>
   b7444:	e5dc      	b.n	b7000 <_strtod_l+0x88>
   b7446:	4b36      	ldr	r3, [pc, #216]	; (b7520 <_strtod_l+0x5a8>)
   b7448:	9304      	str	r3, [sp, #16]
   b744a:	2300      	movs	r3, #0
   b744c:	ea4f 1828 	mov.w	r8, r8, asr #4
   b7450:	4650      	mov	r0, sl
   b7452:	4659      	mov	r1, fp
   b7454:	4699      	mov	r9, r3
   b7456:	f1b8 0f01 	cmp.w	r8, #1
   b745a:	dc21      	bgt.n	b74a0 <_strtod_l+0x528>
   b745c:	b10b      	cbz	r3, b7462 <_strtod_l+0x4ea>
   b745e:	4682      	mov	sl, r0
   b7460:	468b      	mov	fp, r1
   b7462:	4b2f      	ldr	r3, [pc, #188]	; (b7520 <_strtod_l+0x5a8>)
   b7464:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b7468:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b746c:	4652      	mov	r2, sl
   b746e:	465b      	mov	r3, fp
   b7470:	e9d9 0100 	ldrd	r0, r1, [r9]
   b7474:	f7ff f9ac 	bl	b67d0 <__aeabi_dmul>
   b7478:	4b2a      	ldr	r3, [pc, #168]	; (b7524 <_strtod_l+0x5ac>)
   b747a:	460a      	mov	r2, r1
   b747c:	400b      	ands	r3, r1
   b747e:	492a      	ldr	r1, [pc, #168]	; (b7528 <_strtod_l+0x5b0>)
   b7480:	428b      	cmp	r3, r1
   b7482:	4682      	mov	sl, r0
   b7484:	d8bc      	bhi.n	b7400 <_strtod_l+0x488>
   b7486:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b748a:	428b      	cmp	r3, r1
   b748c:	bf86      	itte	hi
   b748e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b752c <_strtod_l+0x5b4>
   b7492:	f04f 3aff 	movhi.w	sl, #4294967295
   b7496:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b749a:	2300      	movs	r3, #0
   b749c:	9304      	str	r3, [sp, #16]
   b749e:	e084      	b.n	b75aa <_strtod_l+0x632>
   b74a0:	f018 0f01 	tst.w	r8, #1
   b74a4:	d005      	beq.n	b74b2 <_strtod_l+0x53a>
   b74a6:	9b04      	ldr	r3, [sp, #16]
   b74a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b74ac:	f7ff f990 	bl	b67d0 <__aeabi_dmul>
   b74b0:	2301      	movs	r3, #1
   b74b2:	9a04      	ldr	r2, [sp, #16]
   b74b4:	3208      	adds	r2, #8
   b74b6:	f109 0901 	add.w	r9, r9, #1
   b74ba:	ea4f 0868 	mov.w	r8, r8, asr #1
   b74be:	9204      	str	r2, [sp, #16]
   b74c0:	e7c9      	b.n	b7456 <_strtod_l+0x4de>
   b74c2:	d0ea      	beq.n	b749a <_strtod_l+0x522>
   b74c4:	f1c8 0800 	rsb	r8, r8, #0
   b74c8:	f018 020f 	ands.w	r2, r8, #15
   b74cc:	d00a      	beq.n	b74e4 <_strtod_l+0x56c>
   b74ce:	4b13      	ldr	r3, [pc, #76]	; (b751c <_strtod_l+0x5a4>)
   b74d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b74d4:	4650      	mov	r0, sl
   b74d6:	4659      	mov	r1, fp
   b74d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b74dc:	f7ff faa2 	bl	b6a24 <__aeabi_ddiv>
   b74e0:	4682      	mov	sl, r0
   b74e2:	468b      	mov	fp, r1
   b74e4:	ea5f 1828 	movs.w	r8, r8, asr #4
   b74e8:	d0d7      	beq.n	b749a <_strtod_l+0x522>
   b74ea:	f1b8 0f1f 	cmp.w	r8, #31
   b74ee:	dd1f      	ble.n	b7530 <_strtod_l+0x5b8>
   b74f0:	2500      	movs	r5, #0
   b74f2:	462e      	mov	r6, r5
   b74f4:	9507      	str	r5, [sp, #28]
   b74f6:	9505      	str	r5, [sp, #20]
   b74f8:	2322      	movs	r3, #34	; 0x22
   b74fa:	f04f 0a00 	mov.w	sl, #0
   b74fe:	f04f 0b00 	mov.w	fp, #0
   b7502:	6023      	str	r3, [r4, #0]
   b7504:	e786      	b.n	b7414 <_strtod_l+0x49c>
   b7506:	bf00      	nop
   b7508:	000b9096 	.word	0x000b9096
   b750c:	000b90b0 	.word	0x000b90b0
   b7510:	000b908d 	.word	0x000b908d
   b7514:	000b9090 	.word	0x000b9090
   b7518:	000b8d7f 	.word	0x000b8d7f
   b751c:	000b9348 	.word	0x000b9348
   b7520:	000b9320 	.word	0x000b9320
   b7524:	7ff00000 	.word	0x7ff00000
   b7528:	7ca00000 	.word	0x7ca00000
   b752c:	7fefffff 	.word	0x7fefffff
   b7530:	f018 0310 	ands.w	r3, r8, #16
   b7534:	bf18      	it	ne
   b7536:	236a      	movne	r3, #106	; 0x6a
   b7538:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b78e8 <_strtod_l+0x970>
   b753c:	9304      	str	r3, [sp, #16]
   b753e:	4650      	mov	r0, sl
   b7540:	4659      	mov	r1, fp
   b7542:	2300      	movs	r3, #0
   b7544:	f018 0f01 	tst.w	r8, #1
   b7548:	d004      	beq.n	b7554 <_strtod_l+0x5dc>
   b754a:	e9d9 2300 	ldrd	r2, r3, [r9]
   b754e:	f7ff f93f 	bl	b67d0 <__aeabi_dmul>
   b7552:	2301      	movs	r3, #1
   b7554:	ea5f 0868 	movs.w	r8, r8, asr #1
   b7558:	f109 0908 	add.w	r9, r9, #8
   b755c:	d1f2      	bne.n	b7544 <_strtod_l+0x5cc>
   b755e:	b10b      	cbz	r3, b7564 <_strtod_l+0x5ec>
   b7560:	4682      	mov	sl, r0
   b7562:	468b      	mov	fp, r1
   b7564:	9b04      	ldr	r3, [sp, #16]
   b7566:	b1c3      	cbz	r3, b759a <_strtod_l+0x622>
   b7568:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b756c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b7570:	2b00      	cmp	r3, #0
   b7572:	4659      	mov	r1, fp
   b7574:	dd11      	ble.n	b759a <_strtod_l+0x622>
   b7576:	2b1f      	cmp	r3, #31
   b7578:	f340 8124 	ble.w	b77c4 <_strtod_l+0x84c>
   b757c:	2b34      	cmp	r3, #52	; 0x34
   b757e:	bfde      	ittt	le
   b7580:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b7584:	f04f 33ff 	movle.w	r3, #4294967295
   b7588:	fa03 f202 	lslle.w	r2, r3, r2
   b758c:	f04f 0a00 	mov.w	sl, #0
   b7590:	bfcc      	ite	gt
   b7592:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b7596:	ea02 0b01 	andle.w	fp, r2, r1
   b759a:	2200      	movs	r2, #0
   b759c:	2300      	movs	r3, #0
   b759e:	4650      	mov	r0, sl
   b75a0:	4659      	mov	r1, fp
   b75a2:	f7ff fb7d 	bl	b6ca0 <__aeabi_dcmpeq>
   b75a6:	2800      	cmp	r0, #0
   b75a8:	d1a2      	bne.n	b74f0 <_strtod_l+0x578>
   b75aa:	9b07      	ldr	r3, [sp, #28]
   b75ac:	9300      	str	r3, [sp, #0]
   b75ae:	9908      	ldr	r1, [sp, #32]
   b75b0:	462b      	mov	r3, r5
   b75b2:	463a      	mov	r2, r7
   b75b4:	4620      	mov	r0, r4
   b75b6:	f000 ff81 	bl	b84bc <__s2b>
   b75ba:	9007      	str	r0, [sp, #28]
   b75bc:	2800      	cmp	r0, #0
   b75be:	f43f af1f 	beq.w	b7400 <_strtod_l+0x488>
   b75c2:	9b05      	ldr	r3, [sp, #20]
   b75c4:	1b9e      	subs	r6, r3, r6
   b75c6:	9b06      	ldr	r3, [sp, #24]
   b75c8:	2b00      	cmp	r3, #0
   b75ca:	bfb4      	ite	lt
   b75cc:	4633      	movlt	r3, r6
   b75ce:	2300      	movge	r3, #0
   b75d0:	930c      	str	r3, [sp, #48]	; 0x30
   b75d2:	9b06      	ldr	r3, [sp, #24]
   b75d4:	2500      	movs	r5, #0
   b75d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b75da:	9312      	str	r3, [sp, #72]	; 0x48
   b75dc:	462e      	mov	r6, r5
   b75de:	9b07      	ldr	r3, [sp, #28]
   b75e0:	4620      	mov	r0, r4
   b75e2:	6859      	ldr	r1, [r3, #4]
   b75e4:	f000 fec2 	bl	b836c <_Balloc>
   b75e8:	9005      	str	r0, [sp, #20]
   b75ea:	2800      	cmp	r0, #0
   b75ec:	f43f af0c 	beq.w	b7408 <_strtod_l+0x490>
   b75f0:	9b07      	ldr	r3, [sp, #28]
   b75f2:	691a      	ldr	r2, [r3, #16]
   b75f4:	3202      	adds	r2, #2
   b75f6:	f103 010c 	add.w	r1, r3, #12
   b75fa:	0092      	lsls	r2, r2, #2
   b75fc:	300c      	adds	r0, #12
   b75fe:	f7ff fc18 	bl	b6e32 <memcpy>
   b7602:	ec4b ab10 	vmov	d0, sl, fp
   b7606:	aa1a      	add	r2, sp, #104	; 0x68
   b7608:	a919      	add	r1, sp, #100	; 0x64
   b760a:	4620      	mov	r0, r4
   b760c:	f001 fa9c 	bl	b8b48 <__d2b>
   b7610:	ec4b ab18 	vmov	d8, sl, fp
   b7614:	9018      	str	r0, [sp, #96]	; 0x60
   b7616:	2800      	cmp	r0, #0
   b7618:	f43f aef6 	beq.w	b7408 <_strtod_l+0x490>
   b761c:	2101      	movs	r1, #1
   b761e:	4620      	mov	r0, r4
   b7620:	f000 ffe6 	bl	b85f0 <__i2b>
   b7624:	4606      	mov	r6, r0
   b7626:	2800      	cmp	r0, #0
   b7628:	f43f aeee 	beq.w	b7408 <_strtod_l+0x490>
   b762c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b762e:	9904      	ldr	r1, [sp, #16]
   b7630:	2b00      	cmp	r3, #0
   b7632:	bfab      	itete	ge
   b7634:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b7636:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b7638:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b763a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b763e:	bfac      	ite	ge
   b7640:	eb03 0902 	addge.w	r9, r3, r2
   b7644:	1ad7      	sublt	r7, r2, r3
   b7646:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b7648:	eba3 0801 	sub.w	r8, r3, r1
   b764c:	4490      	add	r8, r2
   b764e:	4ba1      	ldr	r3, [pc, #644]	; (b78d4 <_strtod_l+0x95c>)
   b7650:	f108 38ff 	add.w	r8, r8, #4294967295
   b7654:	4598      	cmp	r8, r3
   b7656:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b765a:	f280 80c7 	bge.w	b77ec <_strtod_l+0x874>
   b765e:	eba3 0308 	sub.w	r3, r3, r8
   b7662:	2b1f      	cmp	r3, #31
   b7664:	eba2 0203 	sub.w	r2, r2, r3
   b7668:	f04f 0101 	mov.w	r1, #1
   b766c:	f300 80b1 	bgt.w	b77d2 <_strtod_l+0x85a>
   b7670:	fa01 f303 	lsl.w	r3, r1, r3
   b7674:	930d      	str	r3, [sp, #52]	; 0x34
   b7676:	2300      	movs	r3, #0
   b7678:	9308      	str	r3, [sp, #32]
   b767a:	eb09 0802 	add.w	r8, r9, r2
   b767e:	9b04      	ldr	r3, [sp, #16]
   b7680:	45c1      	cmp	r9, r8
   b7682:	4417      	add	r7, r2
   b7684:	441f      	add	r7, r3
   b7686:	464b      	mov	r3, r9
   b7688:	bfa8      	it	ge
   b768a:	4643      	movge	r3, r8
   b768c:	42bb      	cmp	r3, r7
   b768e:	bfa8      	it	ge
   b7690:	463b      	movge	r3, r7
   b7692:	2b00      	cmp	r3, #0
   b7694:	bfc2      	ittt	gt
   b7696:	eba8 0803 	subgt.w	r8, r8, r3
   b769a:	1aff      	subgt	r7, r7, r3
   b769c:	eba9 0903 	subgt.w	r9, r9, r3
   b76a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b76a2:	2b00      	cmp	r3, #0
   b76a4:	dd17      	ble.n	b76d6 <_strtod_l+0x75e>
   b76a6:	4631      	mov	r1, r6
   b76a8:	461a      	mov	r2, r3
   b76aa:	4620      	mov	r0, r4
   b76ac:	f001 f860 	bl	b8770 <__pow5mult>
   b76b0:	4606      	mov	r6, r0
   b76b2:	2800      	cmp	r0, #0
   b76b4:	f43f aea8 	beq.w	b7408 <_strtod_l+0x490>
   b76b8:	4601      	mov	r1, r0
   b76ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b76bc:	4620      	mov	r0, r4
   b76be:	f000 ffad 	bl	b861c <__multiply>
   b76c2:	900b      	str	r0, [sp, #44]	; 0x2c
   b76c4:	2800      	cmp	r0, #0
   b76c6:	f43f ae9f 	beq.w	b7408 <_strtod_l+0x490>
   b76ca:	9918      	ldr	r1, [sp, #96]	; 0x60
   b76cc:	4620      	mov	r0, r4
   b76ce:	f000 fe8d 	bl	b83ec <_Bfree>
   b76d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b76d4:	9318      	str	r3, [sp, #96]	; 0x60
   b76d6:	f1b8 0f00 	cmp.w	r8, #0
   b76da:	f300 808c 	bgt.w	b77f6 <_strtod_l+0x87e>
   b76de:	9b06      	ldr	r3, [sp, #24]
   b76e0:	2b00      	cmp	r3, #0
   b76e2:	dd08      	ble.n	b76f6 <_strtod_l+0x77e>
   b76e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b76e6:	9905      	ldr	r1, [sp, #20]
   b76e8:	4620      	mov	r0, r4
   b76ea:	f001 f841 	bl	b8770 <__pow5mult>
   b76ee:	9005      	str	r0, [sp, #20]
   b76f0:	2800      	cmp	r0, #0
   b76f2:	f43f ae89 	beq.w	b7408 <_strtod_l+0x490>
   b76f6:	2f00      	cmp	r7, #0
   b76f8:	dd08      	ble.n	b770c <_strtod_l+0x794>
   b76fa:	9905      	ldr	r1, [sp, #20]
   b76fc:	463a      	mov	r2, r7
   b76fe:	4620      	mov	r0, r4
   b7700:	f001 f890 	bl	b8824 <__lshift>
   b7704:	9005      	str	r0, [sp, #20]
   b7706:	2800      	cmp	r0, #0
   b7708:	f43f ae7e 	beq.w	b7408 <_strtod_l+0x490>
   b770c:	f1b9 0f00 	cmp.w	r9, #0
   b7710:	dd08      	ble.n	b7724 <_strtod_l+0x7ac>
   b7712:	4631      	mov	r1, r6
   b7714:	464a      	mov	r2, r9
   b7716:	4620      	mov	r0, r4
   b7718:	f001 f884 	bl	b8824 <__lshift>
   b771c:	4606      	mov	r6, r0
   b771e:	2800      	cmp	r0, #0
   b7720:	f43f ae72 	beq.w	b7408 <_strtod_l+0x490>
   b7724:	9a05      	ldr	r2, [sp, #20]
   b7726:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7728:	4620      	mov	r0, r4
   b772a:	f001 f907 	bl	b893c <__mdiff>
   b772e:	4605      	mov	r5, r0
   b7730:	2800      	cmp	r0, #0
   b7732:	f43f ae69 	beq.w	b7408 <_strtod_l+0x490>
   b7736:	68c3      	ldr	r3, [r0, #12]
   b7738:	930b      	str	r3, [sp, #44]	; 0x2c
   b773a:	2300      	movs	r3, #0
   b773c:	60c3      	str	r3, [r0, #12]
   b773e:	4631      	mov	r1, r6
   b7740:	f001 f8e0 	bl	b8904 <__mcmp>
   b7744:	2800      	cmp	r0, #0
   b7746:	da60      	bge.n	b780a <_strtod_l+0x892>
   b7748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b774a:	ea53 030a 	orrs.w	r3, r3, sl
   b774e:	f040 8082 	bne.w	b7856 <_strtod_l+0x8de>
   b7752:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b7756:	2b00      	cmp	r3, #0
   b7758:	d17d      	bne.n	b7856 <_strtod_l+0x8de>
   b775a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b775e:	0d1b      	lsrs	r3, r3, #20
   b7760:	051b      	lsls	r3, r3, #20
   b7762:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b7766:	d976      	bls.n	b7856 <_strtod_l+0x8de>
   b7768:	696b      	ldr	r3, [r5, #20]
   b776a:	b913      	cbnz	r3, b7772 <_strtod_l+0x7fa>
   b776c:	692b      	ldr	r3, [r5, #16]
   b776e:	2b01      	cmp	r3, #1
   b7770:	dd71      	ble.n	b7856 <_strtod_l+0x8de>
   b7772:	4629      	mov	r1, r5
   b7774:	2201      	movs	r2, #1
   b7776:	4620      	mov	r0, r4
   b7778:	f001 f854 	bl	b8824 <__lshift>
   b777c:	4631      	mov	r1, r6
   b777e:	4605      	mov	r5, r0
   b7780:	f001 f8c0 	bl	b8904 <__mcmp>
   b7784:	2800      	cmp	r0, #0
   b7786:	dd66      	ble.n	b7856 <_strtod_l+0x8de>
   b7788:	9904      	ldr	r1, [sp, #16]
   b778a:	4a53      	ldr	r2, [pc, #332]	; (b78d8 <_strtod_l+0x960>)
   b778c:	465b      	mov	r3, fp
   b778e:	2900      	cmp	r1, #0
   b7790:	f000 8081 	beq.w	b7896 <_strtod_l+0x91e>
   b7794:	ea02 010b 	and.w	r1, r2, fp
   b7798:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b779c:	dc7b      	bgt.n	b7896 <_strtod_l+0x91e>
   b779e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b77a2:	f77f aea9 	ble.w	b74f8 <_strtod_l+0x580>
   b77a6:	4b4d      	ldr	r3, [pc, #308]	; (b78dc <_strtod_l+0x964>)
   b77a8:	4650      	mov	r0, sl
   b77aa:	4659      	mov	r1, fp
   b77ac:	2200      	movs	r2, #0
   b77ae:	f7ff f80f 	bl	b67d0 <__aeabi_dmul>
   b77b2:	460b      	mov	r3, r1
   b77b4:	4303      	orrs	r3, r0
   b77b6:	bf08      	it	eq
   b77b8:	2322      	moveq	r3, #34	; 0x22
   b77ba:	4682      	mov	sl, r0
   b77bc:	468b      	mov	fp, r1
   b77be:	bf08      	it	eq
   b77c0:	6023      	streq	r3, [r4, #0]
   b77c2:	e62b      	b.n	b741c <_strtod_l+0x4a4>
   b77c4:	f04f 32ff 	mov.w	r2, #4294967295
   b77c8:	fa02 f303 	lsl.w	r3, r2, r3
   b77cc:	ea03 0a0a 	and.w	sl, r3, sl
   b77d0:	e6e3      	b.n	b759a <_strtod_l+0x622>
   b77d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b77d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b77da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b77de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b77e2:	fa01 f308 	lsl.w	r3, r1, r8
   b77e6:	9308      	str	r3, [sp, #32]
   b77e8:	910d      	str	r1, [sp, #52]	; 0x34
   b77ea:	e746      	b.n	b767a <_strtod_l+0x702>
   b77ec:	2300      	movs	r3, #0
   b77ee:	9308      	str	r3, [sp, #32]
   b77f0:	2301      	movs	r3, #1
   b77f2:	930d      	str	r3, [sp, #52]	; 0x34
   b77f4:	e741      	b.n	b767a <_strtod_l+0x702>
   b77f6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b77f8:	4642      	mov	r2, r8
   b77fa:	4620      	mov	r0, r4
   b77fc:	f001 f812 	bl	b8824 <__lshift>
   b7800:	9018      	str	r0, [sp, #96]	; 0x60
   b7802:	2800      	cmp	r0, #0
   b7804:	f47f af6b 	bne.w	b76de <_strtod_l+0x766>
   b7808:	e5fe      	b.n	b7408 <_strtod_l+0x490>
   b780a:	465f      	mov	r7, fp
   b780c:	d16e      	bne.n	b78ec <_strtod_l+0x974>
   b780e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7810:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b7814:	b342      	cbz	r2, b7868 <_strtod_l+0x8f0>
   b7816:	4a32      	ldr	r2, [pc, #200]	; (b78e0 <_strtod_l+0x968>)
   b7818:	4293      	cmp	r3, r2
   b781a:	d128      	bne.n	b786e <_strtod_l+0x8f6>
   b781c:	9b04      	ldr	r3, [sp, #16]
   b781e:	4651      	mov	r1, sl
   b7820:	b1eb      	cbz	r3, b785e <_strtod_l+0x8e6>
   b7822:	4b2d      	ldr	r3, [pc, #180]	; (b78d8 <_strtod_l+0x960>)
   b7824:	403b      	ands	r3, r7
   b7826:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b782a:	f04f 32ff 	mov.w	r2, #4294967295
   b782e:	d819      	bhi.n	b7864 <_strtod_l+0x8ec>
   b7830:	0d1b      	lsrs	r3, r3, #20
   b7832:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b7836:	fa02 f303 	lsl.w	r3, r2, r3
   b783a:	4299      	cmp	r1, r3
   b783c:	d117      	bne.n	b786e <_strtod_l+0x8f6>
   b783e:	4b29      	ldr	r3, [pc, #164]	; (b78e4 <_strtod_l+0x96c>)
   b7840:	429f      	cmp	r7, r3
   b7842:	d102      	bne.n	b784a <_strtod_l+0x8d2>
   b7844:	3101      	adds	r1, #1
   b7846:	f43f addf 	beq.w	b7408 <_strtod_l+0x490>
   b784a:	4b23      	ldr	r3, [pc, #140]	; (b78d8 <_strtod_l+0x960>)
   b784c:	403b      	ands	r3, r7
   b784e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b7852:	f04f 0a00 	mov.w	sl, #0
   b7856:	9b04      	ldr	r3, [sp, #16]
   b7858:	2b00      	cmp	r3, #0
   b785a:	d1a4      	bne.n	b77a6 <_strtod_l+0x82e>
   b785c:	e5de      	b.n	b741c <_strtod_l+0x4a4>
   b785e:	f04f 33ff 	mov.w	r3, #4294967295
   b7862:	e7ea      	b.n	b783a <_strtod_l+0x8c2>
   b7864:	4613      	mov	r3, r2
   b7866:	e7e8      	b.n	b783a <_strtod_l+0x8c2>
   b7868:	ea53 030a 	orrs.w	r3, r3, sl
   b786c:	d08c      	beq.n	b7788 <_strtod_l+0x810>
   b786e:	9b08      	ldr	r3, [sp, #32]
   b7870:	b1db      	cbz	r3, b78aa <_strtod_l+0x932>
   b7872:	423b      	tst	r3, r7
   b7874:	d0ef      	beq.n	b7856 <_strtod_l+0x8de>
   b7876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7878:	9a04      	ldr	r2, [sp, #16]
   b787a:	4650      	mov	r0, sl
   b787c:	4659      	mov	r1, fp
   b787e:	b1c3      	cbz	r3, b78b2 <_strtod_l+0x93a>
   b7880:	f7ff fb5d 	bl	b6f3e <sulp>
   b7884:	4602      	mov	r2, r0
   b7886:	460b      	mov	r3, r1
   b7888:	ec51 0b18 	vmov	r0, r1, d8
   b788c:	f7fe fdea 	bl	b6464 <__adddf3>
   b7890:	4682      	mov	sl, r0
   b7892:	468b      	mov	fp, r1
   b7894:	e7df      	b.n	b7856 <_strtod_l+0x8de>
   b7896:	4013      	ands	r3, r2
   b7898:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b789c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b78a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b78a4:	f04f 3aff 	mov.w	sl, #4294967295
   b78a8:	e7d5      	b.n	b7856 <_strtod_l+0x8de>
   b78aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b78ac:	ea13 0f0a 	tst.w	r3, sl
   b78b0:	e7e0      	b.n	b7874 <_strtod_l+0x8fc>
   b78b2:	f7ff fb44 	bl	b6f3e <sulp>
   b78b6:	4602      	mov	r2, r0
   b78b8:	460b      	mov	r3, r1
   b78ba:	ec51 0b18 	vmov	r0, r1, d8
   b78be:	f7fe fdcf 	bl	b6460 <__aeabi_dsub>
   b78c2:	2200      	movs	r2, #0
   b78c4:	2300      	movs	r3, #0
   b78c6:	4682      	mov	sl, r0
   b78c8:	468b      	mov	fp, r1
   b78ca:	f7ff f9e9 	bl	b6ca0 <__aeabi_dcmpeq>
   b78ce:	2800      	cmp	r0, #0
   b78d0:	d0c1      	beq.n	b7856 <_strtod_l+0x8de>
   b78d2:	e611      	b.n	b74f8 <_strtod_l+0x580>
   b78d4:	fffffc02 	.word	0xfffffc02
   b78d8:	7ff00000 	.word	0x7ff00000
   b78dc:	39500000 	.word	0x39500000
   b78e0:	000fffff 	.word	0x000fffff
   b78e4:	7fefffff 	.word	0x7fefffff
   b78e8:	000b90c8 	.word	0x000b90c8
   b78ec:	4631      	mov	r1, r6
   b78ee:	4628      	mov	r0, r5
   b78f0:	f001 f986 	bl	b8c00 <__ratio>
   b78f4:	ec59 8b10 	vmov	r8, r9, d0
   b78f8:	ee10 0a10 	vmov	r0, s0
   b78fc:	2200      	movs	r2, #0
   b78fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b7902:	4649      	mov	r1, r9
   b7904:	f7ff f9e0 	bl	b6cc8 <__aeabi_dcmple>
   b7908:	2800      	cmp	r0, #0
   b790a:	d07a      	beq.n	b7a02 <_strtod_l+0xa8a>
   b790c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b790e:	2b00      	cmp	r3, #0
   b7910:	d04a      	beq.n	b79a8 <_strtod_l+0xa30>
   b7912:	4b95      	ldr	r3, [pc, #596]	; (b7b68 <_strtod_l+0xbf0>)
   b7914:	2200      	movs	r2, #0
   b7916:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b791a:	f8df 924c 	ldr.w	r9, [pc, #588]	; b7b68 <_strtod_l+0xbf0>
   b791e:	f04f 0800 	mov.w	r8, #0
   b7922:	4b92      	ldr	r3, [pc, #584]	; (b7b6c <_strtod_l+0xbf4>)
   b7924:	403b      	ands	r3, r7
   b7926:	930d      	str	r3, [sp, #52]	; 0x34
   b7928:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b792a:	4b91      	ldr	r3, [pc, #580]	; (b7b70 <_strtod_l+0xbf8>)
   b792c:	429a      	cmp	r2, r3
   b792e:	f040 80b0 	bne.w	b7a92 <_strtod_l+0xb1a>
   b7932:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b7936:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b793a:	ec4b ab10 	vmov	d0, sl, fp
   b793e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b7942:	f001 f885 	bl	b8a50 <__ulp>
   b7946:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b794a:	ec53 2b10 	vmov	r2, r3, d0
   b794e:	f7fe ff3f 	bl	b67d0 <__aeabi_dmul>
   b7952:	4652      	mov	r2, sl
   b7954:	465b      	mov	r3, fp
   b7956:	f7fe fd85 	bl	b6464 <__adddf3>
   b795a:	460b      	mov	r3, r1
   b795c:	4983      	ldr	r1, [pc, #524]	; (b7b6c <_strtod_l+0xbf4>)
   b795e:	4a85      	ldr	r2, [pc, #532]	; (b7b74 <_strtod_l+0xbfc>)
   b7960:	4019      	ands	r1, r3
   b7962:	4291      	cmp	r1, r2
   b7964:	4682      	mov	sl, r0
   b7966:	d960      	bls.n	b7a2a <_strtod_l+0xab2>
   b7968:	ee18 3a90 	vmov	r3, s17
   b796c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b7970:	4293      	cmp	r3, r2
   b7972:	d104      	bne.n	b797e <_strtod_l+0xa06>
   b7974:	ee18 3a10 	vmov	r3, s16
   b7978:	3301      	adds	r3, #1
   b797a:	f43f ad45 	beq.w	b7408 <_strtod_l+0x490>
   b797e:	f8df b200 	ldr.w	fp, [pc, #512]	; b7b80 <_strtod_l+0xc08>
   b7982:	f04f 3aff 	mov.w	sl, #4294967295
   b7986:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7988:	4620      	mov	r0, r4
   b798a:	f000 fd2f 	bl	b83ec <_Bfree>
   b798e:	9905      	ldr	r1, [sp, #20]
   b7990:	4620      	mov	r0, r4
   b7992:	f000 fd2b 	bl	b83ec <_Bfree>
   b7996:	4631      	mov	r1, r6
   b7998:	4620      	mov	r0, r4
   b799a:	f000 fd27 	bl	b83ec <_Bfree>
   b799e:	4629      	mov	r1, r5
   b79a0:	4620      	mov	r0, r4
   b79a2:	f000 fd23 	bl	b83ec <_Bfree>
   b79a6:	e61a      	b.n	b75de <_strtod_l+0x666>
   b79a8:	f1ba 0f00 	cmp.w	sl, #0
   b79ac:	d11b      	bne.n	b79e6 <_strtod_l+0xa6e>
   b79ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b79b2:	b9f3      	cbnz	r3, b79f2 <_strtod_l+0xa7a>
   b79b4:	4b6c      	ldr	r3, [pc, #432]	; (b7b68 <_strtod_l+0xbf0>)
   b79b6:	2200      	movs	r2, #0
   b79b8:	4640      	mov	r0, r8
   b79ba:	4649      	mov	r1, r9
   b79bc:	f7ff f97a 	bl	b6cb4 <__aeabi_dcmplt>
   b79c0:	b9d0      	cbnz	r0, b79f8 <_strtod_l+0xa80>
   b79c2:	4640      	mov	r0, r8
   b79c4:	4649      	mov	r1, r9
   b79c6:	4b6c      	ldr	r3, [pc, #432]	; (b7b78 <_strtod_l+0xc00>)
   b79c8:	2200      	movs	r2, #0
   b79ca:	f7fe ff01 	bl	b67d0 <__aeabi_dmul>
   b79ce:	4680      	mov	r8, r0
   b79d0:	4689      	mov	r9, r1
   b79d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b79d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b79da:	9315      	str	r3, [sp, #84]	; 0x54
   b79dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b79e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b79e4:	e79d      	b.n	b7922 <_strtod_l+0x9aa>
   b79e6:	f1ba 0f01 	cmp.w	sl, #1
   b79ea:	d102      	bne.n	b79f2 <_strtod_l+0xa7a>
   b79ec:	2f00      	cmp	r7, #0
   b79ee:	f43f ad83 	beq.w	b74f8 <_strtod_l+0x580>
   b79f2:	4b62      	ldr	r3, [pc, #392]	; (b7b7c <_strtod_l+0xc04>)
   b79f4:	2200      	movs	r2, #0
   b79f6:	e78e      	b.n	b7916 <_strtod_l+0x99e>
   b79f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; b7b78 <_strtod_l+0xc00>
   b79fc:	f04f 0800 	mov.w	r8, #0
   b7a00:	e7e7      	b.n	b79d2 <_strtod_l+0xa5a>
   b7a02:	4b5d      	ldr	r3, [pc, #372]	; (b7b78 <_strtod_l+0xc00>)
   b7a04:	4640      	mov	r0, r8
   b7a06:	4649      	mov	r1, r9
   b7a08:	2200      	movs	r2, #0
   b7a0a:	f7fe fee1 	bl	b67d0 <__aeabi_dmul>
   b7a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7a10:	4680      	mov	r8, r0
   b7a12:	4689      	mov	r9, r1
   b7a14:	b933      	cbnz	r3, b7a24 <_strtod_l+0xaac>
   b7a16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b7a1a:	900e      	str	r0, [sp, #56]	; 0x38
   b7a1c:	930f      	str	r3, [sp, #60]	; 0x3c
   b7a1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b7a22:	e7dd      	b.n	b79e0 <_strtod_l+0xa68>
   b7a24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b7a28:	e7f9      	b.n	b7a1e <_strtod_l+0xaa6>
   b7a2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b7a2e:	9b04      	ldr	r3, [sp, #16]
   b7a30:	2b00      	cmp	r3, #0
   b7a32:	d1a8      	bne.n	b7986 <_strtod_l+0xa0e>
   b7a34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b7a38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b7a3a:	0d1b      	lsrs	r3, r3, #20
   b7a3c:	051b      	lsls	r3, r3, #20
   b7a3e:	429a      	cmp	r2, r3
   b7a40:	d1a1      	bne.n	b7986 <_strtod_l+0xa0e>
   b7a42:	4640      	mov	r0, r8
   b7a44:	4649      	mov	r1, r9
   b7a46:	f001 f96f 	bl	b8d28 <__aeabi_d2lz>
   b7a4a:	f7fe fe93 	bl	b6774 <__aeabi_l2d>
   b7a4e:	4602      	mov	r2, r0
   b7a50:	460b      	mov	r3, r1
   b7a52:	4640      	mov	r0, r8
   b7a54:	4649      	mov	r1, r9
   b7a56:	f7fe fd03 	bl	b6460 <__aeabi_dsub>
   b7a5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7a5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b7a60:	ea43 030a 	orr.w	r3, r3, sl
   b7a64:	4313      	orrs	r3, r2
   b7a66:	4680      	mov	r8, r0
   b7a68:	4689      	mov	r9, r1
   b7a6a:	d055      	beq.n	b7b18 <_strtod_l+0xba0>
   b7a6c:	a336      	add	r3, pc, #216	; (adr r3, b7b48 <_strtod_l+0xbd0>)
   b7a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7a72:	f7ff f91f 	bl	b6cb4 <__aeabi_dcmplt>
   b7a76:	2800      	cmp	r0, #0
   b7a78:	f47f acd0 	bne.w	b741c <_strtod_l+0x4a4>
   b7a7c:	a334      	add	r3, pc, #208	; (adr r3, b7b50 <_strtod_l+0xbd8>)
   b7a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7a82:	4640      	mov	r0, r8
   b7a84:	4649      	mov	r1, r9
   b7a86:	f7ff f933 	bl	b6cf0 <__aeabi_dcmpgt>
   b7a8a:	2800      	cmp	r0, #0
   b7a8c:	f43f af7b 	beq.w	b7986 <_strtod_l+0xa0e>
   b7a90:	e4c4      	b.n	b741c <_strtod_l+0x4a4>
   b7a92:	9b04      	ldr	r3, [sp, #16]
   b7a94:	b333      	cbz	r3, b7ae4 <_strtod_l+0xb6c>
   b7a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b7a98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b7a9c:	d822      	bhi.n	b7ae4 <_strtod_l+0xb6c>
   b7a9e:	a32e      	add	r3, pc, #184	; (adr r3, b7b58 <_strtod_l+0xbe0>)
   b7aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7aa4:	4640      	mov	r0, r8
   b7aa6:	4649      	mov	r1, r9
   b7aa8:	f7ff f90e 	bl	b6cc8 <__aeabi_dcmple>
   b7aac:	b1a0      	cbz	r0, b7ad8 <_strtod_l+0xb60>
   b7aae:	4649      	mov	r1, r9
   b7ab0:	4640      	mov	r0, r8
   b7ab2:	f7ff f927 	bl	b6d04 <__aeabi_d2uiz>
   b7ab6:	2801      	cmp	r0, #1
   b7ab8:	bf38      	it	cc
   b7aba:	2001      	movcc	r0, #1
   b7abc:	f7fe fe0e 	bl	b66dc <__aeabi_ui2d>
   b7ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7ac2:	4680      	mov	r8, r0
   b7ac4:	4689      	mov	r9, r1
   b7ac6:	bb23      	cbnz	r3, b7b12 <_strtod_l+0xb9a>
   b7ac8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b7acc:	9010      	str	r0, [sp, #64]	; 0x40
   b7ace:	9311      	str	r3, [sp, #68]	; 0x44
   b7ad0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b7ad4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b7ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7ada:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b7adc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b7ae0:	1a9b      	subs	r3, r3, r2
   b7ae2:	9309      	str	r3, [sp, #36]	; 0x24
   b7ae4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b7ae8:	eeb0 0a48 	vmov.f32	s0, s16
   b7aec:	eef0 0a68 	vmov.f32	s1, s17
   b7af0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b7af4:	f000 ffac 	bl	b8a50 <__ulp>
   b7af8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b7afc:	ec53 2b10 	vmov	r2, r3, d0
   b7b00:	f7fe fe66 	bl	b67d0 <__aeabi_dmul>
   b7b04:	ec53 2b18 	vmov	r2, r3, d8
   b7b08:	f7fe fcac 	bl	b6464 <__adddf3>
   b7b0c:	4682      	mov	sl, r0
   b7b0e:	468b      	mov	fp, r1
   b7b10:	e78d      	b.n	b7a2e <_strtod_l+0xab6>
   b7b12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b7b16:	e7db      	b.n	b7ad0 <_strtod_l+0xb58>
   b7b18:	a311      	add	r3, pc, #68	; (adr r3, b7b60 <_strtod_l+0xbe8>)
   b7b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b1e:	f7ff f8c9 	bl	b6cb4 <__aeabi_dcmplt>
   b7b22:	e7b2      	b.n	b7a8a <_strtod_l+0xb12>
   b7b24:	2300      	movs	r3, #0
   b7b26:	930a      	str	r3, [sp, #40]	; 0x28
   b7b28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b7b2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7b2c:	6013      	str	r3, [r2, #0]
   b7b2e:	f7ff ba6b 	b.w	b7008 <_strtod_l+0x90>
   b7b32:	2a65      	cmp	r2, #101	; 0x65
   b7b34:	f43f ab5f 	beq.w	b71f6 <_strtod_l+0x27e>
   b7b38:	2a45      	cmp	r2, #69	; 0x45
   b7b3a:	f43f ab5c 	beq.w	b71f6 <_strtod_l+0x27e>
   b7b3e:	2301      	movs	r3, #1
   b7b40:	f7ff bb94 	b.w	b726c <_strtod_l+0x2f4>
   b7b44:	f3af 8000 	nop.w
   b7b48:	94a03595 	.word	0x94a03595
   b7b4c:	3fdfffff 	.word	0x3fdfffff
   b7b50:	35afe535 	.word	0x35afe535
   b7b54:	3fe00000 	.word	0x3fe00000
   b7b58:	ffc00000 	.word	0xffc00000
   b7b5c:	41dfffff 	.word	0x41dfffff
   b7b60:	94a03595 	.word	0x94a03595
   b7b64:	3fcfffff 	.word	0x3fcfffff
   b7b68:	3ff00000 	.word	0x3ff00000
   b7b6c:	7ff00000 	.word	0x7ff00000
   b7b70:	7fe00000 	.word	0x7fe00000
   b7b74:	7c9fffff 	.word	0x7c9fffff
   b7b78:	3fe00000 	.word	0x3fe00000
   b7b7c:	bff00000 	.word	0xbff00000
   b7b80:	7fefffff 	.word	0x7fefffff

000b7b84 <strtod>:
   b7b84:	460a      	mov	r2, r1
   b7b86:	4601      	mov	r1, r0
   b7b88:	4802      	ldr	r0, [pc, #8]	; (b7b94 <strtod+0x10>)
   b7b8a:	4b03      	ldr	r3, [pc, #12]	; (b7b98 <strtod+0x14>)
   b7b8c:	6800      	ldr	r0, [r0, #0]
   b7b8e:	f7ff b9f3 	b.w	b6f78 <_strtod_l>
   b7b92:	bf00      	nop
   b7b94:	2003e460 	.word	0x2003e460
   b7b98:	2003e4cc 	.word	0x2003e4cc

000b7b9c <__register_exitproc>:
   b7b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7ba0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7c5c <__register_exitproc+0xc0>
   b7ba4:	4606      	mov	r6, r0
   b7ba6:	f8d8 0000 	ldr.w	r0, [r8]
   b7baa:	461f      	mov	r7, r3
   b7bac:	460d      	mov	r5, r1
   b7bae:	4691      	mov	r9, r2
   b7bb0:	f000 fbc6 	bl	b8340 <__retarget_lock_acquire_recursive>
   b7bb4:	4b25      	ldr	r3, [pc, #148]	; (b7c4c <__register_exitproc+0xb0>)
   b7bb6:	681c      	ldr	r4, [r3, #0]
   b7bb8:	b934      	cbnz	r4, b7bc8 <__register_exitproc+0x2c>
   b7bba:	4c25      	ldr	r4, [pc, #148]	; (b7c50 <__register_exitproc+0xb4>)
   b7bbc:	601c      	str	r4, [r3, #0]
   b7bbe:	4b25      	ldr	r3, [pc, #148]	; (b7c54 <__register_exitproc+0xb8>)
   b7bc0:	b113      	cbz	r3, b7bc8 <__register_exitproc+0x2c>
   b7bc2:	681b      	ldr	r3, [r3, #0]
   b7bc4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7bc8:	6863      	ldr	r3, [r4, #4]
   b7bca:	2b1f      	cmp	r3, #31
   b7bcc:	dd07      	ble.n	b7bde <__register_exitproc+0x42>
   b7bce:	f8d8 0000 	ldr.w	r0, [r8]
   b7bd2:	f000 fbb7 	bl	b8344 <__retarget_lock_release_recursive>
   b7bd6:	f04f 30ff 	mov.w	r0, #4294967295
   b7bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7bde:	b34e      	cbz	r6, b7c34 <__register_exitproc+0x98>
   b7be0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7be4:	b988      	cbnz	r0, b7c0a <__register_exitproc+0x6e>
   b7be6:	4b1c      	ldr	r3, [pc, #112]	; (b7c58 <__register_exitproc+0xbc>)
   b7be8:	b923      	cbnz	r3, b7bf4 <__register_exitproc+0x58>
   b7bea:	f8d8 0000 	ldr.w	r0, [r8]
   b7bee:	f000 fba8 	bl	b8342 <__retarget_lock_release>
   b7bf2:	e7f0      	b.n	b7bd6 <__register_exitproc+0x3a>
   b7bf4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7bf8:	f7fd fade 	bl	b51b8 <malloc>
   b7bfc:	2800      	cmp	r0, #0
   b7bfe:	d0f4      	beq.n	b7bea <__register_exitproc+0x4e>
   b7c00:	2300      	movs	r3, #0
   b7c02:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7c06:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7c0a:	6863      	ldr	r3, [r4, #4]
   b7c0c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7c10:	2201      	movs	r2, #1
   b7c12:	409a      	lsls	r2, r3
   b7c14:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7c18:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7c1c:	4313      	orrs	r3, r2
   b7c1e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7c22:	2e02      	cmp	r6, #2
   b7c24:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7c28:	bf02      	ittt	eq
   b7c2a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7c2e:	4313      	orreq	r3, r2
   b7c30:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7c34:	6863      	ldr	r3, [r4, #4]
   b7c36:	f8d8 0000 	ldr.w	r0, [r8]
   b7c3a:	1c5a      	adds	r2, r3, #1
   b7c3c:	3302      	adds	r3, #2
   b7c3e:	6062      	str	r2, [r4, #4]
   b7c40:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7c44:	f000 fb7e 	bl	b8344 <__retarget_lock_release_recursive>
   b7c48:	2000      	movs	r0, #0
   b7c4a:	e7c6      	b.n	b7bda <__register_exitproc+0x3e>
   b7c4c:	2003e7e8 	.word	0x2003e7e8
   b7c50:	2003e75c 	.word	0x2003e75c
   b7c54:	00000000 	.word	0x00000000
   b7c58:	000b51b9 	.word	0x000b51b9
   b7c5c:	2003e4c4 	.word	0x2003e4c4

000b7c60 <rshift>:
   b7c60:	6903      	ldr	r3, [r0, #16]
   b7c62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b7c66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7c6a:	ea4f 1261 	mov.w	r2, r1, asr #5
   b7c6e:	f100 0414 	add.w	r4, r0, #20
   b7c72:	dd45      	ble.n	b7d00 <rshift+0xa0>
   b7c74:	f011 011f 	ands.w	r1, r1, #31
   b7c78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b7c7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b7c80:	d10c      	bne.n	b7c9c <rshift+0x3c>
   b7c82:	f100 0710 	add.w	r7, r0, #16
   b7c86:	4629      	mov	r1, r5
   b7c88:	42b1      	cmp	r1, r6
   b7c8a:	d334      	bcc.n	b7cf6 <rshift+0x96>
   b7c8c:	1a9b      	subs	r3, r3, r2
   b7c8e:	009b      	lsls	r3, r3, #2
   b7c90:	1eea      	subs	r2, r5, #3
   b7c92:	4296      	cmp	r6, r2
   b7c94:	bf38      	it	cc
   b7c96:	2300      	movcc	r3, #0
   b7c98:	4423      	add	r3, r4
   b7c9a:	e015      	b.n	b7cc8 <rshift+0x68>
   b7c9c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b7ca0:	f1c1 0820 	rsb	r8, r1, #32
   b7ca4:	40cf      	lsrs	r7, r1
   b7ca6:	f105 0e04 	add.w	lr, r5, #4
   b7caa:	46a1      	mov	r9, r4
   b7cac:	4576      	cmp	r6, lr
   b7cae:	46f4      	mov	ip, lr
   b7cb0:	d815      	bhi.n	b7cde <rshift+0x7e>
   b7cb2:	1a9a      	subs	r2, r3, r2
   b7cb4:	0092      	lsls	r2, r2, #2
   b7cb6:	3a04      	subs	r2, #4
   b7cb8:	3501      	adds	r5, #1
   b7cba:	42ae      	cmp	r6, r5
   b7cbc:	bf38      	it	cc
   b7cbe:	2200      	movcc	r2, #0
   b7cc0:	18a3      	adds	r3, r4, r2
   b7cc2:	50a7      	str	r7, [r4, r2]
   b7cc4:	b107      	cbz	r7, b7cc8 <rshift+0x68>
   b7cc6:	3304      	adds	r3, #4
   b7cc8:	1b1a      	subs	r2, r3, r4
   b7cca:	42a3      	cmp	r3, r4
   b7ccc:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b7cd0:	bf08      	it	eq
   b7cd2:	2300      	moveq	r3, #0
   b7cd4:	6102      	str	r2, [r0, #16]
   b7cd6:	bf08      	it	eq
   b7cd8:	6143      	streq	r3, [r0, #20]
   b7cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7cde:	f8dc c000 	ldr.w	ip, [ip]
   b7ce2:	fa0c fc08 	lsl.w	ip, ip, r8
   b7ce6:	ea4c 0707 	orr.w	r7, ip, r7
   b7cea:	f849 7b04 	str.w	r7, [r9], #4
   b7cee:	f85e 7b04 	ldr.w	r7, [lr], #4
   b7cf2:	40cf      	lsrs	r7, r1
   b7cf4:	e7da      	b.n	b7cac <rshift+0x4c>
   b7cf6:	f851 cb04 	ldr.w	ip, [r1], #4
   b7cfa:	f847 cf04 	str.w	ip, [r7, #4]!
   b7cfe:	e7c3      	b.n	b7c88 <rshift+0x28>
   b7d00:	4623      	mov	r3, r4
   b7d02:	e7e1      	b.n	b7cc8 <rshift+0x68>

000b7d04 <__hexdig_fun>:
   b7d04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7d08:	2b09      	cmp	r3, #9
   b7d0a:	d802      	bhi.n	b7d12 <__hexdig_fun+0xe>
   b7d0c:	3820      	subs	r0, #32
   b7d0e:	b2c0      	uxtb	r0, r0
   b7d10:	4770      	bx	lr
   b7d12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7d16:	2b05      	cmp	r3, #5
   b7d18:	d801      	bhi.n	b7d1e <__hexdig_fun+0x1a>
   b7d1a:	3847      	subs	r0, #71	; 0x47
   b7d1c:	e7f7      	b.n	b7d0e <__hexdig_fun+0xa>
   b7d1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7d22:	2b05      	cmp	r3, #5
   b7d24:	d801      	bhi.n	b7d2a <__hexdig_fun+0x26>
   b7d26:	3827      	subs	r0, #39	; 0x27
   b7d28:	e7f1      	b.n	b7d0e <__hexdig_fun+0xa>
   b7d2a:	2000      	movs	r0, #0
   b7d2c:	4770      	bx	lr
	...

000b7d30 <__gethex>:
   b7d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d34:	ed2d 8b02 	vpush	{d8}
   b7d38:	b089      	sub	sp, #36	; 0x24
   b7d3a:	ee08 0a10 	vmov	s16, r0
   b7d3e:	9304      	str	r3, [sp, #16]
   b7d40:	4bb4      	ldr	r3, [pc, #720]	; (b8014 <__gethex+0x2e4>)
   b7d42:	681b      	ldr	r3, [r3, #0]
   b7d44:	9301      	str	r3, [sp, #4]
   b7d46:	4618      	mov	r0, r3
   b7d48:	468b      	mov	fp, r1
   b7d4a:	4690      	mov	r8, r2
   b7d4c:	f7ff f8db 	bl	b6f06 <strlen>
   b7d50:	9b01      	ldr	r3, [sp, #4]
   b7d52:	f8db 2000 	ldr.w	r2, [fp]
   b7d56:	4403      	add	r3, r0
   b7d58:	4682      	mov	sl, r0
   b7d5a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b7d5e:	9305      	str	r3, [sp, #20]
   b7d60:	1c93      	adds	r3, r2, #2
   b7d62:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b7d66:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b7d6a:	32fe      	adds	r2, #254	; 0xfe
   b7d6c:	18d1      	adds	r1, r2, r3
   b7d6e:	461f      	mov	r7, r3
   b7d70:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7d74:	9100      	str	r1, [sp, #0]
   b7d76:	2830      	cmp	r0, #48	; 0x30
   b7d78:	d0f8      	beq.n	b7d6c <__gethex+0x3c>
   b7d7a:	f7ff ffc3 	bl	b7d04 <__hexdig_fun>
   b7d7e:	4604      	mov	r4, r0
   b7d80:	2800      	cmp	r0, #0
   b7d82:	d13a      	bne.n	b7dfa <__gethex+0xca>
   b7d84:	9901      	ldr	r1, [sp, #4]
   b7d86:	4652      	mov	r2, sl
   b7d88:	4638      	mov	r0, r7
   b7d8a:	f7ff f8c4 	bl	b6f16 <strncmp>
   b7d8e:	4605      	mov	r5, r0
   b7d90:	2800      	cmp	r0, #0
   b7d92:	d168      	bne.n	b7e66 <__gethex+0x136>
   b7d94:	f817 000a 	ldrb.w	r0, [r7, sl]
   b7d98:	eb07 060a 	add.w	r6, r7, sl
   b7d9c:	f7ff ffb2 	bl	b7d04 <__hexdig_fun>
   b7da0:	2800      	cmp	r0, #0
   b7da2:	d062      	beq.n	b7e6a <__gethex+0x13a>
   b7da4:	4633      	mov	r3, r6
   b7da6:	7818      	ldrb	r0, [r3, #0]
   b7da8:	2830      	cmp	r0, #48	; 0x30
   b7daa:	461f      	mov	r7, r3
   b7dac:	f103 0301 	add.w	r3, r3, #1
   b7db0:	d0f9      	beq.n	b7da6 <__gethex+0x76>
   b7db2:	f7ff ffa7 	bl	b7d04 <__hexdig_fun>
   b7db6:	2301      	movs	r3, #1
   b7db8:	fab0 f480 	clz	r4, r0
   b7dbc:	0964      	lsrs	r4, r4, #5
   b7dbe:	4635      	mov	r5, r6
   b7dc0:	9300      	str	r3, [sp, #0]
   b7dc2:	463a      	mov	r2, r7
   b7dc4:	4616      	mov	r6, r2
   b7dc6:	3201      	adds	r2, #1
   b7dc8:	7830      	ldrb	r0, [r6, #0]
   b7dca:	f7ff ff9b 	bl	b7d04 <__hexdig_fun>
   b7dce:	2800      	cmp	r0, #0
   b7dd0:	d1f8      	bne.n	b7dc4 <__gethex+0x94>
   b7dd2:	9901      	ldr	r1, [sp, #4]
   b7dd4:	4652      	mov	r2, sl
   b7dd6:	4630      	mov	r0, r6
   b7dd8:	f7ff f89d 	bl	b6f16 <strncmp>
   b7ddc:	b980      	cbnz	r0, b7e00 <__gethex+0xd0>
   b7dde:	b94d      	cbnz	r5, b7df4 <__gethex+0xc4>
   b7de0:	eb06 050a 	add.w	r5, r6, sl
   b7de4:	462a      	mov	r2, r5
   b7de6:	4616      	mov	r6, r2
   b7de8:	3201      	adds	r2, #1
   b7dea:	7830      	ldrb	r0, [r6, #0]
   b7dec:	f7ff ff8a 	bl	b7d04 <__hexdig_fun>
   b7df0:	2800      	cmp	r0, #0
   b7df2:	d1f8      	bne.n	b7de6 <__gethex+0xb6>
   b7df4:	1bad      	subs	r5, r5, r6
   b7df6:	00ad      	lsls	r5, r5, #2
   b7df8:	e004      	b.n	b7e04 <__gethex+0xd4>
   b7dfa:	2400      	movs	r4, #0
   b7dfc:	4625      	mov	r5, r4
   b7dfe:	e7e0      	b.n	b7dc2 <__gethex+0x92>
   b7e00:	2d00      	cmp	r5, #0
   b7e02:	d1f7      	bne.n	b7df4 <__gethex+0xc4>
   b7e04:	7833      	ldrb	r3, [r6, #0]
   b7e06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b7e0a:	2b50      	cmp	r3, #80	; 0x50
   b7e0c:	d13b      	bne.n	b7e86 <__gethex+0x156>
   b7e0e:	7873      	ldrb	r3, [r6, #1]
   b7e10:	2b2b      	cmp	r3, #43	; 0x2b
   b7e12:	d02c      	beq.n	b7e6e <__gethex+0x13e>
   b7e14:	2b2d      	cmp	r3, #45	; 0x2d
   b7e16:	d02e      	beq.n	b7e76 <__gethex+0x146>
   b7e18:	1c71      	adds	r1, r6, #1
   b7e1a:	f04f 0900 	mov.w	r9, #0
   b7e1e:	7808      	ldrb	r0, [r1, #0]
   b7e20:	f7ff ff70 	bl	b7d04 <__hexdig_fun>
   b7e24:	1e43      	subs	r3, r0, #1
   b7e26:	b2db      	uxtb	r3, r3
   b7e28:	2b18      	cmp	r3, #24
   b7e2a:	d82c      	bhi.n	b7e86 <__gethex+0x156>
   b7e2c:	f1a0 0210 	sub.w	r2, r0, #16
   b7e30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b7e34:	f7ff ff66 	bl	b7d04 <__hexdig_fun>
   b7e38:	1e43      	subs	r3, r0, #1
   b7e3a:	b2db      	uxtb	r3, r3
   b7e3c:	2b18      	cmp	r3, #24
   b7e3e:	d91d      	bls.n	b7e7c <__gethex+0x14c>
   b7e40:	f1b9 0f00 	cmp.w	r9, #0
   b7e44:	d000      	beq.n	b7e48 <__gethex+0x118>
   b7e46:	4252      	negs	r2, r2
   b7e48:	4415      	add	r5, r2
   b7e4a:	f8cb 1000 	str.w	r1, [fp]
   b7e4e:	b1e4      	cbz	r4, b7e8a <__gethex+0x15a>
   b7e50:	9b00      	ldr	r3, [sp, #0]
   b7e52:	2b00      	cmp	r3, #0
   b7e54:	bf14      	ite	ne
   b7e56:	2700      	movne	r7, #0
   b7e58:	2706      	moveq	r7, #6
   b7e5a:	4638      	mov	r0, r7
   b7e5c:	b009      	add	sp, #36	; 0x24
   b7e5e:	ecbd 8b02 	vpop	{d8}
   b7e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7e66:	463e      	mov	r6, r7
   b7e68:	4625      	mov	r5, r4
   b7e6a:	2401      	movs	r4, #1
   b7e6c:	e7ca      	b.n	b7e04 <__gethex+0xd4>
   b7e6e:	f04f 0900 	mov.w	r9, #0
   b7e72:	1cb1      	adds	r1, r6, #2
   b7e74:	e7d3      	b.n	b7e1e <__gethex+0xee>
   b7e76:	f04f 0901 	mov.w	r9, #1
   b7e7a:	e7fa      	b.n	b7e72 <__gethex+0x142>
   b7e7c:	230a      	movs	r3, #10
   b7e7e:	fb03 0202 	mla	r2, r3, r2, r0
   b7e82:	3a10      	subs	r2, #16
   b7e84:	e7d4      	b.n	b7e30 <__gethex+0x100>
   b7e86:	4631      	mov	r1, r6
   b7e88:	e7df      	b.n	b7e4a <__gethex+0x11a>
   b7e8a:	1bf3      	subs	r3, r6, r7
   b7e8c:	3b01      	subs	r3, #1
   b7e8e:	4621      	mov	r1, r4
   b7e90:	2b07      	cmp	r3, #7
   b7e92:	dc0b      	bgt.n	b7eac <__gethex+0x17c>
   b7e94:	ee18 0a10 	vmov	r0, s16
   b7e98:	f000 fa68 	bl	b836c <_Balloc>
   b7e9c:	4604      	mov	r4, r0
   b7e9e:	b940      	cbnz	r0, b7eb2 <__gethex+0x182>
   b7ea0:	4b5d      	ldr	r3, [pc, #372]	; (b8018 <__gethex+0x2e8>)
   b7ea2:	4602      	mov	r2, r0
   b7ea4:	21de      	movs	r1, #222	; 0xde
   b7ea6:	485d      	ldr	r0, [pc, #372]	; (b801c <__gethex+0x2ec>)
   b7ea8:	f7fd f9b6 	bl	b5218 <__assert_func>
   b7eac:	3101      	adds	r1, #1
   b7eae:	105b      	asrs	r3, r3, #1
   b7eb0:	e7ee      	b.n	b7e90 <__gethex+0x160>
   b7eb2:	f100 0914 	add.w	r9, r0, #20
   b7eb6:	f04f 0b00 	mov.w	fp, #0
   b7eba:	f1ca 0301 	rsb	r3, sl, #1
   b7ebe:	f8cd 9008 	str.w	r9, [sp, #8]
   b7ec2:	f8cd b000 	str.w	fp, [sp]
   b7ec6:	9306      	str	r3, [sp, #24]
   b7ec8:	42b7      	cmp	r7, r6
   b7eca:	d340      	bcc.n	b7f4e <__gethex+0x21e>
   b7ecc:	9802      	ldr	r0, [sp, #8]
   b7ece:	9b00      	ldr	r3, [sp, #0]
   b7ed0:	f840 3b04 	str.w	r3, [r0], #4
   b7ed4:	eba0 0009 	sub.w	r0, r0, r9
   b7ed8:	1080      	asrs	r0, r0, #2
   b7eda:	0146      	lsls	r6, r0, #5
   b7edc:	6120      	str	r0, [r4, #16]
   b7ede:	4618      	mov	r0, r3
   b7ee0:	f000 fb36 	bl	b8550 <__hi0bits>
   b7ee4:	1a30      	subs	r0, r6, r0
   b7ee6:	f8d8 6000 	ldr.w	r6, [r8]
   b7eea:	42b0      	cmp	r0, r6
   b7eec:	dd63      	ble.n	b7fb6 <__gethex+0x286>
   b7eee:	1b87      	subs	r7, r0, r6
   b7ef0:	4639      	mov	r1, r7
   b7ef2:	4620      	mov	r0, r4
   b7ef4:	f000 feda 	bl	b8cac <__any_on>
   b7ef8:	4682      	mov	sl, r0
   b7efa:	b1a8      	cbz	r0, b7f28 <__gethex+0x1f8>
   b7efc:	1e7b      	subs	r3, r7, #1
   b7efe:	1159      	asrs	r1, r3, #5
   b7f00:	f003 021f 	and.w	r2, r3, #31
   b7f04:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b7f08:	f04f 0a01 	mov.w	sl, #1
   b7f0c:	fa0a f202 	lsl.w	r2, sl, r2
   b7f10:	420a      	tst	r2, r1
   b7f12:	d009      	beq.n	b7f28 <__gethex+0x1f8>
   b7f14:	4553      	cmp	r3, sl
   b7f16:	dd05      	ble.n	b7f24 <__gethex+0x1f4>
   b7f18:	1eb9      	subs	r1, r7, #2
   b7f1a:	4620      	mov	r0, r4
   b7f1c:	f000 fec6 	bl	b8cac <__any_on>
   b7f20:	2800      	cmp	r0, #0
   b7f22:	d145      	bne.n	b7fb0 <__gethex+0x280>
   b7f24:	f04f 0a02 	mov.w	sl, #2
   b7f28:	4639      	mov	r1, r7
   b7f2a:	4620      	mov	r0, r4
   b7f2c:	f7ff fe98 	bl	b7c60 <rshift>
   b7f30:	443d      	add	r5, r7
   b7f32:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b7f36:	42ab      	cmp	r3, r5
   b7f38:	da4c      	bge.n	b7fd4 <__gethex+0x2a4>
   b7f3a:	ee18 0a10 	vmov	r0, s16
   b7f3e:	4621      	mov	r1, r4
   b7f40:	f000 fa54 	bl	b83ec <_Bfree>
   b7f44:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b7f46:	2300      	movs	r3, #0
   b7f48:	6013      	str	r3, [r2, #0]
   b7f4a:	27a3      	movs	r7, #163	; 0xa3
   b7f4c:	e785      	b.n	b7e5a <__gethex+0x12a>
   b7f4e:	1e73      	subs	r3, r6, #1
   b7f50:	9a05      	ldr	r2, [sp, #20]
   b7f52:	9303      	str	r3, [sp, #12]
   b7f54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b7f58:	4293      	cmp	r3, r2
   b7f5a:	d019      	beq.n	b7f90 <__gethex+0x260>
   b7f5c:	f1bb 0f20 	cmp.w	fp, #32
   b7f60:	d107      	bne.n	b7f72 <__gethex+0x242>
   b7f62:	9b02      	ldr	r3, [sp, #8]
   b7f64:	9a00      	ldr	r2, [sp, #0]
   b7f66:	f843 2b04 	str.w	r2, [r3], #4
   b7f6a:	9302      	str	r3, [sp, #8]
   b7f6c:	2300      	movs	r3, #0
   b7f6e:	9300      	str	r3, [sp, #0]
   b7f70:	469b      	mov	fp, r3
   b7f72:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b7f76:	f7ff fec5 	bl	b7d04 <__hexdig_fun>
   b7f7a:	9b00      	ldr	r3, [sp, #0]
   b7f7c:	f000 000f 	and.w	r0, r0, #15
   b7f80:	fa00 f00b 	lsl.w	r0, r0, fp
   b7f84:	4303      	orrs	r3, r0
   b7f86:	9300      	str	r3, [sp, #0]
   b7f88:	f10b 0b04 	add.w	fp, fp, #4
   b7f8c:	9b03      	ldr	r3, [sp, #12]
   b7f8e:	e00d      	b.n	b7fac <__gethex+0x27c>
   b7f90:	9b03      	ldr	r3, [sp, #12]
   b7f92:	9a06      	ldr	r2, [sp, #24]
   b7f94:	4413      	add	r3, r2
   b7f96:	42bb      	cmp	r3, r7
   b7f98:	d3e0      	bcc.n	b7f5c <__gethex+0x22c>
   b7f9a:	4618      	mov	r0, r3
   b7f9c:	9901      	ldr	r1, [sp, #4]
   b7f9e:	9307      	str	r3, [sp, #28]
   b7fa0:	4652      	mov	r2, sl
   b7fa2:	f7fe ffb8 	bl	b6f16 <strncmp>
   b7fa6:	9b07      	ldr	r3, [sp, #28]
   b7fa8:	2800      	cmp	r0, #0
   b7faa:	d1d7      	bne.n	b7f5c <__gethex+0x22c>
   b7fac:	461e      	mov	r6, r3
   b7fae:	e78b      	b.n	b7ec8 <__gethex+0x198>
   b7fb0:	f04f 0a03 	mov.w	sl, #3
   b7fb4:	e7b8      	b.n	b7f28 <__gethex+0x1f8>
   b7fb6:	da0a      	bge.n	b7fce <__gethex+0x29e>
   b7fb8:	1a37      	subs	r7, r6, r0
   b7fba:	4621      	mov	r1, r4
   b7fbc:	ee18 0a10 	vmov	r0, s16
   b7fc0:	463a      	mov	r2, r7
   b7fc2:	f000 fc2f 	bl	b8824 <__lshift>
   b7fc6:	1bed      	subs	r5, r5, r7
   b7fc8:	4604      	mov	r4, r0
   b7fca:	f100 0914 	add.w	r9, r0, #20
   b7fce:	f04f 0a00 	mov.w	sl, #0
   b7fd2:	e7ae      	b.n	b7f32 <__gethex+0x202>
   b7fd4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b7fd8:	42a8      	cmp	r0, r5
   b7fda:	dd72      	ble.n	b80c2 <__gethex+0x392>
   b7fdc:	1b45      	subs	r5, r0, r5
   b7fde:	42ae      	cmp	r6, r5
   b7fe0:	dc36      	bgt.n	b8050 <__gethex+0x320>
   b7fe2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b7fe6:	2b02      	cmp	r3, #2
   b7fe8:	d02a      	beq.n	b8040 <__gethex+0x310>
   b7fea:	2b03      	cmp	r3, #3
   b7fec:	d02c      	beq.n	b8048 <__gethex+0x318>
   b7fee:	2b01      	cmp	r3, #1
   b7ff0:	d11c      	bne.n	b802c <__gethex+0x2fc>
   b7ff2:	42ae      	cmp	r6, r5
   b7ff4:	d11a      	bne.n	b802c <__gethex+0x2fc>
   b7ff6:	2e01      	cmp	r6, #1
   b7ff8:	d112      	bne.n	b8020 <__gethex+0x2f0>
   b7ffa:	9a04      	ldr	r2, [sp, #16]
   b7ffc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8000:	6013      	str	r3, [r2, #0]
   b8002:	2301      	movs	r3, #1
   b8004:	6123      	str	r3, [r4, #16]
   b8006:	f8c9 3000 	str.w	r3, [r9]
   b800a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b800c:	2762      	movs	r7, #98	; 0x62
   b800e:	601c      	str	r4, [r3, #0]
   b8010:	e723      	b.n	b7e5a <__gethex+0x12a>
   b8012:	bf00      	nop
   b8014:	000b9288 	.word	0x000b9288
   b8018:	000b91f1 	.word	0x000b91f1
   b801c:	000b9202 	.word	0x000b9202
   b8020:	1e71      	subs	r1, r6, #1
   b8022:	4620      	mov	r0, r4
   b8024:	f000 fe42 	bl	b8cac <__any_on>
   b8028:	2800      	cmp	r0, #0
   b802a:	d1e6      	bne.n	b7ffa <__gethex+0x2ca>
   b802c:	ee18 0a10 	vmov	r0, s16
   b8030:	4621      	mov	r1, r4
   b8032:	f000 f9db 	bl	b83ec <_Bfree>
   b8036:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8038:	2300      	movs	r3, #0
   b803a:	6013      	str	r3, [r2, #0]
   b803c:	2750      	movs	r7, #80	; 0x50
   b803e:	e70c      	b.n	b7e5a <__gethex+0x12a>
   b8040:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8042:	2b00      	cmp	r3, #0
   b8044:	d1f2      	bne.n	b802c <__gethex+0x2fc>
   b8046:	e7d8      	b.n	b7ffa <__gethex+0x2ca>
   b8048:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b804a:	2b00      	cmp	r3, #0
   b804c:	d1d5      	bne.n	b7ffa <__gethex+0x2ca>
   b804e:	e7ed      	b.n	b802c <__gethex+0x2fc>
   b8050:	1e6f      	subs	r7, r5, #1
   b8052:	f1ba 0f00 	cmp.w	sl, #0
   b8056:	d131      	bne.n	b80bc <__gethex+0x38c>
   b8058:	b127      	cbz	r7, b8064 <__gethex+0x334>
   b805a:	4639      	mov	r1, r7
   b805c:	4620      	mov	r0, r4
   b805e:	f000 fe25 	bl	b8cac <__any_on>
   b8062:	4682      	mov	sl, r0
   b8064:	117b      	asrs	r3, r7, #5
   b8066:	2101      	movs	r1, #1
   b8068:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b806c:	f007 071f 	and.w	r7, r7, #31
   b8070:	fa01 f707 	lsl.w	r7, r1, r7
   b8074:	421f      	tst	r7, r3
   b8076:	4629      	mov	r1, r5
   b8078:	4620      	mov	r0, r4
   b807a:	bf18      	it	ne
   b807c:	f04a 0a02 	orrne.w	sl, sl, #2
   b8080:	1b76      	subs	r6, r6, r5
   b8082:	f7ff fded 	bl	b7c60 <rshift>
   b8086:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b808a:	2702      	movs	r7, #2
   b808c:	f1ba 0f00 	cmp.w	sl, #0
   b8090:	d048      	beq.n	b8124 <__gethex+0x3f4>
   b8092:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b8096:	2b02      	cmp	r3, #2
   b8098:	d015      	beq.n	b80c6 <__gethex+0x396>
   b809a:	2b03      	cmp	r3, #3
   b809c:	d017      	beq.n	b80ce <__gethex+0x39e>
   b809e:	2b01      	cmp	r3, #1
   b80a0:	d109      	bne.n	b80b6 <__gethex+0x386>
   b80a2:	f01a 0f02 	tst.w	sl, #2
   b80a6:	d006      	beq.n	b80b6 <__gethex+0x386>
   b80a8:	f8d9 0000 	ldr.w	r0, [r9]
   b80ac:	ea4a 0a00 	orr.w	sl, sl, r0
   b80b0:	f01a 0f01 	tst.w	sl, #1
   b80b4:	d10e      	bne.n	b80d4 <__gethex+0x3a4>
   b80b6:	f047 0710 	orr.w	r7, r7, #16
   b80ba:	e033      	b.n	b8124 <__gethex+0x3f4>
   b80bc:	f04f 0a01 	mov.w	sl, #1
   b80c0:	e7d0      	b.n	b8064 <__gethex+0x334>
   b80c2:	2701      	movs	r7, #1
   b80c4:	e7e2      	b.n	b808c <__gethex+0x35c>
   b80c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b80c8:	f1c3 0301 	rsb	r3, r3, #1
   b80cc:	9315      	str	r3, [sp, #84]	; 0x54
   b80ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b80d0:	2b00      	cmp	r3, #0
   b80d2:	d0f0      	beq.n	b80b6 <__gethex+0x386>
   b80d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b80d8:	f104 0314 	add.w	r3, r4, #20
   b80dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b80e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b80e4:	f04f 0c00 	mov.w	ip, #0
   b80e8:	4618      	mov	r0, r3
   b80ea:	f853 2b04 	ldr.w	r2, [r3], #4
   b80ee:	f1b2 3fff 	cmp.w	r2, #4294967295
   b80f2:	d01c      	beq.n	b812e <__gethex+0x3fe>
   b80f4:	3201      	adds	r2, #1
   b80f6:	6002      	str	r2, [r0, #0]
   b80f8:	2f02      	cmp	r7, #2
   b80fa:	f104 0314 	add.w	r3, r4, #20
   b80fe:	d13f      	bne.n	b8180 <__gethex+0x450>
   b8100:	f8d8 2000 	ldr.w	r2, [r8]
   b8104:	3a01      	subs	r2, #1
   b8106:	42b2      	cmp	r2, r6
   b8108:	d10a      	bne.n	b8120 <__gethex+0x3f0>
   b810a:	1171      	asrs	r1, r6, #5
   b810c:	2201      	movs	r2, #1
   b810e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b8112:	f006 061f 	and.w	r6, r6, #31
   b8116:	fa02 f606 	lsl.w	r6, r2, r6
   b811a:	421e      	tst	r6, r3
   b811c:	bf18      	it	ne
   b811e:	4617      	movne	r7, r2
   b8120:	f047 0720 	orr.w	r7, r7, #32
   b8124:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b8126:	601c      	str	r4, [r3, #0]
   b8128:	9b04      	ldr	r3, [sp, #16]
   b812a:	601d      	str	r5, [r3, #0]
   b812c:	e695      	b.n	b7e5a <__gethex+0x12a>
   b812e:	4299      	cmp	r1, r3
   b8130:	f843 cc04 	str.w	ip, [r3, #-4]
   b8134:	d8d8      	bhi.n	b80e8 <__gethex+0x3b8>
   b8136:	68a3      	ldr	r3, [r4, #8]
   b8138:	459b      	cmp	fp, r3
   b813a:	db19      	blt.n	b8170 <__gethex+0x440>
   b813c:	6861      	ldr	r1, [r4, #4]
   b813e:	ee18 0a10 	vmov	r0, s16
   b8142:	3101      	adds	r1, #1
   b8144:	f000 f912 	bl	b836c <_Balloc>
   b8148:	4681      	mov	r9, r0
   b814a:	b918      	cbnz	r0, b8154 <__gethex+0x424>
   b814c:	4b1a      	ldr	r3, [pc, #104]	; (b81b8 <__gethex+0x488>)
   b814e:	4602      	mov	r2, r0
   b8150:	2184      	movs	r1, #132	; 0x84
   b8152:	e6a8      	b.n	b7ea6 <__gethex+0x176>
   b8154:	6922      	ldr	r2, [r4, #16]
   b8156:	3202      	adds	r2, #2
   b8158:	f104 010c 	add.w	r1, r4, #12
   b815c:	0092      	lsls	r2, r2, #2
   b815e:	300c      	adds	r0, #12
   b8160:	f7fe fe67 	bl	b6e32 <memcpy>
   b8164:	4621      	mov	r1, r4
   b8166:	ee18 0a10 	vmov	r0, s16
   b816a:	f000 f93f 	bl	b83ec <_Bfree>
   b816e:	464c      	mov	r4, r9
   b8170:	6923      	ldr	r3, [r4, #16]
   b8172:	1c5a      	adds	r2, r3, #1
   b8174:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b8178:	6122      	str	r2, [r4, #16]
   b817a:	2201      	movs	r2, #1
   b817c:	615a      	str	r2, [r3, #20]
   b817e:	e7bb      	b.n	b80f8 <__gethex+0x3c8>
   b8180:	6922      	ldr	r2, [r4, #16]
   b8182:	455a      	cmp	r2, fp
   b8184:	dd0b      	ble.n	b819e <__gethex+0x46e>
   b8186:	2101      	movs	r1, #1
   b8188:	4620      	mov	r0, r4
   b818a:	f7ff fd69 	bl	b7c60 <rshift>
   b818e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b8192:	3501      	adds	r5, #1
   b8194:	42ab      	cmp	r3, r5
   b8196:	f6ff aed0 	blt.w	b7f3a <__gethex+0x20a>
   b819a:	2701      	movs	r7, #1
   b819c:	e7c0      	b.n	b8120 <__gethex+0x3f0>
   b819e:	f016 061f 	ands.w	r6, r6, #31
   b81a2:	d0fa      	beq.n	b819a <__gethex+0x46a>
   b81a4:	4453      	add	r3, sl
   b81a6:	f1c6 0620 	rsb	r6, r6, #32
   b81aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b81ae:	f000 f9cf 	bl	b8550 <__hi0bits>
   b81b2:	42b0      	cmp	r0, r6
   b81b4:	dbe7      	blt.n	b8186 <__gethex+0x456>
   b81b6:	e7f0      	b.n	b819a <__gethex+0x46a>
   b81b8:	000b91f1 	.word	0x000b91f1

000b81bc <L_shift>:
   b81bc:	f1c2 0208 	rsb	r2, r2, #8
   b81c0:	0092      	lsls	r2, r2, #2
   b81c2:	b570      	push	{r4, r5, r6, lr}
   b81c4:	f1c2 0620 	rsb	r6, r2, #32
   b81c8:	6843      	ldr	r3, [r0, #4]
   b81ca:	6804      	ldr	r4, [r0, #0]
   b81cc:	fa03 f506 	lsl.w	r5, r3, r6
   b81d0:	432c      	orrs	r4, r5
   b81d2:	40d3      	lsrs	r3, r2
   b81d4:	6004      	str	r4, [r0, #0]
   b81d6:	f840 3f04 	str.w	r3, [r0, #4]!
   b81da:	4288      	cmp	r0, r1
   b81dc:	d3f4      	bcc.n	b81c8 <L_shift+0xc>
   b81de:	bd70      	pop	{r4, r5, r6, pc}

000b81e0 <__match>:
   b81e0:	b530      	push	{r4, r5, lr}
   b81e2:	6803      	ldr	r3, [r0, #0]
   b81e4:	3301      	adds	r3, #1
   b81e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b81ea:	b914      	cbnz	r4, b81f2 <__match+0x12>
   b81ec:	6003      	str	r3, [r0, #0]
   b81ee:	2001      	movs	r0, #1
   b81f0:	bd30      	pop	{r4, r5, pc}
   b81f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b81f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b81fa:	2d19      	cmp	r5, #25
   b81fc:	bf98      	it	ls
   b81fe:	3220      	addls	r2, #32
   b8200:	42a2      	cmp	r2, r4
   b8202:	d0f0      	beq.n	b81e6 <__match+0x6>
   b8204:	2000      	movs	r0, #0
   b8206:	e7f3      	b.n	b81f0 <__match+0x10>

000b8208 <__hexnan>:
   b8208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b820c:	680b      	ldr	r3, [r1, #0]
   b820e:	115e      	asrs	r6, r3, #5
   b8210:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b8214:	f013 031f 	ands.w	r3, r3, #31
   b8218:	b087      	sub	sp, #28
   b821a:	bf18      	it	ne
   b821c:	3604      	addne	r6, #4
   b821e:	2500      	movs	r5, #0
   b8220:	1f37      	subs	r7, r6, #4
   b8222:	4690      	mov	r8, r2
   b8224:	6802      	ldr	r2, [r0, #0]
   b8226:	9301      	str	r3, [sp, #4]
   b8228:	4682      	mov	sl, r0
   b822a:	f846 5c04 	str.w	r5, [r6, #-4]
   b822e:	46b9      	mov	r9, r7
   b8230:	463c      	mov	r4, r7
   b8232:	9502      	str	r5, [sp, #8]
   b8234:	46ab      	mov	fp, r5
   b8236:	7851      	ldrb	r1, [r2, #1]
   b8238:	1c53      	adds	r3, r2, #1
   b823a:	9303      	str	r3, [sp, #12]
   b823c:	b341      	cbz	r1, b8290 <__hexnan+0x88>
   b823e:	4608      	mov	r0, r1
   b8240:	9205      	str	r2, [sp, #20]
   b8242:	9104      	str	r1, [sp, #16]
   b8244:	f7ff fd5e 	bl	b7d04 <__hexdig_fun>
   b8248:	2800      	cmp	r0, #0
   b824a:	d14f      	bne.n	b82ec <__hexnan+0xe4>
   b824c:	9904      	ldr	r1, [sp, #16]
   b824e:	9a05      	ldr	r2, [sp, #20]
   b8250:	2920      	cmp	r1, #32
   b8252:	d818      	bhi.n	b8286 <__hexnan+0x7e>
   b8254:	9b02      	ldr	r3, [sp, #8]
   b8256:	459b      	cmp	fp, r3
   b8258:	dd13      	ble.n	b8282 <__hexnan+0x7a>
   b825a:	454c      	cmp	r4, r9
   b825c:	d206      	bcs.n	b826c <__hexnan+0x64>
   b825e:	2d07      	cmp	r5, #7
   b8260:	dc04      	bgt.n	b826c <__hexnan+0x64>
   b8262:	462a      	mov	r2, r5
   b8264:	4649      	mov	r1, r9
   b8266:	4620      	mov	r0, r4
   b8268:	f7ff ffa8 	bl	b81bc <L_shift>
   b826c:	4544      	cmp	r4, r8
   b826e:	d950      	bls.n	b8312 <__hexnan+0x10a>
   b8270:	2300      	movs	r3, #0
   b8272:	f1a4 0904 	sub.w	r9, r4, #4
   b8276:	f844 3c04 	str.w	r3, [r4, #-4]
   b827a:	f8cd b008 	str.w	fp, [sp, #8]
   b827e:	464c      	mov	r4, r9
   b8280:	461d      	mov	r5, r3
   b8282:	9a03      	ldr	r2, [sp, #12]
   b8284:	e7d7      	b.n	b8236 <__hexnan+0x2e>
   b8286:	2929      	cmp	r1, #41	; 0x29
   b8288:	d156      	bne.n	b8338 <__hexnan+0x130>
   b828a:	3202      	adds	r2, #2
   b828c:	f8ca 2000 	str.w	r2, [sl]
   b8290:	f1bb 0f00 	cmp.w	fp, #0
   b8294:	d050      	beq.n	b8338 <__hexnan+0x130>
   b8296:	454c      	cmp	r4, r9
   b8298:	d206      	bcs.n	b82a8 <__hexnan+0xa0>
   b829a:	2d07      	cmp	r5, #7
   b829c:	dc04      	bgt.n	b82a8 <__hexnan+0xa0>
   b829e:	462a      	mov	r2, r5
   b82a0:	4649      	mov	r1, r9
   b82a2:	4620      	mov	r0, r4
   b82a4:	f7ff ff8a 	bl	b81bc <L_shift>
   b82a8:	4544      	cmp	r4, r8
   b82aa:	d934      	bls.n	b8316 <__hexnan+0x10e>
   b82ac:	f1a8 0204 	sub.w	r2, r8, #4
   b82b0:	4623      	mov	r3, r4
   b82b2:	f853 1b04 	ldr.w	r1, [r3], #4
   b82b6:	f842 1f04 	str.w	r1, [r2, #4]!
   b82ba:	429f      	cmp	r7, r3
   b82bc:	d2f9      	bcs.n	b82b2 <__hexnan+0xaa>
   b82be:	1b3b      	subs	r3, r7, r4
   b82c0:	f023 0303 	bic.w	r3, r3, #3
   b82c4:	3304      	adds	r3, #4
   b82c6:	3401      	adds	r4, #1
   b82c8:	3e03      	subs	r6, #3
   b82ca:	42b4      	cmp	r4, r6
   b82cc:	bf88      	it	hi
   b82ce:	2304      	movhi	r3, #4
   b82d0:	4443      	add	r3, r8
   b82d2:	2200      	movs	r2, #0
   b82d4:	f843 2b04 	str.w	r2, [r3], #4
   b82d8:	429f      	cmp	r7, r3
   b82da:	d2fb      	bcs.n	b82d4 <__hexnan+0xcc>
   b82dc:	683b      	ldr	r3, [r7, #0]
   b82de:	b91b      	cbnz	r3, b82e8 <__hexnan+0xe0>
   b82e0:	4547      	cmp	r7, r8
   b82e2:	d127      	bne.n	b8334 <__hexnan+0x12c>
   b82e4:	2301      	movs	r3, #1
   b82e6:	603b      	str	r3, [r7, #0]
   b82e8:	2005      	movs	r0, #5
   b82ea:	e026      	b.n	b833a <__hexnan+0x132>
   b82ec:	3501      	adds	r5, #1
   b82ee:	2d08      	cmp	r5, #8
   b82f0:	f10b 0b01 	add.w	fp, fp, #1
   b82f4:	dd06      	ble.n	b8304 <__hexnan+0xfc>
   b82f6:	4544      	cmp	r4, r8
   b82f8:	d9c3      	bls.n	b8282 <__hexnan+0x7a>
   b82fa:	2300      	movs	r3, #0
   b82fc:	f844 3c04 	str.w	r3, [r4, #-4]
   b8300:	2501      	movs	r5, #1
   b8302:	3c04      	subs	r4, #4
   b8304:	6822      	ldr	r2, [r4, #0]
   b8306:	f000 000f 	and.w	r0, r0, #15
   b830a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b830e:	6022      	str	r2, [r4, #0]
   b8310:	e7b7      	b.n	b8282 <__hexnan+0x7a>
   b8312:	2508      	movs	r5, #8
   b8314:	e7b5      	b.n	b8282 <__hexnan+0x7a>
   b8316:	9b01      	ldr	r3, [sp, #4]
   b8318:	2b00      	cmp	r3, #0
   b831a:	d0df      	beq.n	b82dc <__hexnan+0xd4>
   b831c:	f04f 32ff 	mov.w	r2, #4294967295
   b8320:	f1c3 0320 	rsb	r3, r3, #32
   b8324:	fa22 f303 	lsr.w	r3, r2, r3
   b8328:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b832c:	401a      	ands	r2, r3
   b832e:	f846 2c04 	str.w	r2, [r6, #-4]
   b8332:	e7d3      	b.n	b82dc <__hexnan+0xd4>
   b8334:	3f04      	subs	r7, #4
   b8336:	e7d1      	b.n	b82dc <__hexnan+0xd4>
   b8338:	2004      	movs	r0, #4
   b833a:	b007      	add	sp, #28
   b833c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8340 <__retarget_lock_acquire_recursive>:
   b8340:	4770      	bx	lr

000b8342 <__retarget_lock_release>:
   b8342:	4770      	bx	lr

000b8344 <__retarget_lock_release_recursive>:
   b8344:	4770      	bx	lr

000b8346 <__ascii_mbtowc>:
   b8346:	b082      	sub	sp, #8
   b8348:	b901      	cbnz	r1, b834c <__ascii_mbtowc+0x6>
   b834a:	a901      	add	r1, sp, #4
   b834c:	b142      	cbz	r2, b8360 <__ascii_mbtowc+0x1a>
   b834e:	b14b      	cbz	r3, b8364 <__ascii_mbtowc+0x1e>
   b8350:	7813      	ldrb	r3, [r2, #0]
   b8352:	600b      	str	r3, [r1, #0]
   b8354:	7812      	ldrb	r2, [r2, #0]
   b8356:	1e10      	subs	r0, r2, #0
   b8358:	bf18      	it	ne
   b835a:	2001      	movne	r0, #1
   b835c:	b002      	add	sp, #8
   b835e:	4770      	bx	lr
   b8360:	4610      	mov	r0, r2
   b8362:	e7fb      	b.n	b835c <__ascii_mbtowc+0x16>
   b8364:	f06f 0001 	mvn.w	r0, #1
   b8368:	e7f8      	b.n	b835c <__ascii_mbtowc+0x16>
	...

000b836c <_Balloc>:
   b836c:	b570      	push	{r4, r5, r6, lr}
   b836e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b8370:	4604      	mov	r4, r0
   b8372:	460d      	mov	r5, r1
   b8374:	b976      	cbnz	r6, b8394 <_Balloc+0x28>
   b8376:	2010      	movs	r0, #16
   b8378:	f7fc ff1e 	bl	b51b8 <malloc>
   b837c:	4602      	mov	r2, r0
   b837e:	6260      	str	r0, [r4, #36]	; 0x24
   b8380:	b920      	cbnz	r0, b838c <_Balloc+0x20>
   b8382:	4b18      	ldr	r3, [pc, #96]	; (b83e4 <_Balloc+0x78>)
   b8384:	4818      	ldr	r0, [pc, #96]	; (b83e8 <_Balloc+0x7c>)
   b8386:	2166      	movs	r1, #102	; 0x66
   b8388:	f7fc ff46 	bl	b5218 <__assert_func>
   b838c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b8390:	6006      	str	r6, [r0, #0]
   b8392:	60c6      	str	r6, [r0, #12]
   b8394:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b8396:	68f3      	ldr	r3, [r6, #12]
   b8398:	b183      	cbz	r3, b83bc <_Balloc+0x50>
   b839a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b839c:	68db      	ldr	r3, [r3, #12]
   b839e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b83a2:	b9b8      	cbnz	r0, b83d4 <_Balloc+0x68>
   b83a4:	2101      	movs	r1, #1
   b83a6:	fa01 f605 	lsl.w	r6, r1, r5
   b83aa:	1d72      	adds	r2, r6, #5
   b83ac:	0092      	lsls	r2, r2, #2
   b83ae:	4620      	mov	r0, r4
   b83b0:	f000 fc9d 	bl	b8cee <_calloc_r>
   b83b4:	b160      	cbz	r0, b83d0 <_Balloc+0x64>
   b83b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b83ba:	e00e      	b.n	b83da <_Balloc+0x6e>
   b83bc:	2221      	movs	r2, #33	; 0x21
   b83be:	2104      	movs	r1, #4
   b83c0:	4620      	mov	r0, r4
   b83c2:	f000 fc94 	bl	b8cee <_calloc_r>
   b83c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b83c8:	60f0      	str	r0, [r6, #12]
   b83ca:	68db      	ldr	r3, [r3, #12]
   b83cc:	2b00      	cmp	r3, #0
   b83ce:	d1e4      	bne.n	b839a <_Balloc+0x2e>
   b83d0:	2000      	movs	r0, #0
   b83d2:	bd70      	pop	{r4, r5, r6, pc}
   b83d4:	6802      	ldr	r2, [r0, #0]
   b83d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b83da:	2300      	movs	r3, #0
   b83dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b83e0:	e7f7      	b.n	b83d2 <_Balloc+0x66>
   b83e2:	bf00      	nop
   b83e4:	000b8ff9 	.word	0x000b8ff9
   b83e8:	000b929c 	.word	0x000b929c

000b83ec <_Bfree>:
   b83ec:	b570      	push	{r4, r5, r6, lr}
   b83ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b83f0:	4605      	mov	r5, r0
   b83f2:	460c      	mov	r4, r1
   b83f4:	b976      	cbnz	r6, b8414 <_Bfree+0x28>
   b83f6:	2010      	movs	r0, #16
   b83f8:	f7fc fede 	bl	b51b8 <malloc>
   b83fc:	4602      	mov	r2, r0
   b83fe:	6268      	str	r0, [r5, #36]	; 0x24
   b8400:	b920      	cbnz	r0, b840c <_Bfree+0x20>
   b8402:	4b09      	ldr	r3, [pc, #36]	; (b8428 <_Bfree+0x3c>)
   b8404:	4809      	ldr	r0, [pc, #36]	; (b842c <_Bfree+0x40>)
   b8406:	218a      	movs	r1, #138	; 0x8a
   b8408:	f7fc ff06 	bl	b5218 <__assert_func>
   b840c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b8410:	6006      	str	r6, [r0, #0]
   b8412:	60c6      	str	r6, [r0, #12]
   b8414:	b13c      	cbz	r4, b8426 <_Bfree+0x3a>
   b8416:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b8418:	6862      	ldr	r2, [r4, #4]
   b841a:	68db      	ldr	r3, [r3, #12]
   b841c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b8420:	6021      	str	r1, [r4, #0]
   b8422:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b8426:	bd70      	pop	{r4, r5, r6, pc}
   b8428:	000b8ff9 	.word	0x000b8ff9
   b842c:	000b929c 	.word	0x000b929c

000b8430 <__multadd>:
   b8430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8434:	690d      	ldr	r5, [r1, #16]
   b8436:	4607      	mov	r7, r0
   b8438:	460c      	mov	r4, r1
   b843a:	461e      	mov	r6, r3
   b843c:	f101 0c14 	add.w	ip, r1, #20
   b8440:	2000      	movs	r0, #0
   b8442:	f8dc 3000 	ldr.w	r3, [ip]
   b8446:	b299      	uxth	r1, r3
   b8448:	fb02 6101 	mla	r1, r2, r1, r6
   b844c:	0c1e      	lsrs	r6, r3, #16
   b844e:	0c0b      	lsrs	r3, r1, #16
   b8450:	fb02 3306 	mla	r3, r2, r6, r3
   b8454:	b289      	uxth	r1, r1
   b8456:	3001      	adds	r0, #1
   b8458:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b845c:	4285      	cmp	r5, r0
   b845e:	f84c 1b04 	str.w	r1, [ip], #4
   b8462:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b8466:	dcec      	bgt.n	b8442 <__multadd+0x12>
   b8468:	b30e      	cbz	r6, b84ae <__multadd+0x7e>
   b846a:	68a3      	ldr	r3, [r4, #8]
   b846c:	42ab      	cmp	r3, r5
   b846e:	dc19      	bgt.n	b84a4 <__multadd+0x74>
   b8470:	6861      	ldr	r1, [r4, #4]
   b8472:	4638      	mov	r0, r7
   b8474:	3101      	adds	r1, #1
   b8476:	f7ff ff79 	bl	b836c <_Balloc>
   b847a:	4680      	mov	r8, r0
   b847c:	b928      	cbnz	r0, b848a <__multadd+0x5a>
   b847e:	4602      	mov	r2, r0
   b8480:	4b0c      	ldr	r3, [pc, #48]	; (b84b4 <__multadd+0x84>)
   b8482:	480d      	ldr	r0, [pc, #52]	; (b84b8 <__multadd+0x88>)
   b8484:	21b5      	movs	r1, #181	; 0xb5
   b8486:	f7fc fec7 	bl	b5218 <__assert_func>
   b848a:	6922      	ldr	r2, [r4, #16]
   b848c:	3202      	adds	r2, #2
   b848e:	f104 010c 	add.w	r1, r4, #12
   b8492:	0092      	lsls	r2, r2, #2
   b8494:	300c      	adds	r0, #12
   b8496:	f7fe fccc 	bl	b6e32 <memcpy>
   b849a:	4621      	mov	r1, r4
   b849c:	4638      	mov	r0, r7
   b849e:	f7ff ffa5 	bl	b83ec <_Bfree>
   b84a2:	4644      	mov	r4, r8
   b84a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b84a8:	3501      	adds	r5, #1
   b84aa:	615e      	str	r6, [r3, #20]
   b84ac:	6125      	str	r5, [r4, #16]
   b84ae:	4620      	mov	r0, r4
   b84b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b84b4:	000b91f1 	.word	0x000b91f1
   b84b8:	000b929c 	.word	0x000b929c

000b84bc <__s2b>:
   b84bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b84c0:	460c      	mov	r4, r1
   b84c2:	4615      	mov	r5, r2
   b84c4:	461f      	mov	r7, r3
   b84c6:	2209      	movs	r2, #9
   b84c8:	3308      	adds	r3, #8
   b84ca:	4606      	mov	r6, r0
   b84cc:	fb93 f3f2 	sdiv	r3, r3, r2
   b84d0:	2100      	movs	r1, #0
   b84d2:	2201      	movs	r2, #1
   b84d4:	429a      	cmp	r2, r3
   b84d6:	db09      	blt.n	b84ec <__s2b+0x30>
   b84d8:	4630      	mov	r0, r6
   b84da:	f7ff ff47 	bl	b836c <_Balloc>
   b84de:	b940      	cbnz	r0, b84f2 <__s2b+0x36>
   b84e0:	4602      	mov	r2, r0
   b84e2:	4b19      	ldr	r3, [pc, #100]	; (b8548 <__s2b+0x8c>)
   b84e4:	4819      	ldr	r0, [pc, #100]	; (b854c <__s2b+0x90>)
   b84e6:	21ce      	movs	r1, #206	; 0xce
   b84e8:	f7fc fe96 	bl	b5218 <__assert_func>
   b84ec:	0052      	lsls	r2, r2, #1
   b84ee:	3101      	adds	r1, #1
   b84f0:	e7f0      	b.n	b84d4 <__s2b+0x18>
   b84f2:	9b08      	ldr	r3, [sp, #32]
   b84f4:	6143      	str	r3, [r0, #20]
   b84f6:	2d09      	cmp	r5, #9
   b84f8:	f04f 0301 	mov.w	r3, #1
   b84fc:	6103      	str	r3, [r0, #16]
   b84fe:	dd16      	ble.n	b852e <__s2b+0x72>
   b8500:	f104 0909 	add.w	r9, r4, #9
   b8504:	46c8      	mov	r8, r9
   b8506:	442c      	add	r4, r5
   b8508:	f818 3b01 	ldrb.w	r3, [r8], #1
   b850c:	4601      	mov	r1, r0
   b850e:	3b30      	subs	r3, #48	; 0x30
   b8510:	220a      	movs	r2, #10
   b8512:	4630      	mov	r0, r6
   b8514:	f7ff ff8c 	bl	b8430 <__multadd>
   b8518:	45a0      	cmp	r8, r4
   b851a:	d1f5      	bne.n	b8508 <__s2b+0x4c>
   b851c:	f1a5 0408 	sub.w	r4, r5, #8
   b8520:	444c      	add	r4, r9
   b8522:	1b2d      	subs	r5, r5, r4
   b8524:	1963      	adds	r3, r4, r5
   b8526:	42bb      	cmp	r3, r7
   b8528:	db04      	blt.n	b8534 <__s2b+0x78>
   b852a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b852e:	340a      	adds	r4, #10
   b8530:	2509      	movs	r5, #9
   b8532:	e7f6      	b.n	b8522 <__s2b+0x66>
   b8534:	f814 3b01 	ldrb.w	r3, [r4], #1
   b8538:	4601      	mov	r1, r0
   b853a:	3b30      	subs	r3, #48	; 0x30
   b853c:	220a      	movs	r2, #10
   b853e:	4630      	mov	r0, r6
   b8540:	f7ff ff76 	bl	b8430 <__multadd>
   b8544:	e7ee      	b.n	b8524 <__s2b+0x68>
   b8546:	bf00      	nop
   b8548:	000b91f1 	.word	0x000b91f1
   b854c:	000b929c 	.word	0x000b929c

000b8550 <__hi0bits>:
   b8550:	0c03      	lsrs	r3, r0, #16
   b8552:	041b      	lsls	r3, r3, #16
   b8554:	b9d3      	cbnz	r3, b858c <__hi0bits+0x3c>
   b8556:	0400      	lsls	r0, r0, #16
   b8558:	2310      	movs	r3, #16
   b855a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b855e:	bf04      	itt	eq
   b8560:	0200      	lsleq	r0, r0, #8
   b8562:	3308      	addeq	r3, #8
   b8564:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b8568:	bf04      	itt	eq
   b856a:	0100      	lsleq	r0, r0, #4
   b856c:	3304      	addeq	r3, #4
   b856e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b8572:	bf04      	itt	eq
   b8574:	0080      	lsleq	r0, r0, #2
   b8576:	3302      	addeq	r3, #2
   b8578:	2800      	cmp	r0, #0
   b857a:	db05      	blt.n	b8588 <__hi0bits+0x38>
   b857c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b8580:	f103 0301 	add.w	r3, r3, #1
   b8584:	bf08      	it	eq
   b8586:	2320      	moveq	r3, #32
   b8588:	4618      	mov	r0, r3
   b858a:	4770      	bx	lr
   b858c:	2300      	movs	r3, #0
   b858e:	e7e4      	b.n	b855a <__hi0bits+0xa>

000b8590 <__lo0bits>:
   b8590:	6803      	ldr	r3, [r0, #0]
   b8592:	f013 0207 	ands.w	r2, r3, #7
   b8596:	4601      	mov	r1, r0
   b8598:	d00b      	beq.n	b85b2 <__lo0bits+0x22>
   b859a:	07da      	lsls	r2, r3, #31
   b859c:	d423      	bmi.n	b85e6 <__lo0bits+0x56>
   b859e:	0798      	lsls	r0, r3, #30
   b85a0:	bf49      	itett	mi
   b85a2:	085b      	lsrmi	r3, r3, #1
   b85a4:	089b      	lsrpl	r3, r3, #2
   b85a6:	2001      	movmi	r0, #1
   b85a8:	600b      	strmi	r3, [r1, #0]
   b85aa:	bf5c      	itt	pl
   b85ac:	600b      	strpl	r3, [r1, #0]
   b85ae:	2002      	movpl	r0, #2
   b85b0:	4770      	bx	lr
   b85b2:	b298      	uxth	r0, r3
   b85b4:	b9a8      	cbnz	r0, b85e2 <__lo0bits+0x52>
   b85b6:	0c1b      	lsrs	r3, r3, #16
   b85b8:	2010      	movs	r0, #16
   b85ba:	b2da      	uxtb	r2, r3
   b85bc:	b90a      	cbnz	r2, b85c2 <__lo0bits+0x32>
   b85be:	3008      	adds	r0, #8
   b85c0:	0a1b      	lsrs	r3, r3, #8
   b85c2:	071a      	lsls	r2, r3, #28
   b85c4:	bf04      	itt	eq
   b85c6:	091b      	lsreq	r3, r3, #4
   b85c8:	3004      	addeq	r0, #4
   b85ca:	079a      	lsls	r2, r3, #30
   b85cc:	bf04      	itt	eq
   b85ce:	089b      	lsreq	r3, r3, #2
   b85d0:	3002      	addeq	r0, #2
   b85d2:	07da      	lsls	r2, r3, #31
   b85d4:	d403      	bmi.n	b85de <__lo0bits+0x4e>
   b85d6:	085b      	lsrs	r3, r3, #1
   b85d8:	f100 0001 	add.w	r0, r0, #1
   b85dc:	d005      	beq.n	b85ea <__lo0bits+0x5a>
   b85de:	600b      	str	r3, [r1, #0]
   b85e0:	4770      	bx	lr
   b85e2:	4610      	mov	r0, r2
   b85e4:	e7e9      	b.n	b85ba <__lo0bits+0x2a>
   b85e6:	2000      	movs	r0, #0
   b85e8:	4770      	bx	lr
   b85ea:	2020      	movs	r0, #32
   b85ec:	4770      	bx	lr
	...

000b85f0 <__i2b>:
   b85f0:	b510      	push	{r4, lr}
   b85f2:	460c      	mov	r4, r1
   b85f4:	2101      	movs	r1, #1
   b85f6:	f7ff feb9 	bl	b836c <_Balloc>
   b85fa:	4602      	mov	r2, r0
   b85fc:	b928      	cbnz	r0, b860a <__i2b+0x1a>
   b85fe:	4b05      	ldr	r3, [pc, #20]	; (b8614 <__i2b+0x24>)
   b8600:	4805      	ldr	r0, [pc, #20]	; (b8618 <__i2b+0x28>)
   b8602:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b8606:	f7fc fe07 	bl	b5218 <__assert_func>
   b860a:	2301      	movs	r3, #1
   b860c:	6144      	str	r4, [r0, #20]
   b860e:	6103      	str	r3, [r0, #16]
   b8610:	bd10      	pop	{r4, pc}
   b8612:	bf00      	nop
   b8614:	000b91f1 	.word	0x000b91f1
   b8618:	000b929c 	.word	0x000b929c

000b861c <__multiply>:
   b861c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8620:	4691      	mov	r9, r2
   b8622:	690a      	ldr	r2, [r1, #16]
   b8624:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b8628:	429a      	cmp	r2, r3
   b862a:	bfb8      	it	lt
   b862c:	460b      	movlt	r3, r1
   b862e:	460c      	mov	r4, r1
   b8630:	bfbc      	itt	lt
   b8632:	464c      	movlt	r4, r9
   b8634:	4699      	movlt	r9, r3
   b8636:	6927      	ldr	r7, [r4, #16]
   b8638:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b863c:	68a3      	ldr	r3, [r4, #8]
   b863e:	6861      	ldr	r1, [r4, #4]
   b8640:	eb07 060a 	add.w	r6, r7, sl
   b8644:	42b3      	cmp	r3, r6
   b8646:	b085      	sub	sp, #20
   b8648:	bfb8      	it	lt
   b864a:	3101      	addlt	r1, #1
   b864c:	f7ff fe8e 	bl	b836c <_Balloc>
   b8650:	b930      	cbnz	r0, b8660 <__multiply+0x44>
   b8652:	4602      	mov	r2, r0
   b8654:	4b44      	ldr	r3, [pc, #272]	; (b8768 <__multiply+0x14c>)
   b8656:	4845      	ldr	r0, [pc, #276]	; (b876c <__multiply+0x150>)
   b8658:	f240 115d 	movw	r1, #349	; 0x15d
   b865c:	f7fc fddc 	bl	b5218 <__assert_func>
   b8660:	f100 0514 	add.w	r5, r0, #20
   b8664:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b8668:	462b      	mov	r3, r5
   b866a:	2200      	movs	r2, #0
   b866c:	4543      	cmp	r3, r8
   b866e:	d321      	bcc.n	b86b4 <__multiply+0x98>
   b8670:	f104 0314 	add.w	r3, r4, #20
   b8674:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b8678:	f109 0314 	add.w	r3, r9, #20
   b867c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b8680:	9202      	str	r2, [sp, #8]
   b8682:	1b3a      	subs	r2, r7, r4
   b8684:	3a15      	subs	r2, #21
   b8686:	f022 0203 	bic.w	r2, r2, #3
   b868a:	3204      	adds	r2, #4
   b868c:	f104 0115 	add.w	r1, r4, #21
   b8690:	428f      	cmp	r7, r1
   b8692:	bf38      	it	cc
   b8694:	2204      	movcc	r2, #4
   b8696:	9201      	str	r2, [sp, #4]
   b8698:	9a02      	ldr	r2, [sp, #8]
   b869a:	9303      	str	r3, [sp, #12]
   b869c:	429a      	cmp	r2, r3
   b869e:	d80c      	bhi.n	b86ba <__multiply+0x9e>
   b86a0:	2e00      	cmp	r6, #0
   b86a2:	dd03      	ble.n	b86ac <__multiply+0x90>
   b86a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b86a8:	2b00      	cmp	r3, #0
   b86aa:	d05a      	beq.n	b8762 <__multiply+0x146>
   b86ac:	6106      	str	r6, [r0, #16]
   b86ae:	b005      	add	sp, #20
   b86b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b86b4:	f843 2b04 	str.w	r2, [r3], #4
   b86b8:	e7d8      	b.n	b866c <__multiply+0x50>
   b86ba:	f8b3 a000 	ldrh.w	sl, [r3]
   b86be:	f1ba 0f00 	cmp.w	sl, #0
   b86c2:	d024      	beq.n	b870e <__multiply+0xf2>
   b86c4:	f104 0e14 	add.w	lr, r4, #20
   b86c8:	46a9      	mov	r9, r5
   b86ca:	f04f 0c00 	mov.w	ip, #0
   b86ce:	f85e 2b04 	ldr.w	r2, [lr], #4
   b86d2:	f8d9 1000 	ldr.w	r1, [r9]
   b86d6:	fa1f fb82 	uxth.w	fp, r2
   b86da:	b289      	uxth	r1, r1
   b86dc:	fb0a 110b 	mla	r1, sl, fp, r1
   b86e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b86e4:	f8d9 2000 	ldr.w	r2, [r9]
   b86e8:	4461      	add	r1, ip
   b86ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b86ee:	fb0a c20b 	mla	r2, sl, fp, ip
   b86f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b86f6:	b289      	uxth	r1, r1
   b86f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b86fc:	4577      	cmp	r7, lr
   b86fe:	f849 1b04 	str.w	r1, [r9], #4
   b8702:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b8706:	d8e2      	bhi.n	b86ce <__multiply+0xb2>
   b8708:	9a01      	ldr	r2, [sp, #4]
   b870a:	f845 c002 	str.w	ip, [r5, r2]
   b870e:	9a03      	ldr	r2, [sp, #12]
   b8710:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b8714:	3304      	adds	r3, #4
   b8716:	f1b9 0f00 	cmp.w	r9, #0
   b871a:	d020      	beq.n	b875e <__multiply+0x142>
   b871c:	6829      	ldr	r1, [r5, #0]
   b871e:	f104 0c14 	add.w	ip, r4, #20
   b8722:	46ae      	mov	lr, r5
   b8724:	f04f 0a00 	mov.w	sl, #0
   b8728:	f8bc b000 	ldrh.w	fp, [ip]
   b872c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b8730:	fb09 220b 	mla	r2, r9, fp, r2
   b8734:	4492      	add	sl, r2
   b8736:	b289      	uxth	r1, r1
   b8738:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b873c:	f84e 1b04 	str.w	r1, [lr], #4
   b8740:	f85c 2b04 	ldr.w	r2, [ip], #4
   b8744:	f8be 1000 	ldrh.w	r1, [lr]
   b8748:	0c12      	lsrs	r2, r2, #16
   b874a:	fb09 1102 	mla	r1, r9, r2, r1
   b874e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b8752:	4567      	cmp	r7, ip
   b8754:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b8758:	d8e6      	bhi.n	b8728 <__multiply+0x10c>
   b875a:	9a01      	ldr	r2, [sp, #4]
   b875c:	50a9      	str	r1, [r5, r2]
   b875e:	3504      	adds	r5, #4
   b8760:	e79a      	b.n	b8698 <__multiply+0x7c>
   b8762:	3e01      	subs	r6, #1
   b8764:	e79c      	b.n	b86a0 <__multiply+0x84>
   b8766:	bf00      	nop
   b8768:	000b91f1 	.word	0x000b91f1
   b876c:	000b929c 	.word	0x000b929c

000b8770 <__pow5mult>:
   b8770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8774:	4615      	mov	r5, r2
   b8776:	f012 0203 	ands.w	r2, r2, #3
   b877a:	4606      	mov	r6, r0
   b877c:	460f      	mov	r7, r1
   b877e:	d007      	beq.n	b8790 <__pow5mult+0x20>
   b8780:	4c25      	ldr	r4, [pc, #148]	; (b8818 <__pow5mult+0xa8>)
   b8782:	3a01      	subs	r2, #1
   b8784:	2300      	movs	r3, #0
   b8786:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b878a:	f7ff fe51 	bl	b8430 <__multadd>
   b878e:	4607      	mov	r7, r0
   b8790:	10ad      	asrs	r5, r5, #2
   b8792:	d03d      	beq.n	b8810 <__pow5mult+0xa0>
   b8794:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b8796:	b97c      	cbnz	r4, b87b8 <__pow5mult+0x48>
   b8798:	2010      	movs	r0, #16
   b879a:	f7fc fd0d 	bl	b51b8 <malloc>
   b879e:	4602      	mov	r2, r0
   b87a0:	6270      	str	r0, [r6, #36]	; 0x24
   b87a2:	b928      	cbnz	r0, b87b0 <__pow5mult+0x40>
   b87a4:	4b1d      	ldr	r3, [pc, #116]	; (b881c <__pow5mult+0xac>)
   b87a6:	481e      	ldr	r0, [pc, #120]	; (b8820 <__pow5mult+0xb0>)
   b87a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b87ac:	f7fc fd34 	bl	b5218 <__assert_func>
   b87b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b87b4:	6004      	str	r4, [r0, #0]
   b87b6:	60c4      	str	r4, [r0, #12]
   b87b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b87bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b87c0:	b94c      	cbnz	r4, b87d6 <__pow5mult+0x66>
   b87c2:	f240 2171 	movw	r1, #625	; 0x271
   b87c6:	4630      	mov	r0, r6
   b87c8:	f7ff ff12 	bl	b85f0 <__i2b>
   b87cc:	2300      	movs	r3, #0
   b87ce:	f8c8 0008 	str.w	r0, [r8, #8]
   b87d2:	4604      	mov	r4, r0
   b87d4:	6003      	str	r3, [r0, #0]
   b87d6:	f04f 0900 	mov.w	r9, #0
   b87da:	07eb      	lsls	r3, r5, #31
   b87dc:	d50a      	bpl.n	b87f4 <__pow5mult+0x84>
   b87de:	4639      	mov	r1, r7
   b87e0:	4622      	mov	r2, r4
   b87e2:	4630      	mov	r0, r6
   b87e4:	f7ff ff1a 	bl	b861c <__multiply>
   b87e8:	4639      	mov	r1, r7
   b87ea:	4680      	mov	r8, r0
   b87ec:	4630      	mov	r0, r6
   b87ee:	f7ff fdfd 	bl	b83ec <_Bfree>
   b87f2:	4647      	mov	r7, r8
   b87f4:	106d      	asrs	r5, r5, #1
   b87f6:	d00b      	beq.n	b8810 <__pow5mult+0xa0>
   b87f8:	6820      	ldr	r0, [r4, #0]
   b87fa:	b938      	cbnz	r0, b880c <__pow5mult+0x9c>
   b87fc:	4622      	mov	r2, r4
   b87fe:	4621      	mov	r1, r4
   b8800:	4630      	mov	r0, r6
   b8802:	f7ff ff0b 	bl	b861c <__multiply>
   b8806:	6020      	str	r0, [r4, #0]
   b8808:	f8c0 9000 	str.w	r9, [r0]
   b880c:	4604      	mov	r4, r0
   b880e:	e7e4      	b.n	b87da <__pow5mult+0x6a>
   b8810:	4638      	mov	r0, r7
   b8812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8816:	bf00      	nop
   b8818:	000b9410 	.word	0x000b9410
   b881c:	000b8ff9 	.word	0x000b8ff9
   b8820:	000b929c 	.word	0x000b929c

000b8824 <__lshift>:
   b8824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8828:	460c      	mov	r4, r1
   b882a:	6849      	ldr	r1, [r1, #4]
   b882c:	6923      	ldr	r3, [r4, #16]
   b882e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b8832:	68a3      	ldr	r3, [r4, #8]
   b8834:	4607      	mov	r7, r0
   b8836:	4691      	mov	r9, r2
   b8838:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b883c:	f108 0601 	add.w	r6, r8, #1
   b8840:	42b3      	cmp	r3, r6
   b8842:	db0b      	blt.n	b885c <__lshift+0x38>
   b8844:	4638      	mov	r0, r7
   b8846:	f7ff fd91 	bl	b836c <_Balloc>
   b884a:	4605      	mov	r5, r0
   b884c:	b948      	cbnz	r0, b8862 <__lshift+0x3e>
   b884e:	4602      	mov	r2, r0
   b8850:	4b2a      	ldr	r3, [pc, #168]	; (b88fc <__lshift+0xd8>)
   b8852:	482b      	ldr	r0, [pc, #172]	; (b8900 <__lshift+0xdc>)
   b8854:	f240 11d9 	movw	r1, #473	; 0x1d9
   b8858:	f7fc fcde 	bl	b5218 <__assert_func>
   b885c:	3101      	adds	r1, #1
   b885e:	005b      	lsls	r3, r3, #1
   b8860:	e7ee      	b.n	b8840 <__lshift+0x1c>
   b8862:	2300      	movs	r3, #0
   b8864:	f100 0114 	add.w	r1, r0, #20
   b8868:	f100 0210 	add.w	r2, r0, #16
   b886c:	4618      	mov	r0, r3
   b886e:	4553      	cmp	r3, sl
   b8870:	db37      	blt.n	b88e2 <__lshift+0xbe>
   b8872:	6920      	ldr	r0, [r4, #16]
   b8874:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b8878:	f104 0314 	add.w	r3, r4, #20
   b887c:	f019 091f 	ands.w	r9, r9, #31
   b8880:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b8884:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b8888:	d02f      	beq.n	b88ea <__lshift+0xc6>
   b888a:	f1c9 0e20 	rsb	lr, r9, #32
   b888e:	468a      	mov	sl, r1
   b8890:	f04f 0c00 	mov.w	ip, #0
   b8894:	681a      	ldr	r2, [r3, #0]
   b8896:	fa02 f209 	lsl.w	r2, r2, r9
   b889a:	ea42 020c 	orr.w	r2, r2, ip
   b889e:	f84a 2b04 	str.w	r2, [sl], #4
   b88a2:	f853 2b04 	ldr.w	r2, [r3], #4
   b88a6:	4298      	cmp	r0, r3
   b88a8:	fa22 fc0e 	lsr.w	ip, r2, lr
   b88ac:	d8f2      	bhi.n	b8894 <__lshift+0x70>
   b88ae:	1b03      	subs	r3, r0, r4
   b88b0:	3b15      	subs	r3, #21
   b88b2:	f023 0303 	bic.w	r3, r3, #3
   b88b6:	3304      	adds	r3, #4
   b88b8:	f104 0215 	add.w	r2, r4, #21
   b88bc:	4290      	cmp	r0, r2
   b88be:	bf38      	it	cc
   b88c0:	2304      	movcc	r3, #4
   b88c2:	f841 c003 	str.w	ip, [r1, r3]
   b88c6:	f1bc 0f00 	cmp.w	ip, #0
   b88ca:	d001      	beq.n	b88d0 <__lshift+0xac>
   b88cc:	f108 0602 	add.w	r6, r8, #2
   b88d0:	3e01      	subs	r6, #1
   b88d2:	4638      	mov	r0, r7
   b88d4:	612e      	str	r6, [r5, #16]
   b88d6:	4621      	mov	r1, r4
   b88d8:	f7ff fd88 	bl	b83ec <_Bfree>
   b88dc:	4628      	mov	r0, r5
   b88de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b88e2:	f842 0f04 	str.w	r0, [r2, #4]!
   b88e6:	3301      	adds	r3, #1
   b88e8:	e7c1      	b.n	b886e <__lshift+0x4a>
   b88ea:	3904      	subs	r1, #4
   b88ec:	f853 2b04 	ldr.w	r2, [r3], #4
   b88f0:	f841 2f04 	str.w	r2, [r1, #4]!
   b88f4:	4298      	cmp	r0, r3
   b88f6:	d8f9      	bhi.n	b88ec <__lshift+0xc8>
   b88f8:	e7ea      	b.n	b88d0 <__lshift+0xac>
   b88fa:	bf00      	nop
   b88fc:	000b91f1 	.word	0x000b91f1
   b8900:	000b929c 	.word	0x000b929c

000b8904 <__mcmp>:
   b8904:	b530      	push	{r4, r5, lr}
   b8906:	6902      	ldr	r2, [r0, #16]
   b8908:	690c      	ldr	r4, [r1, #16]
   b890a:	1b12      	subs	r2, r2, r4
   b890c:	d10e      	bne.n	b892c <__mcmp+0x28>
   b890e:	f100 0314 	add.w	r3, r0, #20
   b8912:	3114      	adds	r1, #20
   b8914:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b8918:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b891c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b8920:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b8924:	42a5      	cmp	r5, r4
   b8926:	d003      	beq.n	b8930 <__mcmp+0x2c>
   b8928:	d305      	bcc.n	b8936 <__mcmp+0x32>
   b892a:	2201      	movs	r2, #1
   b892c:	4610      	mov	r0, r2
   b892e:	bd30      	pop	{r4, r5, pc}
   b8930:	4283      	cmp	r3, r0
   b8932:	d3f3      	bcc.n	b891c <__mcmp+0x18>
   b8934:	e7fa      	b.n	b892c <__mcmp+0x28>
   b8936:	f04f 32ff 	mov.w	r2, #4294967295
   b893a:	e7f7      	b.n	b892c <__mcmp+0x28>

000b893c <__mdiff>:
   b893c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8940:	460c      	mov	r4, r1
   b8942:	4606      	mov	r6, r0
   b8944:	4611      	mov	r1, r2
   b8946:	4620      	mov	r0, r4
   b8948:	4690      	mov	r8, r2
   b894a:	f7ff ffdb 	bl	b8904 <__mcmp>
   b894e:	1e05      	subs	r5, r0, #0
   b8950:	d110      	bne.n	b8974 <__mdiff+0x38>
   b8952:	4629      	mov	r1, r5
   b8954:	4630      	mov	r0, r6
   b8956:	f7ff fd09 	bl	b836c <_Balloc>
   b895a:	b930      	cbnz	r0, b896a <__mdiff+0x2e>
   b895c:	4b3a      	ldr	r3, [pc, #232]	; (b8a48 <__mdiff+0x10c>)
   b895e:	4602      	mov	r2, r0
   b8960:	f240 2132 	movw	r1, #562	; 0x232
   b8964:	4839      	ldr	r0, [pc, #228]	; (b8a4c <__mdiff+0x110>)
   b8966:	f7fc fc57 	bl	b5218 <__assert_func>
   b896a:	2301      	movs	r3, #1
   b896c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b8970:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8974:	bfa4      	itt	ge
   b8976:	4643      	movge	r3, r8
   b8978:	46a0      	movge	r8, r4
   b897a:	4630      	mov	r0, r6
   b897c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b8980:	bfa6      	itte	ge
   b8982:	461c      	movge	r4, r3
   b8984:	2500      	movge	r5, #0
   b8986:	2501      	movlt	r5, #1
   b8988:	f7ff fcf0 	bl	b836c <_Balloc>
   b898c:	b920      	cbnz	r0, b8998 <__mdiff+0x5c>
   b898e:	4b2e      	ldr	r3, [pc, #184]	; (b8a48 <__mdiff+0x10c>)
   b8990:	4602      	mov	r2, r0
   b8992:	f44f 7110 	mov.w	r1, #576	; 0x240
   b8996:	e7e5      	b.n	b8964 <__mdiff+0x28>
   b8998:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b899c:	6926      	ldr	r6, [r4, #16]
   b899e:	60c5      	str	r5, [r0, #12]
   b89a0:	f104 0914 	add.w	r9, r4, #20
   b89a4:	f108 0514 	add.w	r5, r8, #20
   b89a8:	f100 0e14 	add.w	lr, r0, #20
   b89ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b89b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b89b4:	f108 0210 	add.w	r2, r8, #16
   b89b8:	46f2      	mov	sl, lr
   b89ba:	2100      	movs	r1, #0
   b89bc:	f859 3b04 	ldr.w	r3, [r9], #4
   b89c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b89c4:	fa1f f883 	uxth.w	r8, r3
   b89c8:	fa11 f18b 	uxtah	r1, r1, fp
   b89cc:	0c1b      	lsrs	r3, r3, #16
   b89ce:	eba1 0808 	sub.w	r8, r1, r8
   b89d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b89d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b89da:	fa1f f888 	uxth.w	r8, r8
   b89de:	1419      	asrs	r1, r3, #16
   b89e0:	454e      	cmp	r6, r9
   b89e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b89e6:	f84a 3b04 	str.w	r3, [sl], #4
   b89ea:	d8e7      	bhi.n	b89bc <__mdiff+0x80>
   b89ec:	1b33      	subs	r3, r6, r4
   b89ee:	3b15      	subs	r3, #21
   b89f0:	f023 0303 	bic.w	r3, r3, #3
   b89f4:	3304      	adds	r3, #4
   b89f6:	3415      	adds	r4, #21
   b89f8:	42a6      	cmp	r6, r4
   b89fa:	bf38      	it	cc
   b89fc:	2304      	movcc	r3, #4
   b89fe:	441d      	add	r5, r3
   b8a00:	4473      	add	r3, lr
   b8a02:	469e      	mov	lr, r3
   b8a04:	462e      	mov	r6, r5
   b8a06:	4566      	cmp	r6, ip
   b8a08:	d30e      	bcc.n	b8a28 <__mdiff+0xec>
   b8a0a:	f10c 0203 	add.w	r2, ip, #3
   b8a0e:	1b52      	subs	r2, r2, r5
   b8a10:	f022 0203 	bic.w	r2, r2, #3
   b8a14:	3d03      	subs	r5, #3
   b8a16:	45ac      	cmp	ip, r5
   b8a18:	bf38      	it	cc
   b8a1a:	2200      	movcc	r2, #0
   b8a1c:	441a      	add	r2, r3
   b8a1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b8a22:	b17b      	cbz	r3, b8a44 <__mdiff+0x108>
   b8a24:	6107      	str	r7, [r0, #16]
   b8a26:	e7a3      	b.n	b8970 <__mdiff+0x34>
   b8a28:	f856 8b04 	ldr.w	r8, [r6], #4
   b8a2c:	fa11 f288 	uxtah	r2, r1, r8
   b8a30:	1414      	asrs	r4, r2, #16
   b8a32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b8a36:	b292      	uxth	r2, r2
   b8a38:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b8a3c:	f84e 2b04 	str.w	r2, [lr], #4
   b8a40:	1421      	asrs	r1, r4, #16
   b8a42:	e7e0      	b.n	b8a06 <__mdiff+0xca>
   b8a44:	3f01      	subs	r7, #1
   b8a46:	e7ea      	b.n	b8a1e <__mdiff+0xe2>
   b8a48:	000b91f1 	.word	0x000b91f1
   b8a4c:	000b929c 	.word	0x000b929c

000b8a50 <__ulp>:
   b8a50:	b082      	sub	sp, #8
   b8a52:	ed8d 0b00 	vstr	d0, [sp]
   b8a56:	9b01      	ldr	r3, [sp, #4]
   b8a58:	4912      	ldr	r1, [pc, #72]	; (b8aa4 <__ulp+0x54>)
   b8a5a:	4019      	ands	r1, r3
   b8a5c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b8a60:	2900      	cmp	r1, #0
   b8a62:	dd05      	ble.n	b8a70 <__ulp+0x20>
   b8a64:	2200      	movs	r2, #0
   b8a66:	460b      	mov	r3, r1
   b8a68:	ec43 2b10 	vmov	d0, r2, r3
   b8a6c:	b002      	add	sp, #8
   b8a6e:	4770      	bx	lr
   b8a70:	4249      	negs	r1, r1
   b8a72:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b8a76:	ea4f 5021 	mov.w	r0, r1, asr #20
   b8a7a:	f04f 0200 	mov.w	r2, #0
   b8a7e:	f04f 0300 	mov.w	r3, #0
   b8a82:	da04      	bge.n	b8a8e <__ulp+0x3e>
   b8a84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b8a88:	fa41 f300 	asr.w	r3, r1, r0
   b8a8c:	e7ec      	b.n	b8a68 <__ulp+0x18>
   b8a8e:	f1a0 0114 	sub.w	r1, r0, #20
   b8a92:	291e      	cmp	r1, #30
   b8a94:	bfda      	itte	le
   b8a96:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b8a9a:	fa20 f101 	lsrle.w	r1, r0, r1
   b8a9e:	2101      	movgt	r1, #1
   b8aa0:	460a      	mov	r2, r1
   b8aa2:	e7e1      	b.n	b8a68 <__ulp+0x18>
   b8aa4:	7ff00000 	.word	0x7ff00000

000b8aa8 <__b2d>:
   b8aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8aaa:	6905      	ldr	r5, [r0, #16]
   b8aac:	f100 0714 	add.w	r7, r0, #20
   b8ab0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b8ab4:	1f2e      	subs	r6, r5, #4
   b8ab6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b8aba:	4620      	mov	r0, r4
   b8abc:	f7ff fd48 	bl	b8550 <__hi0bits>
   b8ac0:	f1c0 0320 	rsb	r3, r0, #32
   b8ac4:	280a      	cmp	r0, #10
   b8ac6:	f8df c07c 	ldr.w	ip, [pc, #124]	; b8b44 <__b2d+0x9c>
   b8aca:	600b      	str	r3, [r1, #0]
   b8acc:	dc14      	bgt.n	b8af8 <__b2d+0x50>
   b8ace:	f1c0 0e0b 	rsb	lr, r0, #11
   b8ad2:	fa24 f10e 	lsr.w	r1, r4, lr
   b8ad6:	42b7      	cmp	r7, r6
   b8ad8:	ea41 030c 	orr.w	r3, r1, ip
   b8adc:	bf34      	ite	cc
   b8ade:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b8ae2:	2100      	movcs	r1, #0
   b8ae4:	3015      	adds	r0, #21
   b8ae6:	fa04 f000 	lsl.w	r0, r4, r0
   b8aea:	fa21 f10e 	lsr.w	r1, r1, lr
   b8aee:	ea40 0201 	orr.w	r2, r0, r1
   b8af2:	ec43 2b10 	vmov	d0, r2, r3
   b8af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8af8:	42b7      	cmp	r7, r6
   b8afa:	bf3a      	itte	cc
   b8afc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b8b00:	f1a5 0608 	subcc.w	r6, r5, #8
   b8b04:	2100      	movcs	r1, #0
   b8b06:	380b      	subs	r0, #11
   b8b08:	d017      	beq.n	b8b3a <__b2d+0x92>
   b8b0a:	f1c0 0c20 	rsb	ip, r0, #32
   b8b0e:	fa04 f500 	lsl.w	r5, r4, r0
   b8b12:	42be      	cmp	r6, r7
   b8b14:	fa21 f40c 	lsr.w	r4, r1, ip
   b8b18:	ea45 0504 	orr.w	r5, r5, r4
   b8b1c:	bf8c      	ite	hi
   b8b1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b8b22:	2400      	movls	r4, #0
   b8b24:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b8b28:	fa01 f000 	lsl.w	r0, r1, r0
   b8b2c:	fa24 f40c 	lsr.w	r4, r4, ip
   b8b30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b8b34:	ea40 0204 	orr.w	r2, r0, r4
   b8b38:	e7db      	b.n	b8af2 <__b2d+0x4a>
   b8b3a:	ea44 030c 	orr.w	r3, r4, ip
   b8b3e:	460a      	mov	r2, r1
   b8b40:	e7d7      	b.n	b8af2 <__b2d+0x4a>
   b8b42:	bf00      	nop
   b8b44:	3ff00000 	.word	0x3ff00000

000b8b48 <__d2b>:
   b8b48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8b4c:	4689      	mov	r9, r1
   b8b4e:	2101      	movs	r1, #1
   b8b50:	ec57 6b10 	vmov	r6, r7, d0
   b8b54:	4690      	mov	r8, r2
   b8b56:	f7ff fc09 	bl	b836c <_Balloc>
   b8b5a:	4604      	mov	r4, r0
   b8b5c:	b930      	cbnz	r0, b8b6c <__d2b+0x24>
   b8b5e:	4602      	mov	r2, r0
   b8b60:	4b25      	ldr	r3, [pc, #148]	; (b8bf8 <__d2b+0xb0>)
   b8b62:	4826      	ldr	r0, [pc, #152]	; (b8bfc <__d2b+0xb4>)
   b8b64:	f240 310a 	movw	r1, #778	; 0x30a
   b8b68:	f7fc fb56 	bl	b5218 <__assert_func>
   b8b6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   b8b70:	f3c7 0313 	ubfx	r3, r7, #0, #20
   b8b74:	bb35      	cbnz	r5, b8bc4 <__d2b+0x7c>
   b8b76:	2e00      	cmp	r6, #0
   b8b78:	9301      	str	r3, [sp, #4]
   b8b7a:	d028      	beq.n	b8bce <__d2b+0x86>
   b8b7c:	4668      	mov	r0, sp
   b8b7e:	9600      	str	r6, [sp, #0]
   b8b80:	f7ff fd06 	bl	b8590 <__lo0bits>
   b8b84:	9900      	ldr	r1, [sp, #0]
   b8b86:	b300      	cbz	r0, b8bca <__d2b+0x82>
   b8b88:	9a01      	ldr	r2, [sp, #4]
   b8b8a:	f1c0 0320 	rsb	r3, r0, #32
   b8b8e:	fa02 f303 	lsl.w	r3, r2, r3
   b8b92:	430b      	orrs	r3, r1
   b8b94:	40c2      	lsrs	r2, r0
   b8b96:	6163      	str	r3, [r4, #20]
   b8b98:	9201      	str	r2, [sp, #4]
   b8b9a:	9b01      	ldr	r3, [sp, #4]
   b8b9c:	61a3      	str	r3, [r4, #24]
   b8b9e:	2b00      	cmp	r3, #0
   b8ba0:	bf14      	ite	ne
   b8ba2:	2202      	movne	r2, #2
   b8ba4:	2201      	moveq	r2, #1
   b8ba6:	6122      	str	r2, [r4, #16]
   b8ba8:	b1d5      	cbz	r5, b8be0 <__d2b+0x98>
   b8baa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   b8bae:	4405      	add	r5, r0
   b8bb0:	f8c9 5000 	str.w	r5, [r9]
   b8bb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   b8bb8:	f8c8 0000 	str.w	r0, [r8]
   b8bbc:	4620      	mov	r0, r4
   b8bbe:	b003      	add	sp, #12
   b8bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8bc8:	e7d5      	b.n	b8b76 <__d2b+0x2e>
   b8bca:	6161      	str	r1, [r4, #20]
   b8bcc:	e7e5      	b.n	b8b9a <__d2b+0x52>
   b8bce:	a801      	add	r0, sp, #4
   b8bd0:	f7ff fcde 	bl	b8590 <__lo0bits>
   b8bd4:	9b01      	ldr	r3, [sp, #4]
   b8bd6:	6163      	str	r3, [r4, #20]
   b8bd8:	2201      	movs	r2, #1
   b8bda:	6122      	str	r2, [r4, #16]
   b8bdc:	3020      	adds	r0, #32
   b8bde:	e7e3      	b.n	b8ba8 <__d2b+0x60>
   b8be0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   b8be4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   b8be8:	f8c9 0000 	str.w	r0, [r9]
   b8bec:	6918      	ldr	r0, [r3, #16]
   b8bee:	f7ff fcaf 	bl	b8550 <__hi0bits>
   b8bf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   b8bf6:	e7df      	b.n	b8bb8 <__d2b+0x70>
   b8bf8:	000b91f1 	.word	0x000b91f1
   b8bfc:	000b929c 	.word	0x000b929c

000b8c00 <__ratio>:
   b8c00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8c04:	4688      	mov	r8, r1
   b8c06:	4669      	mov	r1, sp
   b8c08:	4681      	mov	r9, r0
   b8c0a:	f7ff ff4d 	bl	b8aa8 <__b2d>
   b8c0e:	a901      	add	r1, sp, #4
   b8c10:	4640      	mov	r0, r8
   b8c12:	ec55 4b10 	vmov	r4, r5, d0
   b8c16:	f7ff ff47 	bl	b8aa8 <__b2d>
   b8c1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b8c1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   b8c22:	eba3 0c02 	sub.w	ip, r3, r2
   b8c26:	e9dd 3200 	ldrd	r3, r2, [sp]
   b8c2a:	1a9b      	subs	r3, r3, r2
   b8c2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   b8c30:	ec51 0b10 	vmov	r0, r1, d0
   b8c34:	2b00      	cmp	r3, #0
   b8c36:	bfd6      	itet	le
   b8c38:	460a      	movle	r2, r1
   b8c3a:	462a      	movgt	r2, r5
   b8c3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   b8c40:	468b      	mov	fp, r1
   b8c42:	462f      	mov	r7, r5
   b8c44:	bfd4      	ite	le
   b8c46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   b8c4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   b8c4e:	4620      	mov	r0, r4
   b8c50:	ee10 2a10 	vmov	r2, s0
   b8c54:	465b      	mov	r3, fp
   b8c56:	4639      	mov	r1, r7
   b8c58:	f7fd fee4 	bl	b6a24 <__aeabi_ddiv>
   b8c5c:	ec41 0b10 	vmov	d0, r0, r1
   b8c60:	b003      	add	sp, #12
   b8c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8c66 <__copybits>:
   b8c66:	3901      	subs	r1, #1
   b8c68:	b570      	push	{r4, r5, r6, lr}
   b8c6a:	1149      	asrs	r1, r1, #5
   b8c6c:	6914      	ldr	r4, [r2, #16]
   b8c6e:	3101      	adds	r1, #1
   b8c70:	f102 0314 	add.w	r3, r2, #20
   b8c74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b8c78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b8c7c:	1f05      	subs	r5, r0, #4
   b8c7e:	42a3      	cmp	r3, r4
   b8c80:	d30c      	bcc.n	b8c9c <__copybits+0x36>
   b8c82:	1aa3      	subs	r3, r4, r2
   b8c84:	3b11      	subs	r3, #17
   b8c86:	f023 0303 	bic.w	r3, r3, #3
   b8c8a:	3211      	adds	r2, #17
   b8c8c:	42a2      	cmp	r2, r4
   b8c8e:	bf88      	it	hi
   b8c90:	2300      	movhi	r3, #0
   b8c92:	4418      	add	r0, r3
   b8c94:	2300      	movs	r3, #0
   b8c96:	4288      	cmp	r0, r1
   b8c98:	d305      	bcc.n	b8ca6 <__copybits+0x40>
   b8c9a:	bd70      	pop	{r4, r5, r6, pc}
   b8c9c:	f853 6b04 	ldr.w	r6, [r3], #4
   b8ca0:	f845 6f04 	str.w	r6, [r5, #4]!
   b8ca4:	e7eb      	b.n	b8c7e <__copybits+0x18>
   b8ca6:	f840 3b04 	str.w	r3, [r0], #4
   b8caa:	e7f4      	b.n	b8c96 <__copybits+0x30>

000b8cac <__any_on>:
   b8cac:	f100 0214 	add.w	r2, r0, #20
   b8cb0:	6900      	ldr	r0, [r0, #16]
   b8cb2:	114b      	asrs	r3, r1, #5
   b8cb4:	4298      	cmp	r0, r3
   b8cb6:	b510      	push	{r4, lr}
   b8cb8:	db11      	blt.n	b8cde <__any_on+0x32>
   b8cba:	dd0a      	ble.n	b8cd2 <__any_on+0x26>
   b8cbc:	f011 011f 	ands.w	r1, r1, #31
   b8cc0:	d007      	beq.n	b8cd2 <__any_on+0x26>
   b8cc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b8cc6:	fa24 f001 	lsr.w	r0, r4, r1
   b8cca:	fa00 f101 	lsl.w	r1, r0, r1
   b8cce:	428c      	cmp	r4, r1
   b8cd0:	d10b      	bne.n	b8cea <__any_on+0x3e>
   b8cd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b8cd6:	4293      	cmp	r3, r2
   b8cd8:	d803      	bhi.n	b8ce2 <__any_on+0x36>
   b8cda:	2000      	movs	r0, #0
   b8cdc:	bd10      	pop	{r4, pc}
   b8cde:	4603      	mov	r3, r0
   b8ce0:	e7f7      	b.n	b8cd2 <__any_on+0x26>
   b8ce2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   b8ce6:	2900      	cmp	r1, #0
   b8ce8:	d0f5      	beq.n	b8cd6 <__any_on+0x2a>
   b8cea:	2001      	movs	r0, #1
   b8cec:	e7f6      	b.n	b8cdc <__any_on+0x30>

000b8cee <_calloc_r>:
   b8cee:	b513      	push	{r0, r1, r4, lr}
   b8cf0:	434a      	muls	r2, r1
   b8cf2:	4611      	mov	r1, r2
   b8cf4:	9201      	str	r2, [sp, #4]
   b8cf6:	f7fc fa87 	bl	b5208 <_malloc_r>
   b8cfa:	4604      	mov	r4, r0
   b8cfc:	b118      	cbz	r0, b8d06 <_calloc_r+0x18>
   b8cfe:	9a01      	ldr	r2, [sp, #4]
   b8d00:	2100      	movs	r1, #0
   b8d02:	f7fe f8a4 	bl	b6e4e <memset>
   b8d06:	4620      	mov	r0, r4
   b8d08:	b002      	add	sp, #8
   b8d0a:	bd10      	pop	{r4, pc}

000b8d0c <__ascii_wctomb>:
   b8d0c:	b149      	cbz	r1, b8d22 <__ascii_wctomb+0x16>
   b8d0e:	2aff      	cmp	r2, #255	; 0xff
   b8d10:	bf85      	ittet	hi
   b8d12:	238a      	movhi	r3, #138	; 0x8a
   b8d14:	6003      	strhi	r3, [r0, #0]
   b8d16:	700a      	strbls	r2, [r1, #0]
   b8d18:	f04f 30ff 	movhi.w	r0, #4294967295
   b8d1c:	bf98      	it	ls
   b8d1e:	2001      	movls	r0, #1
   b8d20:	4770      	bx	lr
   b8d22:	4608      	mov	r0, r1
   b8d24:	4770      	bx	lr
	...

000b8d28 <__aeabi_d2lz>:
   b8d28:	b538      	push	{r3, r4, r5, lr}
   b8d2a:	2200      	movs	r2, #0
   b8d2c:	2300      	movs	r3, #0
   b8d2e:	4604      	mov	r4, r0
   b8d30:	460d      	mov	r5, r1
   b8d32:	f7fd ffbf 	bl	b6cb4 <__aeabi_dcmplt>
   b8d36:	b928      	cbnz	r0, b8d44 <__aeabi_d2lz+0x1c>
   b8d38:	4620      	mov	r0, r4
   b8d3a:	4629      	mov	r1, r5
   b8d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8d40:	f7fe b850 	b.w	b6de4 <__aeabi_d2ulz>
   b8d44:	4620      	mov	r0, r4
   b8d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b8d4a:	f7fe f84b 	bl	b6de4 <__aeabi_d2ulz>
   b8d4e:	4240      	negs	r0, r0
   b8d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8d54:	bd38      	pop	{r3, r4, r5, pc}
   b8d56:	bf00      	nop

000b8d58 <dynalib_user>:
   b8d58:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8d68:	0000 0000 2550 312e 2c66 5320 254d 2c64     ....P%.1f, SM%d,
   b8d78:	5520 2550 0075 000d 4f46 4352 5f45 4c53      UP%u...FORCE_SL
   b8d88:	4545 0050 3331 323a 3a36 3734 4e00 766f     EEP.13:26:47.Nov
   b8d98:	2020 2039 3032 3232 3100 3a36 3030 303a       9 2022.16:00:0
   b8da8:	0030 3830 303a 3a30 3030 6800 6f6f 2d6b     0.08:00:00.hook-
   b8db8:	6572 7073 6e6f 6573 472f 5445 575f 4145     response/GET_WEA
   b8dc8:	4854 5245 445f 5441 0041 0000               THER_DATA...

000b8dd4 <_ZTV5Timer>:
	...
   b8ddc:	4189 000b 41dd 000b 40e5 000b               .A...A...@..

000b8de8 <_ZTVN8particle9LEDStatusE>:
	...
   b8df0:	4145 000b 4161 000b 40b3 000b 696d 6b6b     EA..aA...@..mikk
   b8e00:	3931 3039 6170 6976 0061 6150 6976 4e61     1990pavia.PaviaN
   b8e10:	7465 4f20 6666 6369 0065 3032 3030 302d     et Office.2000-0
   b8e20:	2d31 3130 3054 3a30 3030 303a 0030          1-01T00:00:00.

000b8e2e <_ZL11daysInMonth>:
   b8e2e:	1c1f 1e1f 1e1f 1f1f 1f1e 001e 0000          ..............

000b8e3c <_ZTVN5spark13EthernetClassE>:
	...
   b8e44:	5297 000b 528d 000b 5283 000b 5279 000b     .R...R...R..yR..
   b8e54:	526d 000b 5261 000b 6121 000b 6129 000b     mR..aR..!a..)a..
   b8e64:	5255 000b 524d 000b 5243 000b 5239 000b     UR..MR..CR..9R..
   b8e74:	6159 000b 6977 6972 676e 5300 7379 6574     Ya..wiring.Syste
   b8e84:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   b8e94:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   b8ea4:	002e 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   b8eb4:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   b8ec4:	0065 0000                                   e...

000b8ec8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8ed0:	5749 000b 574f 000b 578d 000b 575d 000b     IW..OW...W..]W..
   b8ee0:	574b 000b                                   KW..

000b8ee4 <_ZTV9IPAddress>:
	...
   b8eec:	5cbd 000b 5cad 000b 5caf 000b               .\...\...\..

000b8ef8 <_ZTV9USBSerial>:
	...
   b8f00:	5da3 000b 5e0b 000b 5de1 000b 552d 000b     .]...^...]..-U..
   b8f10:	5dd3 000b 5da5 000b 5db5 000b 5e05 000b     .]...]...]...^..
   b8f20:	5dc5 000b 5d9d 000b                         .]...]..

000b8f28 <_ZTV11USARTSerial>:
	...
   b8f30:	5e9d 000b 5f09 000b 5ee1 000b 552d 000b     .^..._...^..-U..
   b8f40:	5eb1 000b 5ecd 000b 5ebf 000b 5edb 000b     .^...^...^...^..
   b8f50:	5e9f 000b 5ea3 000b                         .^...^..

000b8f58 <_ZTV7TwoWire>:
	...
   b8f60:	5f69 000b 5fb3 000b 5f8b 000b 5f6b 000b     i_..._..._..k_..
   b8f70:	5f93 000b 5f9b 000b 5fa3 000b 5fab 000b     ._..._..._..._..

000b8f80 <_ZTVN5spark9WiFiClassE>:
	...
   b8f88:	60c3 000b 60b9 000b 60af 000b 6065 000b     .`...`...`..e`..
   b8f98:	60a3 000b 6097 000b 6121 000b 6129 000b     .`...`..!a..)a..
   b8fa8:	608b 000b 6083 000b 6079 000b 606f 000b     .`...`..y`..o`..
   b8fb8:	6159 000b                                   Ya..

000b8fbc <_ZTVN5spark12NetworkClassE>:
	...
   b8fc4:	60e1 000b 60eb 000b 60f5 000b 60ff 000b     .`...`...`...`..
   b8fd4:	6109 000b 6115 000b 6121 000b 6129 000b     .a...a..!a..)a..
   b8fe4:	6131 000b 613d 000b 6145 000b 614f 000b     1a..=a..Ea..Oa..
   b8ff4:	6159 000b                                   Ya..

000b8ff8 <_ZSt7nothrow>:
   b8ff8:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b9008:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b9018:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b9028:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b9038:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b9048:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b9058:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b9068:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b9078:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b9088:	646e 632e 6e00 0066 6e69 7469 0079 6e61     nd.c.nf.inity.an
   b9098:	0000 0000                                   ....

000b909c <fpi.1>:
   b909c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   b90ac:	0000 0000                                   ....

000b90b0 <fpinan.0>:
   b90b0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000b90c8 <tinytens>:
   b90c8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   b90d8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   b90e8:	6f43 64ac 0628 1168                         Co.d(.h.

000b90f0 <_ctype_>:
   b90f0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b9100:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b9110:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b9120:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b9130:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b9140:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b9150:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b9160:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b9170:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   b91f0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   b9200:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   b9210:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   b9220:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   b9230:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   b9240:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   b9250:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   b9260:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   b9270:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   b9280:	6874 7865 632e 0000                         thex.c..

000b9288 <_C_numeric_locale>:
   b9288:	8ea4 000b 8d7f 000b e4c8 2003 0043 4f50     ........... C.PO
   b9298:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   b92a8:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b92b8:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b92c8:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b92d8:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b92e8:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b92f8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b9308:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   b9318:	0063 0000 0000 0000                         c.......

000b9320 <__mprec_bigtens>:
   b9320:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   b9330:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   b9340:	bf3c 7f73 4fdd 7515                         <.s..O.u

000b9348 <__mprec_tens>:
   b9348:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   b9358:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   b9368:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   b9378:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   b9388:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   b9398:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   b93a8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   b93b8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   b93c8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   b93d8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   b93e8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   b93f8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   b9408:	9db4 79d9 7843 44ea                         ...yCx.D

000b9410 <p05.0>:
   b9410:	0005 0000 0019 0000 007d 0000               ........}...

000b941c <link_const_variable_data_end>:
   b941c:	000b460d 	.word	0x000b460d
   b9420:	000b52a1 	.word	0x000b52a1
   b9424:	000b5425 	.word	0x000b5425
   b9428:	000b551d 	.word	0x000b551d
   b942c:	000b55c1 	.word	0x000b55c1
   b9430:	000b55d1 	.word	0x000b55d1
   b9434:	000b5605 	.word	0x000b5605
   b9438:	000b60cd 	.word	0x000b60cd
   b943c:	000b6231 	.word	0x000b6231
